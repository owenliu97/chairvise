{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\ConferenceBrief.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\ConferenceBrief.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ID_NEW_CONFERENCE } from \"@/common/const\";\nexport default {\n  name: 'ConferenceBrief',\n  props: {\n    id: String\n  },\n  mounted: function mounted() {\n    this.updateConferenceForm();\n  },\n  watch: {\n    'id': function id() {\n      this.updateConferenceForm();\n    }\n  },\n  computed: {\n    isLogin: function isLogin() {\n      return this.$store.state.userInfo.isLogin;\n    },\n    conferenceForm: function conferenceForm() {\n      var tzoffset = new Date().getTimezoneOffset() * 60000; //offset in milliseconds\n\n      var date = new Date(new Date(this.conferenceFormDate) - tzoffset).toISOString().slice(0, -1);\n      return {\n        name: this.conferenceFormName,\n        creatorIdentifier: this.conferenceFormCreatorIdentifier,\n        description: this.conferenceFormDescription,\n        date: date\n      };\n    },\n    conferenceFormName: {\n      get: function get() {\n        return this.$store.state.conference.conferenceForm.name;\n      },\n      set: function set(value) {\n        this.$store.commit('setConferenceFormField', {\n          field: 'name',\n          value: value\n        });\n      }\n    },\n    conferenceFormCreatorIdentifier: function conferenceFormCreatorIdentifier() {\n      return this.$store.state.conference.conferenceForm.creatorIdentifier;\n    },\n    conferenceFormDescription: {\n      get: function get() {\n        return this.$store.state.conference.conferenceForm.description;\n      },\n      set: function set(value) {\n        this.$store.commit('setConferenceFormField', {\n          field: 'description',\n          value: value\n        });\n      }\n    },\n    conferenceFormDate: {\n      get: function get() {\n        return this.$store.state.conference.conferenceForm.date;\n      },\n      set: function set(value) {\n        this.$store.commit('setConferenceFormField', {\n          field: 'date',\n          value: value\n        });\n      }\n    },\n    isNewConference: function isNewConference() {\n      return this.id === ID_NEW_CONFERENCE;\n    },\n    isInEditMode: function isInEditMode() {\n      return this.isEditing || this.isNewConference;\n    },\n    isLoading: function isLoading() {\n      return this.$store.state.conference.conferenceFormStatus.isLoading;\n    },\n    isError: function isError() {\n      return this.$store.state.conference.conferenceFormStatus.isApiError;\n    },\n    apiErrorMsg: function apiErrorMsg() {\n      return this.$store.state.conference.conferenceFormStatus.apiErrorMsg;\n    }\n  },\n  data: function data() {\n    return {\n      isEditing: false,\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please enter conference name',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          message: 'The length should be more than 3 character',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    changeEditMode: function changeEditMode(isEditing) {\n      if (isEditing === false) {\n        this.updateConferenceForm();\n      }\n\n      this.isEditing = isEditing;\n    },\n    addConference: function addConference() {\n      var _this = this;\n\n      this.$refs['conferenceForm'].validate(function (valid) {\n        if (!valid) {\n          return;\n        }\n\n        _this.$refs['conferenceForm'].clearValidate();\n\n        if (_this.isNewConference) {\n          // add\n          _this.$store.dispatch('saveConference').then(function () {\n            if (_this.isError) {\n              return;\n            } // redirect to the newly added conference\n\n\n            _this.$router.push({\n              name: 'conference',\n              params: {\n                id: _this.$store.state.conference.conferenceForm.id\n              }\n            });\n          });\n        } else {\n          // edit\n          _this.$store.dispatch('updateConference').then(function () {\n            if (_this.isError) {\n              return;\n            }\n\n            _this.isEditing = false;\n          });\n        }\n      });\n    },\n    deleteConference: function deleteConference() {\n      var _this2 = this;\n\n      this.$store.dispatch('deleteConference', this.id).then(function () {\n        if (_this2.isError) {\n          return;\n        }\n\n        _this2.$router.replace({\n          name: 'conference',\n          params: {\n            id: ID_NEW_CONFERENCE\n          }\n        });\n\n        _this2.isEditing = false;\n      });\n    },\n    updateConferenceForm: function updateConferenceForm() {\n      if (this.$refs['conferenceForm']) {\n        this.$refs['conferenceForm'].clearValidate();\n      }\n\n      this.$store.commit('resetConferenceForm');\n\n      if (this.id !== ID_NEW_CONFERENCE) {\n        this.$store.dispatch('getConference', this.id);\n      }\n    }\n  },\n  components: {}\n};",{"version":3,"sources":["ConferenceBrief.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <el-card class=\"details-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span> Conference Details </span>\n      </div>\n      <el-row>\n        <el-col :span=\"18\">\n          <el-form class=\"formStyle\" label-position=\"left\" ref=\"conferenceForm\" label-width=\"150px\" :rules=\"rules\"\n                   :model=\"conferenceForm\" v-loading=\"isLoading\" >\n            <el-alert v-if=\"isError\" :title=\"apiErrorMsg\" type=\"error\" show-icon class=\"errorMsg\"/>\n\n            <el-form-item label=\"Name: \" :prop=\" isInEditMode ? 'name' : ''\" >\n              <div v-if=\"!isInEditMode\">{{ conferenceForm.name }}</div>\n              <el-input v-model=\"conferenceFormName\" v-if=\"isInEditMode\"/>\n            </el-form-item>\n            <el-form-item label=\"Description: \">\n              <div v-if=\"!isInEditMode\" id=\"conference-description\">{{ conferenceForm.description }}</div>\n              <el-input type=\"textarea\" autosize v-model=\"conferenceFormDescription\" v-if=\"isInEditMode\"/>\n            </el-form-item>\n            <el-form-item label=\"Date: \">\n              <el-col>\n                <div v-if=\"!isInEditMode\" id=\"conference-date\">{{ conferenceForm.date.slice(0, 10) + \"  \" + conferenceForm.date.slice(11, 19) }}</div>\n                <el-input v-model=\"conferenceFormDate\" v-if=\"isInEditMode\"/>\n              </el-col>\n            </el-form-item>\n          </el-form>\n        </el-col>\n      </el-row>\n      <el-divider></el-divider>\n      <div class=\"options-section\">\n        <el-button-group>\n          <el-button type=\"danger\" v-if=\"!isNewConference && isLogin\"\n                    @click=\"deleteConference()\">\n            <i class=\"el-icon-delete\"> Delete </i>\n          </el-button>\n        </el-button-group>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\n  import {ID_NEW_CONFERENCE} from \"@/common/const\";\n\n  export default {\n    name: 'ConferenceBrief',\n    props: {\n      id: String\n    },\n    mounted() {\n      this.updateConferenceForm();\n    },\n    watch: {\n      'id'() {\n        this.updateConferenceForm()\n      },\n    },\n    computed: {\n      isLogin() {\n        return this.$store.state.userInfo.isLogin\n      },\n      conferenceForm() {\n\n        var tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds\n        var date = (new Date(new Date(this.conferenceFormDate) - tzoffset)).toISOString().slice(0, -1);\n        return {\n          name: this.conferenceFormName,\n          creatorIdentifier: this.conferenceFormCreatorIdentifier,\n          description: this.conferenceFormDescription,\n          date: date,\n        }\n      },\n      conferenceFormName: {\n        get() {\n          return this.$store.state.conference.conferenceForm.name\n        },\n        set(value) {\n          this.$store.commit('setConferenceFormField', {\n            field: 'name',\n            value\n          })\n        },\n      },\n      conferenceFormCreatorIdentifier() {\n        return this.$store.state.conference.conferenceForm.creatorIdentifier\n      },\n      conferenceFormDescription: {\n        get() {\n          return this.$store.state.conference.conferenceForm.description\n        },\n        set(value) {\n          this.$store.commit('setConferenceFormField', {\n            field: 'description',\n            value\n          })\n        },\n      },\n      conferenceFormDate: {\n        get() {\n          return this.$store.state.conference.conferenceForm.date\n        },\n        set(value) {\n          this.$store.commit('setConferenceFormField', {\n            field: 'date',\n            value\n          })\n        },\n      },\n      isNewConference() {\n        return this.id === ID_NEW_CONFERENCE\n      },\n      isInEditMode() {\n        return this.isEditing || this.isNewConference\n      },\n      isLoading() {\n        return this.$store.state.conference.conferenceFormStatus.isLoading\n      },\n      isError() {\n        return this.$store.state.conference.conferenceFormStatus.isApiError\n      },\n      apiErrorMsg() {\n        return this.$store.state.conference.conferenceFormStatus.apiErrorMsg\n      }\n    },\n    data() {\n      return {\n        isEditing: false,\n        rules: {\n          name: [\n            {required: true, message: 'Please enter conference name', trigger: 'blur'},\n            {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n          ]\n        }\n      }\n    },\n    methods: {\n      changeEditMode(isEditing) {\n        if (isEditing === false) {\n          this.updateConferenceForm();\n        }\n        this.isEditing = isEditing;\n      },\n\n      addConference() {\n        this.$refs['conferenceForm'].validate((valid) => {\n          if (!valid) {\n            return\n          }\n          this.$refs['conferenceForm'].clearValidate();\n          if (this.isNewConference) {\n            // add\n            this.$store.dispatch('saveConference')\n                    .then(() => {\n                      if (this.isError) {\n                        return\n                      }\n                      // redirect to the newly added conference\n                      this.$router.push({\n                        name: 'conference',\n                        params: {\n                          id: this.$store.state.conference.conferenceForm.id\n                        }\n                      });\n                    });\n          } else {\n            // edit\n            this.$store.dispatch('updateConference')\n                    .then(() => {\n                      if (this.isError) {\n                        return\n                      }\n                      this.isEditing = false\n                    })\n          }\n        });\n      },\n      deleteConference() {\n        this.$store.dispatch('deleteConference', this.id)\n                .then(() => {\n                  if (this.isError) {\n                    return\n                  }\n                  this.$router.replace({\n                    name: 'conference',\n                    params: {\n                      id: ID_NEW_CONFERENCE\n                    }\n                  });\n                  this.isEditing = false;\n                })\n      },\n      updateConferenceForm() {\n        if (this.$refs['conferenceForm']) {\n          this.$refs['conferenceForm'].clearValidate();\n        }\n        this.$store.commit('resetConferenceForm');\n        if (this.id !== ID_NEW_CONFERENCE) {\n          this.$store.dispatch('getConference', this.id)\n        }\n      },\n    },\n\n    components: {\n    },\n  }\n</script>\n\n<style scoped>\n  .formStyle {\n    display: inline-block;\n    text-align: left;\n    margin-right: 8px;\n  }ß\n   .errorMsg {\n     margin-bottom: 18px;\n   }\n  .el-form-item__label {\n    font-weight: bold;\n  }\n  .el-card {\n    margin-bottom: 10px;\n  }\n  .details-card {\n    overflow-x: auto;\n  }\n  .download-section {\n    text-align:center;\n    vertical-align:middle;\n  }\n  .options-section {\n    text-align:center;\n    vertical-align:middle;\n    margin-top: 2rem;\n  }\n  .v-divide {\n    float: left;\n    height: 6rem;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}