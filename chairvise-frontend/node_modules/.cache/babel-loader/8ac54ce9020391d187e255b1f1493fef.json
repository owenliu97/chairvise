{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BarChartSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BarChartSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BarChart from '@/components/sectionDetail/chart/BarChart.vue';\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue';\nimport { generateBorderColor, generateBackgroundColor } from '@/common/color';\nexport default {\n  name: \"BarChartSectionDetail\",\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      editFormSelectionsRule: [{\n        validator: function validator(rule, value, callback) {\n          if (value.expression.length === 0 || value.expression.rename === 0) {\n            return callback(new Error('Please specify all field for the selection'));\n          }\n\n          callback();\n        },\n        trigger: 'blur'\n      }],\n      editFormInvolvedRecordsRule: [{\n        validator: function validator(rule, value, callback) {\n          if (value.length < 1) {\n            return callback(new Error('There must be one record involved'));\n          }\n\n          callback();\n        },\n        trigger: 'change'\n      }],\n      editFormFiltersRule: [{\n        validator: function validator(rule, value, callback) {\n          if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n            return callback(new Error('Please specify all fields'));\n          }\n\n          callback();\n        },\n        trigger: 'blur'\n      }],\n      editFormSortersRule: [{\n        validator: function validator(rule, value, callback) {\n          if (value.field.length === 0 || value.order.length === 0) {\n            return callback(new Error('Please specify all fields'));\n          }\n\n          callback();\n        },\n        trigger: 'blur'\n      }],\n      editFormGroupersRule: [],\n      extraFormItemsRules: {\n        xAxisFieldName: [{\n          required: true,\n          message: 'There should be one field to map x axis',\n          trigger: 'blur'\n        }],\n        yAxisFieldName: [{\n          required: true,\n          message: 'There should be one field to map y axis',\n          trigger: 'blur'\n        }]\n      },\n      labels: [],\n      dataset: {},\n      partialResult: [],\n      options: {}\n    };\n  },\n  computed: {\n    hasData: function hasData() {\n      return this.labels.length !== 0;\n    },\n    chartData: function chartData() {\n      return {\n        labels: this.labels,\n        datasets: [this.dataset]\n      };\n    }\n  },\n  methods: {\n    updateVisualisation: function updateVisualisation(_ref) {\n      var _this = this;\n\n      var result = _ref.result,\n          extraData = _ref.extraData;\n      this.partialResult = result.slice(0, extraData.numOfResultToDisplay); // process x axis\n\n      this.labels = this.partialResult.map(function (record) {\n        return record[extraData.xAxisFieldName];\n      }); // process y axis\n\n      this.dataset = {\n        borderWidth: 1,\n        label: extraData.dataSetLabel,\n        data: this.partialResult.map(function (record) {\n          return record[extraData.yAxisFieldName];\n        }),\n        backgroundColor: generateBackgroundColor(this.partialResult.length),\n        borderColor: generateBorderColor(this.partialResult.length)\n      }; // generate color\n\n      if (extraData.isColorfulBar) {\n        this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length);\n        this.dataset.borderColor = generateBorderColor(this.partialResult.length);\n      } else {\n        // choose a color in random\n        this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n        this.dataset.borderColor = generateBorderColor(this.partialResult.length)[this.partialResult.length - 1];\n      } // to display more data\n\n\n      var toolTipFooterCallback = function toolTipFooterCallback(tooltipItems) {\n        var currentIndex = tooltipItems[0].index;\n        return extraData.fieldsShownInToolTips.map(function (f) {\n          return \"\".concat(f.label, \": \").concat(_this.partialResult[currentIndex][f.field]);\n        });\n      }; // process tooltip callback\n\n\n      this.options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            gridLines: {\n              display: true\n            }\n          }],\n          xAxes: [{\n            gridLines: {\n              display: false\n            },\n            ticks: {\n              autoSkip: false\n            }\n          }]\n        },\n        legend: {\n          display: true,\n          position: 'bottom'\n        },\n        layout: {\n          padding: {\n            top: 30\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          callbacks: {\n            footer: toolTipFooterCallback\n          }\n        },\n        plugins: {\n          datalabels: {\n            anchor: 'end',\n            align: 'end'\n          }\n        }\n      };\n    },\n    addTooltip: function addTooltip(tooltips) {\n      tooltips.push({\n        label: '',\n        field: ''\n      });\n    },\n    removeTooltip: function removeTooltip(tooltips, tooltipToRemove) {\n      var index = tooltips.indexOf(tooltipToRemove);\n      tooltips.splice(index, 1);\n    }\n  },\n  components: {\n    BasicSectionDetail: BasicSectionDetail,\n    BarChart: BarChart\n  }\n};",{"version":3,"sources":["BarChartSectionDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\n                        :version=\"version\"\n                        :edit-form-selections-rule=\"editFormSelectionsRule\"\n                        :edit-form-involved-records-rule=\"editFormInvolvedRecordsRule\"\n                        :edit-form-filters-rule=\"editFormFiltersRule\"\n                        :edit-form-groupers-rule=\"editFormGroupersRule\"\n                        :edit-form-sorters-rule=\"editFormSortersRule\"\n                        :extraFormItemsRules=\"extraFormItemsRules\"\n                        @update-visualisation=\"updateVisualisation\">\n    <bar-chart :chart-data=\"chartData\" :options=\"options\"></bar-chart>\n\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\n      <el-form-item label=\"xAxis Field Name\" prop=\"extraData.xAxisFieldName\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"xAxisFieldName\" v-model=\"slotProps.extraData.xAxisFieldName\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"yAxis Field Name\" prop=\"extraData.yAxisFieldName\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"yAxisFieldName\" v-model=\"slotProps.extraData.yAxisFieldName\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Legend Label Name\" prop=\"extraData.dataSetLabel\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-input v-model=\"slotProps.extraData.dataSetLabel\" placeholder=\"Label Name\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Colorful Bar\" prop=\"extraData.isColorfulBar\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-switch\n          v-model=\"slotProps.extraData.isColorfulBar\"\n          active-text=\"Colorful Bar\"\n          inactive-text=\"Single Color Bar\">\n        </el-switch>\n      </el-form-item>\n      <el-form-item label=\"Num of result to display\" prop=\"extraData.numOfResultToDisplay\"\n                    v-if=\"slotProps.isInAdvancedMode\">\n        <el-slider v-model=\"slotProps.extraData.numOfResultToDisplay\" :min=\"5\" :max=\"30\"></el-slider>\n      </el-form-item>\n      <el-form-item v-if=\"slotProps.isInAdvancedMode\"\n                    v-for=\"(tooltip, index) in slotProps.extraData.fieldsShownInToolTips\" :label=\"'Tooltips ' + index\"\n                    :key=\"'tooltips' + index\">\n        <el-select placeholder=\"Field\" v-model=\"tooltip.field\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>&nbsp;\n        <el-input v-model=\"tooltip.label\" placeholder=\"Label Name\" style=\"width: 150px\"></el-input>&nbsp;\n        <el-button type=\"danger\" icon=\"el-icon-delete\" circle\n                   @click=\"removeTooltip(slotProps.extraData.fieldsShownInToolTips, tooltip)\"></el-button>\n      </el-form-item>\n      <el-form-item v-if=\"slotProps.isInAdvancedMode\">\n        <el-button type=\"success\" plain @click=\"addTooltip(slotProps.extraData.fieldsShownInToolTips)\">Add Tooltip\n        </el-button>\n      </el-form-item>\n    </template>\n  </basic-section-detail>\n</template>\n\n<script>\n  import BarChart from '@/components/sectionDetail/chart/BarChart.vue'\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n  import {generateBorderColor, generateBackgroundColor} from '@/common/color'\n\n  export default {\n    name: \"BarChartSectionDetail\",\n\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      }\n    },\n\n    data() {\n      return {\n        editFormSelectionsRule: [{\n          validator: (rule, value, callback) => {\n            if (value.expression.length === 0 || value.expression.rename === 0) {\n              return callback(new Error('Please specify all field for the selection'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormInvolvedRecordsRule: [{\n          validator: (rule, value, callback) => {\n            if (value.length < 1) {\n              return callback(new Error('There must be one record involved'))\n            }\n            callback();\n          },\n          trigger: 'change',\n        }],\n        editFormFiltersRule: [{\n          validator: (rule, value, callback) => {\n            if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n              return callback(new Error('Please specify all fields'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormSortersRule: [{\n          validator: (rule, value, callback) => {\n            if (value.field.length === 0 || value.order.length === 0) {\n              return callback(new Error('Please specify all fields'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormGroupersRule: [],\n\n        extraFormItemsRules: {\n          xAxisFieldName: [{\n            required: true,\n            message: 'There should be one field to map x axis',\n            trigger: 'blur',\n          }],\n          yAxisFieldName: [{\n            required: true,\n            message: 'There should be one field to map y axis',\n            trigger: 'blur',\n          }],\n        },\n\n        labels: [],\n        dataset: {},\n        partialResult: [],\n        options: {},\n      }\n    },\n\n    computed: {\n      hasData() {\n        return this.labels.length !== 0;\n      },\n\n      chartData() {\n        return {\n          labels: this.labels,\n          datasets: [this.dataset]\n        }\n      }\n    },\n\n    methods: {\n      updateVisualisation({result, extraData}) {\n        this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\n        // process x axis\n        this.labels = this.partialResult.map(record => record[extraData.xAxisFieldName]);\n\n        // process y axis\n        this.dataset = {\n          borderWidth: 1,\n          label: extraData.dataSetLabel,\n          data: this.partialResult.map(record => record[extraData.yAxisFieldName]),\n          backgroundColor: generateBackgroundColor(this.partialResult.length),\n          borderColor: generateBorderColor(this.partialResult.length),\n        };\n\n        // generate color\n        if (extraData.isColorfulBar) {\n          this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length);\n          this.dataset.borderColor = generateBorderColor(this.partialResult.length);\n        } else {\n          // choose a color in random\n          this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n          this.dataset.borderColor = generateBorderColor(this.partialResult.length)[this.partialResult.length - 1];\n        }\n\n        // to display more data\n        let toolTipFooterCallback = (tooltipItems) => {\n          let currentIndex = tooltipItems[0].index;\n          return extraData.fieldsShownInToolTips.map(f => `${f.label}: ${this.partialResult[currentIndex][f.field]}`);\n        };\n\n        // process tooltip callback\n        this.options = {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              },\n              gridLines: {\n                display: true\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                autoSkip: false\n              }\n            }]\n          },\n          legend: {\n            display: true,\n            position: 'bottom'\n          },\n          layout: {\n            padding: {\n              top: 30,\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            callbacks: {\n              footer: toolTipFooterCallback\n            }\n          },\n          plugins: {\n            datalabels: {\n              anchor: 'end',\n              align: 'end'\n            }\n          }\n        }\n      },\n\n      addTooltip(tooltips) {\n        tooltips.push({\n          label: '',\n          field: '',\n        })\n      },\n\n      removeTooltip(tooltips, tooltipToRemove) {\n        let index = tooltips.indexOf(tooltipToRemove);\n        tooltips.splice(index, 1)\n      },\n    },\n\n    components: {\n      BasicSectionDetail,\n      BarChart\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components/sectionDetail"}]}