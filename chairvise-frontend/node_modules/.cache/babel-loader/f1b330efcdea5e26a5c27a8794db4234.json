{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewPresentation.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewPresentation.vue","mtime":1591977110000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { AccessLevel, ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC } from \"@/common/const\";\nexport default {\n  name: 'PresentationBrief',\n  props: {\n    id: String\n  },\n  watch: {\n    'id': function id() {\n      this.updatePresentationForm();\n    }\n  },\n  mounted: function mounted() {\n    this.updatePresentationForm();\n    this.$store.dispatch('getVersionList');\n  },\n  computed: {\n    isLogin: function isLogin() {\n      return this.$store.state.userInfo.isLogin;\n    },\n    presentationForm: function presentationForm() {\n      return {\n        name: this.presentationFormName,\n        creatorIdentifier: this.presentationFormCreatorIdentifier,\n        description: this.presentationFormDescription\n      };\n    },\n    presentationFormCreatorIdentifier: function presentationFormCreatorIdentifier() {\n      return this.$store.state.presentation.presentationForm.creatorIdentifier;\n    },\n    presentationFormName: {\n      get: function get() {\n        return this.$store.state.presentation.presentationForm.name;\n      },\n      set: function set(value) {\n        this.$store.commit('setPresentationFormField', {\n          field: 'name',\n          value: value\n        });\n      }\n    },\n    presentationFormDescription: {\n      get: function get() {\n        return this.$store.state.presentation.presentationForm.description;\n      },\n      set: function set(value) {\n        this.$store.commit('setPresentationFormField', {\n          field: 'description',\n          value: value\n        });\n      }\n    },\n    isNewPresentation: function isNewPresentation() {\n      return this.id === ID_NEW_PRESENTATION;\n    },\n    isInEditMode: function isInEditMode() {\n      return this.isEditing || this.isNewPresentation;\n    },\n    saveSuccess: function saveSuccess() {\n      return this.$store.state.presentation.isSaveSuccess;\n    },\n    isLoading: function isLoading() {\n      return this.$store.state.presentation.presentationFormStatus.isLoading;\n    },\n    isError: function isError() {\n      return this.$store.state.presentation.presentationFormStatus.isApiError;\n    },\n    apiErrorMsg: function apiErrorMsg() {\n      return this.$store.state.presentation.presentationFormStatus.apiErrorMsg;\n    }\n  },\n  data: function data() {\n    return {\n      hasSubmitted: false,\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please enter presentation name',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          message: 'The length should be more than 3 character',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    addPresentation: function addPresentation() {\n      var _this = this;\n\n      this.hasSubmitted = false;\n      this.$store.dispatch('savePresentation').then(function () {\n        if (_this.isNewPresentation && !_this.isLogin) {\n          return;\n        }\n      });\n    },\n    updatePresentationForm: function updatePresentationForm() {\n      var _this2 = this;\n\n      if (this.$refs['presentationForm']) {\n        this.$refs['presentationForm'].clearValidate();\n      }\n\n      this.$store.commit('resetPresentationForm');\n\n      if (this.id !== ID_NEW_PRESENTATION) {\n        this.$store.dispatch('getPresentation', this.id).then(function () {\n          // check writable or not\n          _this2.$store.dispatch('fetchAccessControlList', _this2.id).then(function () {\n            var currentUser = _this2.$store.state.userInfo.userEmail;\n            var accessControlList = _this2.$store.state.accessControl.accessControlList;\n            var isPresentationEditable = currentUser === _this2.presentationFormCreatorIdentifier || accessControlList.some(function (acl) {\n              return acl.userIdentifier === currentUser && acl.accessLevel === AccessLevel.CAN_WRITE;\n            }) || accessControlList.some(function (acl) {\n              return acl.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC && acl.accessLevel === AccessLevel.CAN_WRITE;\n            });\n\n            _this2.$store.commit('setIsPresentationEditable', isPresentationEditable);\n          });\n        });\n      } else {\n        this.$store.dispatch(\"getVersionList\");\n      }\n    },\n    uploadClicked: function uploadClicked() {\n      var _this3 = this;\n\n      this.$refs['presentationForm'].validate(function (valid, object) {\n        if (!valid) {\n          if ('name' in object) {\n            _this3.$notify.error({\n              title: 'Error',\n              message: object.name[0].message\n            });\n          }\n\n          return;\n        }\n\n        _this3.$refs['presentationForm'].clearValidate();\n\n        _this3.hasSubmitted = true;\n      });\n    },\n    closeSuccess: function closeSuccess() {\n      this.$store.commit(\"setSaveSuccess\", false);\n      this.$router.push({\n        name: 'analyze'\n      });\n    }\n  },\n  components: {}\n};",{"version":3,"sources":["NewPresentation.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-main>\n        <el-card>\n            <div slot=\"header\" class=\"clearfix\">\n                <span> Create New Presentation </span>\n            </div>\n            <el-alert v-if=\"isNewPresentation && !isLogin\" title=\"Please login to create new presentation\" type=\"error\" show-icon\n                    class=\"errorMsg\"/>\n            <el-form v-else :rules=\"rules\" ref=\"presentationForm\"\n                    :model=\"presentationForm\" v-loading=\"isLoading\">\n\n                <el-form-item label=\"Name\" :prop=\"'name'\" >\n                    <el-col>\n                        <el-input v-model=\"presentationFormName\" placeholder=\"Enter name\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item label=\"Description\">\n                    <el-col>\n                        <el-input type=\"textarea\" v-model=\"presentationFormDescription\" placeholder=\"Enter description\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"uploadClicked()\">Save</el-button>\n                </el-form-item>\n            </el-form>\n        </el-card>\n\n        <!-- dialogs -->\n        <el-dialog\n        title=\"Confirm\"\n        :visible.sync=\"hasSubmitted\"\n        width=\"30%\" center>\n            <span> Are you sure that the presentation details are correct?</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button v-on:click=\"hasSubmitted = false\">Cancel</el-button>\n                <el-button type=\"primary\" v-on:click=\"addPresentation\">Confirm</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog\n        title=\"Success\"\n        :visible.sync=\"saveSuccess\"\n        width=\"30%\" center>\n            <span>You have successfully added a new presentation</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"primary\" v-on:click=\"closeSuccess\">Sure</el-button>\n            </span>\n        </el-dialog>\n        <!-- end of dialogs -->\n    </el-main>\n</template>\n\n<script>\n    import {AccessLevel, ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\n\n    export default {\n        name: 'PresentationBrief',\n        props: {\n            id: String\n        },\n        watch: {\n            'id'() {\n                this.updatePresentationForm()\n            },\n        },\n        mounted() {\n            this.updatePresentationForm();\n            this.$store.dispatch('getVersionList')\n        },\n        computed: {\n            isLogin() {\n                return this.$store.state.userInfo.isLogin\n            },\n            presentationForm() {\n                return {\n                    name: this.presentationFormName,\n                    creatorIdentifier: this.presentationFormCreatorIdentifier,\n                    description: this.presentationFormDescription,\n                }\n            },\n            presentationFormCreatorIdentifier() {\n                return this.$store.state.presentation.presentationForm.creatorIdentifier\n            },\n            presentationFormName: {\n                get() {\n                    return this.$store.state.presentation.presentationForm.name\n                },\n                set(value) {\n                    this.$store.commit('setPresentationFormField', {\n                        field: 'name',\n                        value\n                    })\n                },\n            },\n            presentationFormDescription: {\n                get() {\n                    return this.$store.state.presentation.presentationForm.description\n                },\n                set(value) {\n                    this.$store.commit('setPresentationFormField', {\n                        field: 'description',\n                        value\n                    })\n                },\n            },\n\n            isNewPresentation() {\n                return this.id === ID_NEW_PRESENTATION\n            },\n            isInEditMode() {\n                return this.isEditing || this.isNewPresentation\n            },\n            saveSuccess() {\n                return this.$store.state.presentation.isSaveSuccess\n            },\n            isLoading() {\n                return this.$store.state.presentation.presentationFormStatus.isLoading\n            },\n            isError() {\n                return this.$store.state.presentation.presentationFormStatus.isApiError\n            },\n            apiErrorMsg() {\n                return this.$store.state.presentation.presentationFormStatus.apiErrorMsg\n            }\n        },\n        data() {\n            return {\n                hasSubmitted: false,\n                rules: {\n                    name: [\n                        {required: true, message: 'Please enter presentation name', trigger: 'blur'},\n                        {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n                    ],\n                }\n            }\n        },\n        methods: {\n            addPresentation() {\n                this.hasSubmitted = false;\n                this.$store.dispatch('savePresentation').then(() => {\n                    if (this.isNewPresentation && !this.isLogin) {\n                        return\n                    }\n                });\n            },\n            updatePresentationForm() {\n                if (this.$refs['presentationForm']) {\n                    this.$refs['presentationForm'].clearValidate();\n                }\n                this.$store.commit('resetPresentationForm');\n                if (this.id !== ID_NEW_PRESENTATION) {\n                    this.$store.dispatch('getPresentation', this.id)\n                        .then(() => {\n                            // check writable or not\n                            this.$store.dispatch('fetchAccessControlList', this.id)\n                                .then(() => {\n                                    let currentUser = this.$store.state.userInfo.userEmail;\n                                    let accessControlList = this.$store.state.accessControl.accessControlList;\n                                    let isPresentationEditable =\n                                        currentUser === this.presentationFormCreatorIdentifier\n                                        || accessControlList.some(acl => acl.userIdentifier === currentUser && acl.accessLevel === AccessLevel.CAN_WRITE)\n                                        || accessControlList.some(acl => acl.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC && acl.accessLevel === AccessLevel.CAN_WRITE);\n                                    this.$store.commit('setIsPresentationEditable', isPresentationEditable)\n                                })\n                        })\n                } else {\n                    this.$store.dispatch(\"getVersionList\")\n                }\n            },\n            uploadClicked() {\n                this.$refs['presentationForm'].validate((valid, object) => {\n                    if (!valid) {\n                        if('name' in object) {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: object.name[0].message\n                            });\n                        }\n                        return\n                    }\n                    this.$refs['presentationForm'].clearValidate();\n                    this.hasSubmitted = true;\n                });\n            },\n            closeSuccess() {\n                this.$store.commit(\"setSaveSuccess\", false);\n                this.$router.push({\n                    name: 'analyze'\n                });\n            }\n        },\n        components: {\n        },\n    }\n</script>\n\n<style scoped>\n    .errorMsg {\n        margin-bottom: 18px;\n    }\n</style>\n"],"sourceRoot":"src/views"}]}