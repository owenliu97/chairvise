{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewConference.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewConference.vue","mtime":1591977142000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Datepicker from 'vuejs-datepicker';\nimport { ID_NEW_CONFERENCE } from \"../common/const\";\nexport default {\n  name: \"AddConference\",\n  props: {\n    id: String\n  },\n  watch: {\n    'id': function id() {\n      this.updateConferenceForm();\n    }\n  },\n  mounted: function mounted() {\n    this.updateConferenceForm();\n  },\n  computed: {\n    isLogin: function isLogin() {\n      return this.$store.state.userInfo.isLogin;\n    },\n    conferenceForm: function conferenceForm() {\n      return {\n        name: this.conferenceFormName,\n        description: this.conferenceFormDescription,\n        date: this.conferenceFormDate\n      };\n    },\n    conferenceFormName: {\n      get: function get() {\n        return this.$store.state.conference.conferenceForm.name;\n      },\n      set: function set(value) {\n        this.$store.commit('setConferenceFormField', {\n          field: 'name',\n          value: value\n        });\n      }\n    },\n    conferenceFormDescription: {\n      get: function get() {\n        return this.$store.state.conference.conferenceForm.description;\n      },\n      set: function set(value) {\n        this.$store.commit('setConferenceFormField', {\n          field: 'description',\n          value: value\n        });\n      }\n    },\n    conferenceFormDate: {\n      get: function get() {\n        return this.$store.state.conference.conferenceForm.date;\n      },\n      set: function set(value) {\n        this.$store.commit('setConferenceFormField', {\n          field: 'date',\n          value: value\n        });\n      }\n    },\n    isNewConference: function isNewConference() {\n      return this.id === ID_NEW_CONFERENCE;\n    },\n    isInEditMode: function isInEditMode() {\n      return this.isEditing || this.isNewPresentation;\n    },\n    saveSuccess: function saveSuccess() {\n      return this.$store.state.conference.isSaveSuccess;\n    },\n    isLoading: function isLoading() {\n      return this.$store.state.conference.conferenceFormStatus.isLoading;\n    },\n    isError: function isError() {\n      return this.$store.state.conference.conferenceFormStatus.isApiError;\n    },\n    apiErrorMsg: function apiErrorMsg() {\n      return this.$store.state.conference.conferenceFormStatus.apiErrorMsg;\n    }\n  },\n  methods: {\n    addConference: function addConference() {\n      var _this = this;\n\n      this.hasSubmitted = false;\n      this.$store.dispatch('saveConference').then(function () {\n        if (_this.isNewConference && !_this.isLogin) {\n          return;\n        }\n      });\n    },\n    updateConferenceForm: function updateConferenceForm() {\n      if (this.$refs['conferenceForm']) {\n        this.$refs['conferenceForm'].clearValidate();\n      }\n\n      this.$store.commit('resetConferenceForm');\n    },\n    uploadClicked: function uploadClicked() {\n      var _this2 = this;\n\n      this.$refs['conferenceForm'].validate(function (valid, object) {\n        if (!valid) {\n          if ('name' in object) {\n            _this2.$notify.error({\n              title: 'Error',\n              message: object.name[0].message\n            });\n          }\n\n          if ('date' in object) {\n            _this2.$notify.error({\n              title: 'Error',\n              message: object.date[0].message,\n              offset: 100\n            });\n          }\n\n          return;\n        }\n\n        _this2.$refs['conferenceForm'].clearValidate();\n\n        _this2.hasSubmitted = true;\n      });\n    },\n    closeSuccess: function closeSuccess() {\n      this.$store.commit(\"setSaveSuccess\", false);\n      this.$router.push({\n        name: 'conference'\n      });\n    }\n  },\n  components: {\n    Datepicker: Datepicker\n  },\n  data: function data() {\n    return {\n      hasSubmitted: false,\n      rules: {\n        name: [{\n          required: true,\n          message: 'Please enter conference name',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          message: 'The length should be more than 3 character',\n          trigger: 'blur'\n        }],\n        date: [{\n          required: true,\n          message: 'Please select a conference date and time.',\n          trigger: 'blur'\n        }]\n      }\n    };\n  }\n};",{"version":3,"sources":["NewConference.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-main>\n        <el-card>\n            <div slot=\"header\" class=\"clearfix\">\n                <span> Add New Conference  </span>\n            </div>\n            <el-alert v-if=\"isNewConference && !isLogin\" title=\"Please login to create new conference\" type=\"error\" show-icon\n                      class=\"errorMsg\"/>\n            <el-form v-else :rules=\"rules\" ref=\"conferenceForm\"\n                     :model=\"conferenceForm\" v-loading=\"isLoading\">\n                <el-form-item label=\"Name\" :prop=\"'name'\" >\n                    <el-col>\n                        <el-input v-model=\"conferenceFormName\" placeholder=\"Enter name\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item label=\"Description\">\n                    <el-col>\n                        <el-input v-model=\"conferenceFormDescription\" placeholder=\"Enter description\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item label=\"Conference Date\" :prop=\"'date'\">\n                    <el-col>\n                        <el-date-picker\n                                v-model=\"conferenceFormDate\"\n                                type=\"datetime\"\n                                placeholder=\"Select date and time\">\n                        </el-date-picker>\n                    </el-col>\n                </el-form-item>\n\n                <el-form-item>\n                    <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"uploadClicked()\">Save</el-button>\n                </el-form-item>\n            </el-form>\n        </el-card>\n\n\n        <!-- dialogs -->\n        <el-dialog\n        title=\"Confirm\"\n        :visible.sync=\"hasSubmitted\"\n        width=\"30%\" center>\n            <span> Are you sure that the conference details are correct?</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button v-on:click=\"hasSubmitted = false\">Cancel</el-button>\n                <el-button type=\"primary\" v-on:click=\"addConference\">Confirm</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog\n        title=\"Success\"\n        :visible.sync=\"saveSuccess\"\n        width=\"30%\" center>\n            <span>You have successfully added a new conference</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"primary\" v-on:click=\"closeSuccess\">Sure</el-button>\n            </span>\n        </el-dialog>\n        <!-- end of dialogs -->\n    </el-main>\n</template>\n\n<script>\n    import Datepicker from 'vuejs-datepicker';\n    import {ID_NEW_CONFERENCE} from \"../common/const\";\n    export default {\n        name: \"AddConference\",\n        props: {\n            id: String\n        },\n        watch: {\n            'id'() {\n                this.updateConferenceForm()\n            },\n        },\n        mounted() {\n            this.updateConferenceForm();\n        },\n        computed: {\n            isLogin() {\n                return this.$store.state.userInfo.isLogin\n            },\n            conferenceForm() {\n                return {\n                    name: this.conferenceFormName,\n                    description: this.conferenceFormDescription,\n                    date: this.conferenceFormDate,\n                }\n            },\n            conferenceFormName: {\n                get() {\n                    return this.$store.state.conference.conferenceForm.name\n                },\n                set(value) {\n                    this.$store.commit('setConferenceFormField', {\n                        field: 'name',\n                        value\n                    })\n                },\n            },\n            conferenceFormDescription: {\n                get() {\n                    return this.$store.state.conference.conferenceForm.description\n                },\n                set(value) {\n                    this.$store.commit('setConferenceFormField', {\n                        field: 'description',\n                        value\n                    })\n                },\n            },\n            conferenceFormDate: {\n                get() {\n                    return this.$store.state.conference.conferenceForm.date\n                },\n                set(value) {\n                    this.$store.commit('setConferenceFormField', {\n                        field: 'date',\n                        value\n                    })\n                },\n            },\n            isNewConference() {\n                return this.id === ID_NEW_CONFERENCE\n            },\n            isInEditMode() {\n                return this.isEditing || this.isNewPresentation\n            },\n            saveSuccess() {\n                return this.$store.state.conference.isSaveSuccess\n            },\n            isLoading() {\n                return this.$store.state.conference.conferenceFormStatus.isLoading\n            },\n            isError() {\n                return this.$store.state.conference.conferenceFormStatus.isApiError\n            },\n            apiErrorMsg() {\n                return this.$store.state.conference.conferenceFormStatus.apiErrorMsg\n            }\n        },\n        methods: {\n            addConference() {\n                this.hasSubmitted = false;\n                this.$store.dispatch('saveConference').then(() => {\n                        if (this.isNewConference && !this.isLogin) {\n                            return\n                        }\n                    });\n            },\n            updateConferenceForm() {\n                if (this.$refs['conferenceForm']) {\n                    this.$refs['conferenceForm'].clearValidate();\n                }\n                this.$store.commit('resetConferenceForm');\n            },\n            uploadClicked() {\n                this.$refs['conferenceForm'].validate((valid, object) => {\n                    if (!valid) {\n                        if('name' in object) {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: object.name[0].message\n                            });\n                        }\n                        if ('date' in object) {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: object.date[0].message,\n                                offset: 100\n                            });\n                        }\n                        return\n                    }\n                    this.$refs['conferenceForm'].clearValidate();\n                    this.hasSubmitted = true;\n                });\n            },\n            closeSuccess() {\n                this.$store.commit(\"setSaveSuccess\", false);\n                this.$router.push({\n                    name: 'conference'\n                });\n            }\n        },\n        components: {\n            Datepicker,\n        },\n        data() {\n            return {\n                hasSubmitted: false,\n                rules: {\n                    name: [\n                        {required: true, message: 'Please enter conference name', trigger: 'blur'},\n                        {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n                    ],\n                    date: [\n                        {required: true, message: 'Please select a conference date and time.', trigger: 'blur'},\n                    ]\n                }\n            }\n        },\n    }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views"}]}