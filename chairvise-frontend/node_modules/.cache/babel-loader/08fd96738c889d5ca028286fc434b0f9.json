{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\MappingTool.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\MappingTool.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { deepCopy, filterPredefinedMap } from \"@/common/utility\";\nexport default {\n  name: \"MappingTool\",\n  data: function data() {\n    return {\n      // currently selected database tag and imported tag\n      selectedDBTag: -1,\n      selectedImportTag: -1,\n      // ordered list of tags that have been\n      // mapped with their data type details\n      mappedDBTag: filterPredefinedMap(deepCopy(this.$store.state.dataMapping.data.predefinedMapping.dbTagIndices), this.$store.state.dataMapping.data.dbSchema.fieldMetaDataList),\n      mappedImportTag: filterPredefinedMap(deepCopy(this.$store.state.dataMapping.data.predefinedMapping.importedTagIndices), this.$store.state.dataMapping.data.uploadedLabel),\n      hasSubmitted: false,\n      tableType: \"\"\n    };\n  },\n  computed: {\n    dbList: function dbList() {\n      return this.$store.state.dataMapping.data.dbSchema;\n    },\n    // a list of size k * 2, k is the number of mapped pairs\n    // the mapped pairs are indexes.\n    mappedPairs: function mappedPairs() {\n      var temp = this.mappedImportTag;\n      return this.mappedDBTag.map(function (e, i) {\n        return [e, temp[i]];\n      });\n    },\n    // generates imported tags.\n    // if initially no tag, just display column number\n    importList: function importList() {\n      if (this.$store.state.dataMapping.data.hasHeader) {\n        return this.$store.state.dataMapping.data.uploadedLabel;\n      }\n\n      var lst = [];\n\n      for (var i = 0; i < this.$store.state.dataMapping.data.uploadedLabel.length; i++) {\n        lst.push(\"Column \" + (i + 1));\n      }\n\n      return lst;\n    },\n    // gets errors\n    errors: function errors() {\n      return this.$store.state.dataMapping.error;\n    },\n    // whether upload is successful\n    uploadSuccess: function uploadSuccess() {\n      return this.$store.state.dataMapping.isUploadSuccess;\n    }\n  },\n  // display errors\n  watch: {\n    errors: function errors(newValue) {\n      if (newValue.length > 0) {\n        this.$notify.error({\n          title: 'Error',\n          message: newValue.join(\"\\n\")\n        });\n      }\n    }\n  },\n  methods: {\n    dbTagClicked: function dbTagClicked(idx) {\n      if (idx === this.selectedDBTag) {\n        this.selectedDBTag = -1;\n        return;\n      }\n\n      this.selectedDBTag = idx;\n\n      if (this.selectedImportTag !== -1 && this.selectedDBTag !== -1) {\n        this.mappedDBTag.push(this.selectedDBTag);\n        this.mappedImportTag.push(this.selectedImportTag);\n        this.selectedDBTag = -1;\n        this.selectedImportTag = -1;\n      }\n    },\n    importTagClicked: function importTagClicked(idx) {\n      if (idx === this.selectedImportTag) {\n        this.selectedImportTag = -1;\n        return;\n      }\n\n      this.selectedImportTag = idx;\n\n      if (this.selectedImportTag !== -1 && this.selectedDBTag !== -1) {\n        this.mappedDBTag.push(this.selectedDBTag);\n        this.mappedImportTag.push(this.selectedImportTag);\n        this.selectedDBTag = -1;\n        this.selectedImportTag = -1;\n      }\n    },\n    removeMapClicked: function removeMapClicked(idx) {\n      this.mappedDBTag.splice(idx, 1);\n      this.mappedImportTag.splice(idx, 1);\n    },\n    backClicked: function backClicked() {\n      this.$store.commit(\"clearDBSchema\");\n      this.$store.commit(\"clearUploadedFile\");\n      this.$store.commit(\"clearFormatType\");\n      this.$store.commit(\"clearTableType\");\n      this.$store.commit(\"clearHasHeader\");\n      this.$store.commit(\"clearMapping\");\n      this.$store.commit(\"clearPredefinedMapping\");\n      this.$store.commit(\"clearVersionId\");\n      this.$store.commit(\"clearPredefinedSwitch\");\n      this.$store.commit(\"clearIsNewVersion\");\n    },\n    uploadClicked: function uploadClicked() {\n      var map = deepCopy(this.mappedPairs);\n      this.$store.commit(\"setMapping\", {\n        \"map\": map\n      });\n\n      if (this.errors.length === 0) {\n        this.hasSubmitted = true;\n      }\n    },\n    submitMapping: function submitMapping() {\n      this.hasSubmitted = false;\n\n      if (this.$store.state.dataMapping.data.isNewVersion) {\n        this.$store.dispatch(\"persistMappingNewVersion\");\n      } else {\n        this.$store.dispatch(\"persistMappingOldVersion\");\n      }\n    },\n    closeSuccess: function closeSuccess() {\n      this.$store.commit(\"setUploadSuccess\", false);\n      this.$store.commit(\"clearDBSchema\");\n      this.$store.commit(\"clearUploadedFile\");\n      this.$store.commit(\"clearFormatType\");\n      this.$store.commit(\"clearTableType\");\n      this.$store.commit(\"clearHasHeader\");\n      this.$store.commit(\"clearMapping\");\n      this.$store.commit(\"clearError\");\n      this.$store.commit(\"clearPredefinedMapping\");\n      this.$store.commit(\"clearVersionId\");\n      this.$store.commit(\"clearPredefinedSwitch\");\n      this.$store.commit(\"clearIsNewVersion\");\n      this.$store.dispatch('getVersionList');\n    }\n  },\n  mounted: function mounted() {},\n  updated: function updated() {}\n};",{"version":3,"sources":["MappingTool.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-row :gutter=\"20\" class=\"map-container\">\n\n    <!-- right part of the page -->\n    <el-col :span=\"12\" class=\"map-result\">\n      <el-card>\n          <h3>Mapping</h3>\n          <transition-group name=\"map-group\" tag=\"div\">\n            <div class=\"pair-tag\" v-for=\"(item, index) in mappedPairs\" v-bind:key=\"index\">\n              <el-tag size=\"medium\">{{ dbList.fieldMetaDataList[item[0]].type }}</el-tag>\n              <p class=\"pair-info\">\n                {{ dbList.fieldMetaDataList[item[0]].name }}\n                <i class=\"el-icon-caret-right\"></i>\n                {{ importList[item[1]] }}\n              </p><i class=\"el-icon-close\" v-on:click=\"removeMapClicked(index)\"></i><br>\n            </div>\n          </transition-group>\n          <transition name=\"fade\" mode=\"out-in\">\n            <div class=\"no-map-info\" v-show=\"mappedPairs.length === 0\">\n              <p>No mapping specified!</p>\n            </div>\n          </transition>\n        </el-card>\n      </el-col>\n      <!-- end of right part of the page -->\n\n      <!-- left part of the page -->\n      <el-col :span=\"10\" :offset=\"1\" class=\"map-area\">\n        <el-card>\n        <!-- db fields -->\n        <div class=\"db-tags\">\n          <h3>Database fields</h3>\n          <transition-group name=\"tags-group\" tag=\"div\">\n            <div class=\"tag\" v-for=\"(item, idx) in dbList.fieldMetaDataList\"\n                v-bind:key=\"idx\"\n                v-bind:class=\"[ idx === selectedDBTag ? 'active' : '', mappedDBTag.includes(idx) ? 'hidden' : '' ]\"\n                v-on:click=\"dbTagClicked(idx)\">\n              {{ item.name }}\n            </div>\n          </transition-group>\n        </div>\n        <!-- end of db fields -->\n\n        <!-- imported tags -->\n        <div class=\"import-tags\">\n          <h3>Imported data fields</h3>\n          <transition-group name=\"tags-group\" tag=\"div\">\n            <div class=\"tag\" v-for=\"(item, idx) in importList\"\n                v-bind:key=\"idx\"\n                v-bind:class=\"[ idx === selectedImportTag ? 'active' : '', mappedImportTag.includes(idx) ? 'hidden' : '' ]\"\n                v-on:click=\"importTagClicked(idx)\">\n              {{ item }}\n            </div>\n          </transition-group>\n        </div>\n        <!-- end of imported tags -->\n\n        <!-- button group -->\n        <el-row class=\"button-row\">\n          <el-col>\n            <el-button class=\"back-button\" icon=\"el-icon-upload\" type=\"success\" v-on:click=\"uploadClicked\">Upload</el-button>\n            <el-button class=\"back-button\" icon=\"el-icon-back\" type=\"info\" v-on:click=\"backClicked\">Back</el-button>\n          </el-col>\n        </el-row>\n      <!-- end of button group -->\n      </el-card>\n    </el-col>\n    <!-- end of left part of the page -->\n\n    <!-- dialogs -->\n    <el-dialog\n      title=\"Confirm\"\n      :visible.sync=\"hasSubmitted\"\n      width=\"30%\" center>\n      <span>After submission, your will not be able to modify your mapping. Are you sure that the columns are correctly mapped?</span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button v-on:click=\"hasSubmitted = false\">Cancel</el-button>\n        <el-button type=\"primary\" v-on:click=\"submitMapping\">Confirm</el-button>\n      </span>\n    </el-dialog>\n    <el-dialog\n      title=\"Success\"\n      :visible.sync=\"uploadSuccess\"\n      width=\"30%\" center>\n      <span>You have successfully imported data using the column mapping!</span>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" v-on:click=\"closeSuccess\">Sure</el-button>\n      </span>\n    </el-dialog>\n    <!-- end of dialogs -->\n  </el-row>\n</template>\n\n<script>\n  import {deepCopy, filterPredefinedMap} from \"@/common/utility\"\n\n  export default {\n    name: \"MappingTool\",\n    data() {\n      return {\n        // currently selected database tag and imported tag\n        selectedDBTag: -1,\n        selectedImportTag: -1,\n\n        // ordered list of tags that have been\n        // mapped with their data type details\n        mappedDBTag: filterPredefinedMap(deepCopy(this.$store.state.dataMapping.data.predefinedMapping.dbTagIndices),\n          this.$store.state.dataMapping.data.dbSchema.fieldMetaDataList),\n        mappedImportTag: filterPredefinedMap(deepCopy(this.$store.state.dataMapping.data.predefinedMapping.importedTagIndices),\n          this.$store.state.dataMapping.data.uploadedLabel),\n\n        hasSubmitted: false,\n        tableType: \"\"\n      };\n    },\n    computed: {\n      dbList: function () {\n        return this.$store.state.dataMapping.data.dbSchema\n      },\n      // a list of size k * 2, k is the number of mapped pairs\n      // the mapped pairs are indexes.\n      mappedPairs: function () {\n        let temp = this.mappedImportTag;\n        return this.mappedDBTag.map(function (e, i) {\n          return [e, temp[i]];\n        });\n      },\n\n      // generates imported tags.\n      // if initially no tag, just display column number\n      importList: function () {\n        if (this.$store.state.dataMapping.data.hasHeader) {\n          return this.$store.state.dataMapping.data.uploadedLabel;\n        }\n        let lst = [];\n        for (let i = 0; i < this.$store.state.dataMapping.data.uploadedLabel.length; i++) {\n          lst.push(\"Column \" + (i + 1));\n        }\n        return lst;\n      },\n\n      // gets errors\n      errors: function () {\n        return this.$store.state.dataMapping.error;\n      },\n\n      // whether upload is successful\n      uploadSuccess: function () {\n        return this.$store.state.dataMapping.isUploadSuccess;\n      }\n    },\n\n    // display errors\n    watch: {\n      errors(newValue) {\n        if (newValue.length > 0) {\n          this.$notify.error({\n            title: 'Error',\n            message: newValue.join(\"\\n\")\n          });\n        }\n      }\n    },\n    methods: {\n      dbTagClicked: function (idx) {\n        if (idx === this.selectedDBTag) {\n          this.selectedDBTag = -1;\n          return;\n        }\n        this.selectedDBTag = idx;\n        if (this.selectedImportTag !== -1 && this.selectedDBTag !== -1) {\n          this.mappedDBTag.push(this.selectedDBTag);\n          this.mappedImportTag.push(this.selectedImportTag);\n          this.selectedDBTag = -1;\n          this.selectedImportTag = -1;\n        }\n      },\n      importTagClicked: function (idx) {\n        if (idx === this.selectedImportTag) {\n          this.selectedImportTag = -1;\n          return;\n        }\n        this.selectedImportTag = idx;\n        if (this.selectedImportTag !== -1 && this.selectedDBTag !== -1) {\n          this.mappedDBTag.push(this.selectedDBTag);\n          this.mappedImportTag.push(this.selectedImportTag);\n          this.selectedDBTag = -1;\n          this.selectedImportTag = -1;\n        }\n      },\n      removeMapClicked: function (idx) {\n        this.mappedDBTag.splice(idx, 1);\n        this.mappedImportTag.splice(idx, 1);\n      },\n      backClicked: function () {\n        this.$store.commit(\"clearDBSchema\");\n        this.$store.commit(\"clearUploadedFile\");\n        this.$store.commit(\"clearFormatType\");\n        this.$store.commit(\"clearTableType\");\n        this.$store.commit(\"clearHasHeader\");\n        this.$store.commit(\"clearMapping\");\n        this.$store.commit(\"clearPredefinedMapping\");\n        this.$store.commit(\"clearVersionId\");\n        this.$store.commit(\"clearPredefinedSwitch\");\n        this.$store.commit(\"clearIsNewVersion\");\n      },\n      uploadClicked: function () {\n        let map = deepCopy(this.mappedPairs);\n        this.$store.commit(\"setMapping\", {\"map\": map});\n        if (this.errors.length === 0) {\n          this.hasSubmitted = true;\n        }\n      },\n      submitMapping: function () {\n        this.hasSubmitted = false;\n        if (this.$store.state.dataMapping.data.isNewVersion) {\n          this.$store.dispatch(\"persistMappingNewVersion\");\n        } else {\n          this.$store.dispatch(\"persistMappingOldVersion\");\n        }\n      },\n      closeSuccess: function () {\n        this.$store.commit(\"setUploadSuccess\", false);\n        this.$store.commit(\"clearDBSchema\");\n        this.$store.commit(\"clearUploadedFile\");\n        this.$store.commit(\"clearFormatType\");\n        this.$store.commit(\"clearTableType\");\n        this.$store.commit(\"clearHasHeader\");\n        this.$store.commit(\"clearMapping\");\n        this.$store.commit(\"clearError\");\n        this.$store.commit(\"clearPredefinedMapping\");\n        this.$store.commit(\"clearVersionId\");\n        this.$store.commit(\"clearPredefinedSwitch\");\n        this.$store.commit(\"clearIsNewVersion\");\n        this.$store.dispatch('getVersionList');\n      }\n    },\n    mounted() {\n    },\n    updated() {\n    }\n  };\n</script>\n\n<style scoped>\n  @keyframes pulse {\n    from {\n      -webkit-transform: scale3d(1, 1, 1);\n      transform: scale3d(1, 1, 1);\n    }\n\n    50% {\n      -webkit-transform: scale3d(1.1, 1.1, 1.1);\n      transform: scale3d(1.1, 1.1, 1.1);\n    }\n\n    to {\n      -webkit-transform: scale3d(1, 1, 1);\n      transform: scale3d(1, 1, 1);\n    }\n  }\n\n  .map-container h3 {\n    letter-spacing: 1px;\n  }\n\n  .tags-group-move {\n    transition: all 300ms ease-in-out 50ms;\n  }\n\n  .map-group-move {\n    transition: all 600ms ease-in-out 50ms;\n  }\n\n  /* appearing */\n  .map-group-enter-active {\n    transition: all 300ms ease-out;\n  }\n\n  /* disappearing */\n  .map-group-leave-active {\n    transition: all 200ms ease-in;\n  }\n\n  /* appear at / disappear to */\n  .map-group-enter {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n\n  .map-group-leave-to {\n    opacity: 0;\n  }\n\n  .fade-enter-active,\n  .fade-leave-active {\n    transition: opacity 0.3s ease;\n  }\n\n  .fade-enter, .fade-leave-to\n    /* .component-fade-leave-active below version 2.1.8 */\n  {\n    opacity: 0;\n  }\n\n  .map-container {\n    display: flex;\n    flex-direction: row;\n  }\n\n  .db-tags {\n    min-height: 90px;\n  }\n\n  .import-tags {\n    min-height: 90px;\n  }\n\n  .tag {\n    display: inline-block;\n    height: 20px;\n    margin: 5px 5px;\n    padding: 7px 14px;\n    background-color: #ffffff;\n    border: 1px solid #007bff;\n    color: #007bff;\n    font-size: 14px;\n    cursor: pointer;\n    opacity: 1;\n    z-index: 1;\n    transition: opacity 0.2s, transform 0.3s, background-color 0.2s;\n    border-radius: 5px;\n    max-width: 400px;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    /* box-shadow: 0 2px 4px -1px rgba(0,0,0,.2), 0 4px 5px 0 rgba(0,0,0,.14), 0 1px 10px 0 rgba(0,0,0,.12); */\n  }\n\n  .tag.active {\n    animation: pulse 1s infinite;\n    background-color: #007bff;\n    color: #ffffff;\n    transition: 0.3s;\n  }\n\n  .tag.hidden {\n    position: absolute;\n    opacity: 0;\n    z-index: -1;\n    transition: 0.2s;\n  }\n\n  .tag:hover {\n    background-color: #007bff;\n    color: #ffffff;\n    transition: 0.2s;\n  }\n\n  .map-result {\n    display: flex;\n    flex-direction: column;\n    /* border: 1px dashed #565656; */\n    border-radius: 5px;\n    min-height: 300px;\n    /* padding: 30px 10px; */\n    transition: all 0.3s ease;\n  }\n\n  .pair-tag {\n    margin: 5px 5px;\n    padding: 15px 14px;\n    letter-spacing: 1px;\n    border-bottom: 1px solid #eee;\n    color: #565656;\n  }\n\n  .pair-tag .pair-info {\n    margin-left: 10px;\n    transition: 1s ease;\n    font-size: 14px;\n    display: inline;\n  }\n\n  .pair-tag .el-icon-close {\n    margin-top: 4px;\n    cursor: pointer;\n    transition: 0.3s;\n    float: right;\n  }\n\n  .pair-tag .el-icon-caret-right {\n    position: relative;\n    top: 2px;\n  }\n\n  .pair-tag .el-icon-close:hover {\n    color: crimson;\n    transition: 0.3s;\n  }\n\n  .no-map-info {\n    color: #777;\n    font-weight: 300;\n    position: absolute;\n    top: 65px;\n    margin-left: 10px;\n  }\n\n  .el-tag {\n    margin-left: 0;\n    padding: 0;\n    width: 70px;\n    text-align: center;\n    font-size: 9px;\n  }\n\n  .el-input {\n    margin-left: 78px;\n    margin-top: 8px;\n    width: 185px;\n  }\n\n  .button-row {\n    margin-top: 40px;\n  }\n</style>"],"sourceRoot":"src/components"}]}