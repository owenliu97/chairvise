{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\SectionListPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\SectionListPanel.vue","mtime":1593237676000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\";\nimport { ID_NEW_PRESENTATION } from \"@/common/const\";\nimport PredefinedQueries from \"@/store/data/predefinedQueries\";\nimport EmptySection from \"@/components/emptyStates/EmptySection.vue\";\nexport default {\n  props: {\n    presentationId: String\n  },\n  watch: {\n    presentationId: 'fetchSectionList',\n    'presentationFormVersion': function presentationFormVersion() {\n      this.updateVersion();\n    }\n  },\n  data: function data() {\n    return {\n      selectedNewSection: '',\n      presentationFormVersion: ''\n    };\n  },\n  computed: {\n    isLogin: function isLogin() {\n      return this.$store.state.userInfo.isLogin;\n    },\n    isPresentationEditable: function isPresentationEditable() {\n      return this.$store.state.presentation.isPresentationEditable;\n    },\n    predefinedSections: function predefinedSections() {\n      var sectionOptionsGroup = {}; // grouping the predefined queries\n\n      for (var key in PredefinedQueries) {\n        if (!PredefinedQueries.hasOwnProperty(key)) {\n          continue;\n        }\n\n        var groupName = PredefinedQueries[key].group;\n\n        if (sectionOptionsGroup[groupName] === undefined) {\n          sectionOptionsGroup[groupName] = [];\n        }\n\n        sectionOptionsGroup[groupName].push({\n          value: key,\n          label: PredefinedQueries[key].name\n        });\n      } // generate to format that element ui requires\n\n\n      var sectionOptions = [];\n\n      for (var _groupName in sectionOptionsGroup) {\n        if (!sectionOptionsGroup.hasOwnProperty(_groupName)) {\n          continue;\n        }\n\n        sectionOptions.push({\n          label: _groupName,\n          options: sectionOptionsGroup[_groupName]\n        });\n      }\n\n      return sectionOptions;\n    },\n    isNewPresentation: function isNewPresentation() {\n      return this.presentationId === ID_NEW_PRESENTATION;\n    },\n    sectionList: function sectionList() {\n      return this.$store.state.section.sectionList;\n    },\n    isSectionListEmpty: function isSectionListEmpty() {\n      return this.$store.state.section.sectionList.length <= 0;\n    },\n    isLoadingSectionList: function isLoadingSectionList() {\n      return this.$store.state.section.sectionListStatus.isLoading;\n    },\n    isSectionListApiError: function isSectionListApiError() {\n      return this.$store.state.section.sectionListStatus.isApiError;\n    },\n    sectionListApiErrorMsg: function sectionListApiErrorMsg() {\n      return this.$store.state.section.sectionListStatus.apiErrorMsg;\n    },\n    isLoadingDBMetaData: function isLoadingDBMetaData() {\n      return this.$store.state.dbMetaData.entitiesStatus.isLoading;\n    },\n    versions: function versions() {\n      var list = Array.from(new Set(this.$store.state.presentation.versionList.map(function (v) {\n        return v.versionId;\n      })));\n      this.setDefaultValueForVersionList(list[0]);\n      return list;\n    }\n  },\n  components: {\n    AbstractSectionDetail: AbstractSectionDetail,\n    EmptySection: EmptySection\n  },\n  mounted: function mounted() {\n    this.fetchSectionList();\n    this.$store.dispatch('fetchDBMetaDataEntities');\n    this.$store.dispatch('getVersionList');\n  },\n  methods: {\n    updateVersion: function updateVersion() {\n      var value = this.presentationFormVersion;\n\n      if (value === undefined) {\n        value = this.versions[0];\n      }\n\n      this.$store.commit('setPresentationFormField', {\n        field: 'version',\n        value: value\n      });\n    },\n    setDefaultValueForVersionList: function setDefaultValueForVersionList(value) {\n      this.presentationFormVersion = value;\n    },\n    fetchSectionList: function fetchSectionList() {\n      if (this.isNewPresentation) {\n        this.$store.commit('clearSectionList');\n      } else {\n        this.$store.dispatch('fetchSectionList', this.presentationId);\n      }\n    },\n    addNewSection: function addNewSection() {\n      var _this = this;\n\n      if (this.selectedNewSection.length === 0) {\n        this.$notify.error({\n          title: 'Error',\n          message: 'Please select a section to add into presentation.'\n        });\n        return;\n      }\n\n      this.$store.dispatch('addSectionDetail', {\n        presentationId: this.presentationId,\n        selectedNewSection: this.selectedNewSection,\n        dataSet: this.$store.state.userInfo.userEmail\n      }).then(function () {\n        _this.selectedNewSection = '';\n      });\n    }\n  }\n};",{"version":3,"sources":["SectionListPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div v-loading=\"isLoadingDBMetaData || isLoadingSectionList\" v-if=\"!isNewPresentation\">\n      <el-aside width=\"300px\" class=\"addRowRightAlign\" v-if=\"isLogin\">\n        <el-card v-if=\"!isSectionListEmpty\" >\n          <div slot=\"header\" class=\"clearfix\">\n            <span> Select version </span>\n          </div>\n          <el-select class= \"versionInput\" v-model=\"presentationFormVersion\" placeholder=\"Please select a version\" >\n            <el-option v-for=\"v in versions\" :key=\"v\" :label=\"v\" :value=\"v\">\n            </el-option>\n          </el-select>        \n        </el-card>\n        <el-card>  \n          <div slot=\"header\" class=\"clearfix\">\n            <span> Add section </span>\n          </div>\n          <el-select class= \"selectionInput\" v-model=\"selectedNewSection\" placeholder=\"Please select a section to add\"\n                    filterable>\n            <el-option-group\n              v-for=\"group in predefinedSections\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>\n          <el-button class=\"selectionInputButton\" icon=\"el-icon-plus\" type=\"success\" @click=\"addNewSection\">Add New Section</el-button>\n        </el-card>\n      </el-aside>\n      <br/>\n      <el-alert\n        v-if=\"isSectionListApiError\"\n        :title=\"sectionListApiErrorMsg\"\n        type=\"error\" show-icon>\n      </el-alert>\n      <el-card shadow=\"hover\">\n        <abstract-section-detail class=\"presentation-section\" v-for=\"section in sectionList\" :sectionDetail=\"section\"\n                            :key=\"section.id\" :presentationId=\"presentationId\" :version=\"presentationFormVersion\"/>\n        <EmptySection v-if=\"isSectionListEmpty\" />\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\n  import AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\"\n  import {ID_NEW_PRESENTATION} from \"@/common/const\";\n  import PredefinedQueries from \"@/store/data/predefinedQueries\"\n  import EmptySection from \"@/components/emptyStates/EmptySection.vue\"\n\n  export default {\n    props: {\n      presentationId: String,\n    },\n    watch: {\n      presentationId: 'fetchSectionList',\n      'presentationFormVersion'() {\n        this.updateVersion();\n      }\n    },\n    data() {\n      return {\n        selectedNewSection: '',\n        presentationFormVersion: ''\n      }\n    },\n    computed: {\n      isLogin() {\n        return this.$store.state.userInfo.isLogin\n      },\n\n      isPresentationEditable() {\n        return this.$store.state.presentation.isPresentationEditable;\n      },\n\n      predefinedSections() {\n        let sectionOptionsGroup = {};\n        // grouping the predefined queries\n        for (let key in PredefinedQueries) {\n          if (!PredefinedQueries.hasOwnProperty(key)) {\n            continue;\n          }\n          let groupName = PredefinedQueries[key].group;\n          if (sectionOptionsGroup[groupName] === undefined) {\n            sectionOptionsGroup[groupName] = [];\n          }\n          sectionOptionsGroup[groupName].push({\n            value: key,\n            label: PredefinedQueries[key].name,\n          })\n        }\n\n        // generate to format that element ui requires\n        let sectionOptions = [];\n        for (let groupName in sectionOptionsGroup) {\n          if (!sectionOptionsGroup.hasOwnProperty(groupName)) {\n            continue;\n          }\n          sectionOptions.push({\n            label: groupName,\n            options: sectionOptionsGroup[groupName]\n          })\n        }\n        return sectionOptions;\n      },\n\n      isNewPresentation() {\n        return this.presentationId === ID_NEW_PRESENTATION\n      },\n\n      sectionList() {\n        return this.$store.state.section.sectionList\n      },\n      isSectionListEmpty() {\n        return this.$store.state.section.sectionList.length <= 0\n      },\n      isLoadingSectionList() {\n        return this.$store.state.section.sectionListStatus.isLoading\n      },\n      isSectionListApiError() {\n        return this.$store.state.section.sectionListStatus.isApiError\n      },\n      sectionListApiErrorMsg() {\n        return this.$store.state.section.sectionListStatus.apiErrorMsg\n      },\n      isLoadingDBMetaData() {\n        return this.$store.state.dbMetaData.entitiesStatus.isLoading\n      },\n      versions() {\n        let list = Array.from(new Set(this.$store.state.presentation.versionList.map(v => v.versionId)));\n        this.setDefaultValueForVersionList(list[0]);\n        return list;\n      },\n    },\n    components: {\n      AbstractSectionDetail,\n      EmptySection\n    },\n    mounted() {\n      this.fetchSectionList();\n      this.$store.dispatch('fetchDBMetaDataEntities');\n      this.$store.dispatch('getVersionList');\n    },\n    methods: {\n      updateVersion() {\n        var value = this.presentationFormVersion;\n        if (value === undefined) {\n            value = this.versions[0];\n        }\n        this.$store.commit('setPresentationFormField', {\n            field: 'version',\n            value\n        });\n      },\n\n      setDefaultValueForVersionList(value) {\n        this.presentationFormVersion = value;\n      },\n\n      fetchSectionList() {\n        if (this.isNewPresentation) {\n          this.$store.commit('clearSectionList');\n        } else {\n          this.$store.dispatch('fetchSectionList', this.presentationId)\n        }\n      },\n\n      addNewSection() {\n        if (this.selectedNewSection.length === 0) {\n\n          this.$notify.error({\n            title: 'Error',\n            message: 'Please select a section to add into presentation.'\n          });\n          return;\n        }\n        this.$store.dispatch('addSectionDetail', {\n          presentationId: this.presentationId,\n          selectedNewSection: this.selectedNewSection,\n          dataSet: this.$store.state.userInfo.userEmail,\n        }).then(() => {\n          this.selectedNewSection = ''\n        })\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .textBold {\n    font-weight: bold;\n  }\n  .versionInput {\n    display: inline-block;\n    width: 100%;\n  }\n  .selectionInput {\n    display: inline-block;\n    width: 100%;\n    margin-bottom: 16px;\n  }\n  .selectionInputButton {\n    display: inline-block;\n    width: 100%;\n  }\n  .addRowRightAlign {\n    float: right;\n    margin-top: 18px;\n    margin-left: 16px;\n  }\n  .addRowRightAlign .el-card{\n    margin-bottom: 16px;\n  }\n</style>"],"sourceRoot":"src/components"}]}