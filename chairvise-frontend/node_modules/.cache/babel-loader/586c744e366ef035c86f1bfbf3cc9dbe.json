{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\store\\modules\\dataMapping.js","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\store\\modules\\dataMapping.js","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Liu Ruiping\\\\Documents\\\\course-profile-mcomp\\\\proj\\\\chairvise3-0-final\\\\src\\\\web\\\\app\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { processMapping } from '@/store/helpers/processor.js';\nexport default {\n  state: {\n    hasDBSchemaSet: false,\n    hasFileUploaded: false,\n    hasFormatTypeSpecified: false,\n    hasTableTypeSelected: false,\n    hasVersionIdSpecified: false,\n    hasHeaderSpecified: false,\n    hasPredefinedSpecified: false,\n    hasPredefinedSwitchSpecified: false,\n    // new\n    hasMappingFinished: false,\n    isUploadSuccess: false,\n    data: {\n      dbSchema: null,\n      uploadedData: [],\n      uploadedLabel: [],\n      mappingResult: [],\n      processedResult: [],\n      formatType: null,\n      tableType: null,\n      isNewVersion: null,\n      versionId: null,\n      hasHeader: null,\n      hasPredefined: null,\n      // new\n      predefinedMapping: null,\n      predefinedMappingId: null\n    },\n    error: []\n  },\n  mutations: {\n    setUploadSuccess: function setUploadSuccess(state, success) {\n      state.isUploadSuccess = success;\n    },\n    setUploadedFile: function setUploadedFile(state, data) {\n      state.data.uploadedLabel = data[0];\n      state.data.uploadedData = data;\n      state.hasFileUploaded = true;\n    },\n    clearUploadedFile: function clearUploadedFile(state) {\n      state.data.uploadedLabel = [];\n      state.data.uploadedData = [];\n      state.hasFileUploaded = false;\n    },\n    setDBSchema: function setDBSchema(state, dbSchema) {\n      state.data.dbSchema = dbSchema;\n      state.hasDBSchemaSet = true;\n    },\n    clearDBSchema: function clearDBSchema(state) {\n      state.data.dbSchema = [];\n      state.hasDBSchemaSet = false;\n    },\n    setFormatType: function setFormatType(state, formatType) {\n      state.data.formatType = formatType;\n      state.hasFormatTypeSpecified = true;\n    },\n    clearFormatType: function clearFormatType(state) {\n      state.data.formatType = null;\n      state.hasFormatTypeSpecified = false;\n    },\n    setTableType: function setTableType(state, selected) {\n      state.data.tableType = selected;\n      state.hasTableTypeSelected = true;\n    },\n    clearTableType: function clearTableType(state) {\n      state.data.tableType = null;\n      state.hasTableTypeSelected = false;\n    },\n    setVersionId: function setVersionId(state, selected) {\n      state.data.versionId = selected;\n      state.hasVersionIdSpecified = true;\n    },\n    clearVersionId: function clearVersionId(state) {\n      state.data.versionId = null;\n      state.hasVersionIdSpecified = false;\n    },\n    setIsNewVersion: function setIsNewVersion(state, selected) {\n      state.data.isNewVersion = selected;\n    },\n    clearIsNewVersion: function clearIsNewVersion(state) {\n      state.data.isNewVersion = null;\n    },\n    setHasHeader: function setHasHeader(state, hasHeader) {\n      state.data.hasHeader = hasHeader;\n      state.hasHeaderSpecified = true;\n    },\n    clearHasHeader: function clearHasHeader(state) {\n      state.data.hasHeader = null;\n      state.hasHeaderSpecified = false;\n    },\n    setPredefinedMapping: function setPredefinedMapping(state, payload) {\n      state.data.predefinedMapping = payload.mapping;\n      state.data.predefinedMappingId = payload.id;\n      state.hasPredefinedSpecified = true;\n    },\n    clearPredefinedMapping: function clearPredefinedMapping(state) {\n      state.data.predefinedMapping = null;\n      state.data.predefinedMappingId = null;\n      state.hasPredefinedSpecified = false;\n    },\n    setPredefinedSwitch: function setPredefinedSwitch(state, hasPredefined) {\n      state.data.hasPredefined = hasPredefined;\n      state.hasPredefinedSwitchSpecified = true;\n    },\n    clearPredefinedSwitch: function clearPredefinedSwitch(state) {\n      state.data.hasPredefined = null;\n      state.hasPredefinedSwitchSpecified = false;\n    },\n    setMapping: function setMapping(state, payload) {\n      try {\n        state.error = [];\n        state.data.mappingResult = payload.map;\n        state.mappingFinished = true;\n        state.data.processedResult = processMapping(payload.map, state.data.uploadedData, state.data.dbSchema, state.data.hasHeader);\n      } catch (err) {\n        state.error.push(err);\n        state.mappingFinished = false;\n        state.data.mappingResult = [];\n        state.data.processedResult = [];\n      }\n    },\n    clearMapping: function clearMapping(state) {\n      state.data.mappingResult = [];\n      state.data.processedResult = [];\n      state.mappingFinished = false;\n    },\n    setDataMappingError: function setDataMappingError(state, err) {\n      state.error.push(err);\n    },\n    clearError: function clearError(state) {\n      state.error = [];\n    }\n  },\n  actions: {\n    persistMappingNewVersion: function () {\n      var _persistMappingNewVersion = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref) {\n        var commit, state, endpoint, fnKeyTable, fnKeyEntry, i, row;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit, state = _ref.state;\n                commit(\"setPageLoadingStatus\", true);\n                _context.t0 = state.data.tableType;\n                _context.next = _context.t0 === 0 ? 5 : _context.t0 === 1 ? 8 : _context.t0 === 2 ? 11 : 14;\n                break;\n\n              case 5:\n                endpoint = \"author\";\n                fnKeyTable = \"AuthorRecord\";\n                return _context.abrupt(\"break\", 14);\n\n              case 8:\n                endpoint = \"review\";\n                fnKeyTable = \"ReviewRecord\";\n                return _context.abrupt(\"break\", 14);\n\n              case 11:\n                endpoint = \"submission\";\n                fnKeyTable = \"SubmissionRecord\";\n                return _context.abrupt(\"break\", 14);\n\n              case 14:\n                fnKeyEntry = {};\n                fnKeyEntry.versionId = state.data.versionId;\n                fnKeyEntry.recordType = fnKeyTable; // add version to end\n\n                for (i = 0; i < state.data.processedResult.length; i++) {\n                  row = state.data.processedResult[i];\n                  row.versionId = state.data.versionId;\n                } // concurrent POST data and POST version requests \n\n\n                axios.all([postTable(endpoint, state.data.processedResult), postVersion(fnKeyEntry)]).then(axios.spread(function () {\n                  commit(\"setPageLoadingStatus\", false);\n                  commit(\"setUploadSuccess\", true);\n                })).catch(axios.spread(function (dataErr, verErr) {\n                  commit(\"setPageLoadingStatus\", false);\n                  commit(\"setUploadSuccess\", false);\n                  commit(\"setDataMappingError\", dataErr);\n                  commit(\"setDataMappingError\", verErr);\n                }));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function persistMappingNewVersion(_x) {\n        return _persistMappingNewVersion.apply(this, arguments);\n      }\n\n      return persistMappingNewVersion;\n    }(),\n    persistMappingOldVersion: function () {\n      var _persistMappingOldVersion = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref2) {\n        var commit, state, endpoint, i, row;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref2.commit, state = _ref2.state;\n                commit(\"setPageLoadingStatus\", true);\n                _context2.t0 = state.data.tableType;\n                _context2.next = _context2.t0 === 0 ? 5 : _context2.t0 === 1 ? 7 : _context2.t0 === 2 ? 9 : 11;\n                break;\n\n              case 5:\n                endpoint = \"author\";\n                return _context2.abrupt(\"break\", 11);\n\n              case 7:\n                endpoint = \"review\";\n                return _context2.abrupt(\"break\", 11);\n\n              case 9:\n                endpoint = \"submission\";\n                return _context2.abrupt(\"break\", 11);\n\n              case 11:\n                // add version to end\n                for (i = 0; i < state.data.processedResult.length; i++) {\n                  row = state.data.processedResult[i];\n                  row.versionId = state.data.versionId;\n                } //console.log(state.data.processedResult);\n\n\n                _context2.next = 14;\n                return axios.post(\"/api/record/\" + endpoint, state.data.processedResult).then(function () {\n                  commit(\"setPageLoadingStatus\", false);\n                  commit(\"setUploadSuccess\", true);\n                }).catch(function (e) {\n                  commit(\"setPageLoadingStatus\", false);\n                  commit(\"setUploadSuccess\", false);\n                  commit(\"setDataMappingError\", e.toString());\n                });\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function persistMappingOldVersion(_x2) {\n        return _persistMappingOldVersion.apply(this, arguments);\n      }\n\n      return persistMappingOldVersion;\n    }()\n  }\n};\n\nfunction postVersion(fnKeyEntry) {\n  return axios.post(\"/api/version\", fnKeyEntry);\n}\n\nfunction postTable(endpoint, processedResult) {\n  return axios.post(\"/api/record/\" + endpoint, processedResult);\n}",{"version":3,"sources":["C:/Users/Liu Ruiping/Documents/course-profile-mcomp/proj/chairvise3-0-final/src/web/app/src/store/modules/dataMapping.js"],"names":["axios","processMapping","state","hasDBSchemaSet","hasFileUploaded","hasFormatTypeSpecified","hasTableTypeSelected","hasVersionIdSpecified","hasHeaderSpecified","hasPredefinedSpecified","hasPredefinedSwitchSpecified","hasMappingFinished","isUploadSuccess","data","dbSchema","uploadedData","uploadedLabel","mappingResult","processedResult","formatType","tableType","isNewVersion","versionId","hasHeader","hasPredefined","predefinedMapping","predefinedMappingId","error","mutations","setUploadSuccess","success","setUploadedFile","clearUploadedFile","setDBSchema","clearDBSchema","setFormatType","clearFormatType","setTableType","selected","clearTableType","setVersionId","clearVersionId","setIsNewVersion","clearIsNewVersion","setHasHeader","clearHasHeader","setPredefinedMapping","payload","mapping","id","clearPredefinedMapping","setPredefinedSwitch","clearPredefinedSwitch","setMapping","map","mappingFinished","err","push","clearMapping","setDataMappingError","clearError","actions","persistMappingNewVersion","commit","endpoint","fnKeyTable","fnKeyEntry","recordType","i","length","row","all","postTable","postVersion","then","spread","catch","dataErr","verErr","persistMappingOldVersion","post","e","toString"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {processMapping} from '@/store/helpers/processor.js'\n\nexport default {\n  state: {\n    hasDBSchemaSet: false,\n    hasFileUploaded: false,\n    hasFormatTypeSpecified: false,\n    hasTableTypeSelected: false,\n    hasVersionIdSpecified: false,\n    hasHeaderSpecified: false,\n    hasPredefinedSpecified: false,\n    hasPredefinedSwitchSpecified: false, // new\n    hasMappingFinished: false,\n    isUploadSuccess: false,\n    data: {\n      dbSchema: null,\n      uploadedData: [],\n      uploadedLabel: [],\n      mappingResult: [],\n      processedResult: [],\n      formatType: null,\n      tableType: null,\n      isNewVersion: null,\n      versionId: null,\n      hasHeader: null,\n      hasPredefined: null, // new\n      predefinedMapping: null,\n      predefinedMappingId: null,\n    },\n    error: []\n  },\n\n  mutations: {\n    setUploadSuccess(state, success) {\n      state.isUploadSuccess = success;\n    },\n\n    setUploadedFile(state, data) {\n      state.data.uploadedLabel = data[0];\n      state.data.uploadedData = data;\n      state.hasFileUploaded = true;\n    },\n\n    clearUploadedFile(state) {\n      state.data.uploadedLabel = [];\n      state.data.uploadedData = [];\n      state.hasFileUploaded = false;\n    },\n\n    setDBSchema(state, dbSchema) {\n      state.data.dbSchema = dbSchema;\n      state.hasDBSchemaSet = true;\n    },\n\n    clearDBSchema(state) {\n      state.data.dbSchema = [];\n      state.hasDBSchemaSet = false;\n    },\n\n    setFormatType(state, formatType) {\n      state.data.formatType = formatType;\n      state.hasFormatTypeSpecified = true;\n    },\n\n    clearFormatType(state) {\n      state.data.formatType = null;\n      state.hasFormatTypeSpecified = false;\n    },\n\n    setTableType(state, selected) {\n      state.data.tableType = selected;  \n      state.hasTableTypeSelected = true;\n    },\n\n    clearTableType(state) {\n      state.data.tableType = null;\n      state.hasTableTypeSelected = false;\n    },\n\n    setVersionId(state, selected) {\n      state.data.versionId = selected;\n      state.hasVersionIdSpecified = true;\n    },\n\n    clearVersionId(state) {\n      state.data.versionId = null;\n      state.hasVersionIdSpecified = false;\n    },\n\n    setIsNewVersion(state, selected) {\n      state.data.isNewVersion = selected;\n    },\n\n    clearIsNewVersion(state) {\n      state.data.isNewVersion = null;\n    },\n\n    setHasHeader(state, hasHeader) {\n      state.data.hasHeader = hasHeader;\n      state.hasHeaderSpecified = true;\n    },\n\n    clearHasHeader(state) {\n      state.data.hasHeader = null;\n      state.hasHeaderSpecified = false;\n    },\n\n    setPredefinedMapping(state, payload) {\n      state.data.predefinedMapping = payload.mapping;\n      state.data.predefinedMappingId = payload.id;\n      state.hasPredefinedSpecified = true;\n    },\n\n    clearPredefinedMapping(state) {\n      state.data.predefinedMapping = null;\n      state.data.predefinedMappingId = null;\n      state.hasPredefinedSpecified = false;\n    },\n\n    setPredefinedSwitch(state, hasPredefined) {\n      state.data.hasPredefined = hasPredefined;\n      state.hasPredefinedSwitchSpecified = true;\n    },\n\n    clearPredefinedSwitch(state) {\n      state.data.hasPredefined = null;\n      state.hasPredefinedSwitchSpecified = false;\n    },\n\n    setMapping(state, payload) {\n      try {\n        state.error = [];\n        state.data.mappingResult = payload.map;\n        state.mappingFinished = true;\n        state.data.processedResult =\n          processMapping(payload.map,\n            state.data.uploadedData,\n            state.data.dbSchema,\n            state.data.hasHeader);\n      } catch (err) {\n        state.error.push(err);\n        state.mappingFinished = false;\n        state.data.mappingResult = [];\n        state.data.processedResult = [];\n      }\n    },\n\n    clearMapping(state) {\n      state.data.mappingResult = [];\n      state.data.processedResult = [];\n      state.mappingFinished = false;\n    },\n\n    setDataMappingError(state, err) {\n      state.error.push(err);\n    },\n\n    clearError(state) {\n      state.error = [];\n    }\n  },\n\n  actions: {\n    async persistMappingNewVersion({commit, state}) {\n      commit(\"setPageLoadingStatus\", true);\n      let endpoint;\n      let fnKeyTable;\n      switch (state.data.tableType) {\n        case 0:\n          endpoint = \"author\";\n          fnKeyTable = \"AuthorRecord\";\n          break;\n        case 1:\n          endpoint = \"review\";\n          fnKeyTable = \"ReviewRecord\";\n          break;\n        case 2:\n          endpoint = \"submission\";\n          fnKeyTable = \"SubmissionRecord\";\n          break;\n      }\n      var fnKeyEntry = {};\n      fnKeyEntry.versionId = state.data.versionId;\n      fnKeyEntry.recordType = fnKeyTable;\n      \n      // add version to end\n      for (var i=0; i<state.data.processedResult.length; i++){\n        var row = state.data.processedResult[i];\n        row.versionId = state.data.versionId;\n      }\n\n      // concurrent POST data and POST version requests \n      axios.all([postTable(endpoint, state.data.processedResult), postVersion(fnKeyEntry)])  \n        .then(axios.spread( () => {\n          commit(\"setPageLoadingStatus\", false);\n          commit(\"setUploadSuccess\", true);\n        }))\n        .catch(axios.spread(function (dataErr, verErr) {\n          commit(\"setPageLoadingStatus\", false);\n          commit(\"setUploadSuccess\", false);\n          commit(\"setDataMappingError\", dataErr);\n          commit(\"setDataMappingError\", verErr);\n        }));\n    },\n\n    async persistMappingOldVersion({commit, state}) {\n      commit(\"setPageLoadingStatus\", true);\n      let endpoint;\n      switch (state.data.tableType) {\n        case 0:\n          endpoint = \"author\";\n          break;\n        case 1:\n          endpoint = \"review\";\n          break;\n        case 2:\n          endpoint = \"submission\";\n          break;\n      }\n      // add version to end\n      for (var i=0; i<state.data.processedResult.length; i++){\n        var row = state.data.processedResult[i];\n        row.versionId = state.data.versionId;\n      }\n      //console.log(state.data.processedResult);\n      await axios.post(\"/api/record/\" + endpoint, state.data.processedResult)\n        .then(() => {\n          commit(\"setPageLoadingStatus\", false);\n          commit(\"setUploadSuccess\", true);\n        })\n        .catch(e => {\n          commit(\"setPageLoadingStatus\", false);\n          commit(\"setUploadSuccess\", false);\n          commit(\"setDataMappingError\", e.toString());\n        });\n    }\n  }\n}\nfunction postVersion(fnKeyEntry) {\n  return axios.post(\"/api/version\", fnKeyEntry);\n}\n\nfunction postTable(endpoint, processedResult) {\n  return axios.post(\"/api/record/\" + endpoint, processedResult);\n}"]}]}