{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\AccessControlPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\AccessControlPanel.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC } from \"@/common/const\";\nexport default {\n  name: \"AccessControlPanel\",\n  props: {\n    presentationId: {\n      type: String,\n      required: true\n    }\n  },\n  watch: {\n    'presentationId': {\n      immediate: true,\n      handler: 'fetchAccessControlList'\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      accessControlFormRule: {\n        userIdentifier: [{\n          required: true,\n          message: 'Please enter the email',\n          trigger: 'blur'\n        }, {\n          type: 'email',\n          message: 'Please enter a valid email',\n          trigger: ['blur']\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (_this.accessControlList.some(function (ele) {\n              return ele.userIdentifier === value;\n            })) {\n              callback(new Error('There is existent access control for the user'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }],\n        accessLevel: [{\n          required: true,\n          message: 'Please give an access level',\n          trigger: 'blur'\n        }]\n      },\n      currentUrl: ''\n    };\n  },\n  beforeUpdate: function beforeUpdate() {\n    this.currentUrl = window.location.href;\n  },\n  computed: {\n    isAccessControlPanelLoading: function isAccessControlPanelLoading() {\n      return this.$store.state.accessControl.accessControlListStatus.isLoading || this.$store.state.accessControl.accessControlFormStatus.isLoading;\n    },\n    isAccessControlListApiError: function isAccessControlListApiError() {\n      return this.$store.state.accessControl.accessControlListStatus.isApiError;\n    },\n    accessControlListApiErrorMsg: function accessControlListApiErrorMsg() {\n      return this.$store.state.accessControl.accessControlListStatus.apiErrorMsg;\n    },\n    isAccessControlFormApiError: function isAccessControlFormApiError() {\n      return this.$store.state.accessControl.accessControlFormStatus.isApiError;\n    },\n    accessControlFormApiErrorMsg: function accessControlFormApiErrorMsg() {\n      return this.$store.state.accessControl.accessControlFormStatus.apiErrorMsg;\n    },\n    accessControlList: function accessControlList() {\n      // filter out public access control in the ACL\n      return this.$store.state.accessControl.accessControlList.filter(function (ac) {\n        return ac.userIdentifier !== SPECIAL_IDENTIFIER_PUBLIC;\n      });\n    },\n    publicAccessLevel: function publicAccessLevel() {\n      var publicAccessLevelControl = this.$store.state.accessControl.accessControlList.find(function (ac) {\n        return ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC;\n      });\n\n      if (publicAccessLevelControl === undefined) {\n        return 'OFF';\n      }\n\n      return publicAccessLevelControl.accessLevel;\n    },\n    accessControlForm: function accessControlForm() {\n      return {\n        userIdentifier: this.accessControlFormUserIdentifier,\n        accessLevel: this.accessControlFormAccessLevel\n      };\n    },\n    accessControlFormUserIdentifier: {\n      get: function get() {\n        return this.$store.state.accessControl.accessControlForm.userIdentifier;\n      },\n      set: function set(value) {\n        this.$store.commit('setAccessControlFormField', {\n          field: 'userIdentifier',\n          value: value\n        });\n      }\n    },\n    accessControlFormAccessLevel: {\n      get: function get() {\n        return this.$store.state.accessControl.accessControlForm.accessLevel;\n      },\n      set: function set(value) {\n        this.$store.commit('setAccessControlFormField', {\n          field: 'accessLevel',\n          value: value\n        });\n      }\n    }\n  },\n  methods: {\n    modifyPublicAccessControl: function modifyPublicAccessControl(accessLevel) {\n      var publicAccessControl = this.$store.state.accessControl.accessControlList.find(function (ac) {\n        return ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC;\n      }); // delete\n\n      if (accessLevel === 'OFF' && publicAccessControl !== undefined) {\n        this.$store.dispatch('deleteAccessControl', {\n          presentationId: this.presentationId,\n          id: publicAccessControl.id\n        });\n        return;\n      }\n\n      if (publicAccessControl === undefined) {\n        // create if not exist\n        this.$store.dispatch('addAccessControl', {\n          presentationId: this.presentationId,\n          userIdentifier: SPECIAL_IDENTIFIER_PUBLIC,\n          accessLevel: accessLevel\n        });\n      } else {\n        // update if exist\n        this.$store.dispatch('updateAccessControl', {\n          presentationId: this.presentationId,\n          id: publicAccessControl.id,\n          accessLevel: accessLevel\n        });\n      }\n    },\n    fetchAccessControlList: function fetchAccessControlList() {\n      if (this.presentationId === ID_NEW_PRESENTATION) {\n        return;\n      }\n\n      this.$store.dispatch('fetchAccessControlList', this.presentationId);\n    },\n    updateAccessControl: function updateAccessControl(_ref, $event) {\n      var id = _ref.id;\n      this.$store.dispatch('updateAccessControl', {\n        presentationId: this.presentationId,\n        id: id,\n        accessLevel: $event\n      });\n    },\n    deleteAccessControl: function deleteAccessControl(_ref2) {\n      var id = _ref2.id;\n      this.$store.dispatch('deleteAccessControl', {\n        presentationId: this.presentationId,\n        id: id\n      });\n    },\n    addAccessControl: function addAccessControl() {\n      var _this2 = this;\n\n      this.$refs['accessControlForm'].validate(function (valid) {\n        if (!valid) {\n          return;\n        }\n\n        _this2.$store.dispatch('addAccessControl', {\n          presentationId: _this2.presentationId,\n          userIdentifier: _this2.accessControlFormUserIdentifier,\n          accessLevel: _this2.accessControlFormAccessLevel\n        }).then(function () {\n          _this2.accessControlFormUserIdentifier = '';\n          _this2.accessControlFormAccessLevel = '';\n\n          _this2.$refs['accessControlForm'].resetFields();\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["AccessControlPanel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div v-loading=\"isAccessControlPanelLoading\">\n    <h4>Shareable Link</h4>\n    <el-input\n      :value=\"currentUrl\"\n      @focus=\"$event.target.select()\">\n      <template slot=\"prepend\">Any one with the link</template>\n      <template slot=\"append\">\n        <el-select :value=\"publicAccessLevel\" @change=\"modifyPublicAccessControl($event)\" style=\"width: 150px\">\n          <el-option label=\"Cannot Access\" value=\"OFF\"></el-option>\n          <el-option label=\"Can View\" value=\"CAN_READ\"></el-option>\n          <el-option label=\"Can Edit\" value=\"CAN_WRITE\"></el-option>\n        </el-select>\n      </template>\n    </el-input>\n    <h4>Specific Access Control</h4>\n    <el-alert v-if=\"isAccessControlListApiError\" :title=\"accessControlListApiErrorMsg\" type=\"error\" show-icon\n              class=\"errorAlert\"/>\n    <el-table\n      :data=\"accessControlList\"\n      style=\"width: 100%\" emptyText=\"No Access Control for this Presentation!\">\n      <el-table-column\n        prop=\"userIdentifier\"\n        label=\"Email\">\n      </el-table-column>\n      <el-table-column\n        label=\"Access Level\">\n        <template slot-scope=\"scope\">\n          <el-select :value=\"scope.row.accessLevel\" placeholder=\"Select the permission\"\n                     @change=\"updateAccessControl(scope.row, $event)\">\n            <el-option label=\"View\" value=\"CAN_READ\"></el-option>\n            <el-option label=\"Edit\" value=\"CAN_WRITE\"></el-option>\n          </el-select>&nbsp;\n          <el-button\n            type=\"danger\"\n            @click=\"deleteAccessControl(scope.row)\" icon=\"el-icon-delete\" circle></el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <h4>Add New Access Control</h4>\n    <el-alert v-if=\"isAccessControlFormApiError\" :title=\"accessControlFormApiErrorMsg\" type=\"error\" show-icon\n              class=\"errorAlert\"/>\n    <el-form ref=\"accessControlForm\" label-position=\"left\" label-width=\"120px\" :model=\"accessControlForm\"\n             :rules=\"accessControlFormRule\">\n      <el-form-item label=\"Email address\" prop=\"userIdentifier\">\n        <el-input v-model=\"accessControlFormUserIdentifier\" placeholder=\"Email of the user to share\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Permissions\" prop=\"accessLevel\">\n        <el-select v-model=\"accessControlFormAccessLevel\" placeholder=\"Permission the user will have\"\n                   style=\"width: 100%\">\n          <el-option label=\"View\" value=\"CAN_READ\"></el-option>\n          <el-option label=\"Edit\" value=\"CAN_WRITE\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"addAccessControl()\">Add</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\n  import {ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\n\n  export default {\n    name: \"AccessControlPanel\",\n\n    props: {\n      presentationId: {\n        type: String,\n        required: true\n      }\n    },\n\n    watch: {\n      'presentationId': {\n        immediate: true,\n        handler: 'fetchAccessControlList'\n      }\n    },\n\n    data() {\n      return {\n        accessControlFormRule: {\n          userIdentifier: [\n            {required: true, message: 'Please enter the email', trigger: 'blur'},\n            {type: 'email', message: 'Please enter a valid email', trigger: ['blur']},\n            {\n              validator: (rule, value, callback) => {\n                if (this.accessControlList.some(ele => ele.userIdentifier === value)) {\n                  callback(new Error('There is existent access control for the user'));\n                } else {\n                  callback();\n                }\n              },\n              trigger: 'blur'\n            }\n          ],\n          accessLevel: [\n            {required: true, message: 'Please give an access level', trigger: 'blur'},\n          ]\n        },\n        currentUrl: '',\n      }\n    },\n\n    beforeUpdate() {\n      this.currentUrl = window.location.href;\n    },\n\n    computed: {\n\n      isAccessControlPanelLoading() {\n        return this.$store.state.accessControl.accessControlListStatus.isLoading\n          || this.$store.state.accessControl.accessControlFormStatus.isLoading\n      },\n\n      isAccessControlListApiError() {\n        return this.$store.state.accessControl.accessControlListStatus.isApiError\n      },\n\n      accessControlListApiErrorMsg() {\n        return this.$store.state.accessControl.accessControlListStatus.apiErrorMsg\n      },\n\n      isAccessControlFormApiError() {\n        return this.$store.state.accessControl.accessControlFormStatus.isApiError\n      },\n\n      accessControlFormApiErrorMsg() {\n        return this.$store.state.accessControl.accessControlFormStatus.apiErrorMsg\n      },\n\n\n      accessControlList() {\n        // filter out public access control in the ACL\n        return this.$store.state.accessControl.accessControlList\n          .filter(ac => ac.userIdentifier !== SPECIAL_IDENTIFIER_PUBLIC)\n      },\n\n      publicAccessLevel() {\n        let publicAccessLevelControl =\n          this.$store.state.accessControl.accessControlList.find(ac => ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC);\n        if (publicAccessLevelControl === undefined) {\n          return 'OFF'\n        }\n        return publicAccessLevelControl.accessLevel\n      },\n\n      accessControlForm() {\n        return {\n          userIdentifier: this.accessControlFormUserIdentifier,\n          accessLevel: this.accessControlFormAccessLevel,\n        }\n      },\n\n      accessControlFormUserIdentifier: {\n        get() {\n          return this.$store.state.accessControl.accessControlForm.userIdentifier\n        },\n        set(value) {\n          this.$store.commit('setAccessControlFormField', {\n            field: 'userIdentifier',\n            value\n          })\n        },\n      },\n      accessControlFormAccessLevel: {\n        get() {\n          return this.$store.state.accessControl.accessControlForm.accessLevel\n        },\n        set(value) {\n          this.$store.commit('setAccessControlFormField', {\n            field: 'accessLevel',\n            value\n          })\n        },\n      },\n    },\n\n    methods: {\n      modifyPublicAccessControl(accessLevel) {\n        let publicAccessControl =\n          this.$store.state.accessControl.accessControlList.find(ac => ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC);\n\n        // delete\n        if (accessLevel === 'OFF' && publicAccessControl !== undefined) {\n          this.$store.dispatch('deleteAccessControl',\n            {\n              presentationId: this.presentationId,\n              id: publicAccessControl.id,\n            }\n          );\n          return;\n        }\n\n        if (publicAccessControl === undefined) {\n          // create if not exist\n          this.$store.dispatch('addAccessControl', {\n            presentationId: this.presentationId,\n            userIdentifier: SPECIAL_IDENTIFIER_PUBLIC,\n            accessLevel\n          })\n        } else {\n          // update if exist\n          this.$store.dispatch('updateAccessControl',\n            {\n              presentationId: this.presentationId,\n              id: publicAccessControl.id,\n              accessLevel\n            }\n          );\n        }\n      },\n\n      fetchAccessControlList() {\n        if (this.presentationId === ID_NEW_PRESENTATION) {\n          return;\n        }\n        this.$store.dispatch('fetchAccessControlList', this.presentationId)\n      },\n\n      updateAccessControl({id}, $event) {\n        this.$store.dispatch('updateAccessControl',\n          {\n            presentationId: this.presentationId,\n            id,\n            accessLevel: $event\n          }\n        );\n      },\n      deleteAccessControl({id}) {\n        this.$store.dispatch('deleteAccessControl',\n          {\n            presentationId: this.presentationId,\n            id,\n          }\n        );\n      },\n      addAccessControl() {\n        this.$refs['accessControlForm'].validate((valid) => {\n          if (!valid) {\n            return\n          }\n          this.$store.dispatch('addAccessControl', {\n            presentationId: this.presentationId,\n            userIdentifier: this.accessControlFormUserIdentifier,\n            accessLevel: this.accessControlFormAccessLevel\n          })\n            .then(() => {\n              this.accessControlFormUserIdentifier = '';\n              this.accessControlFormAccessLevel = '';\n              this.$refs['accessControlForm'].resetFields();\n            });\n        });\n      },\n    }\n  }\n</script>\n\n<style scoped>\n  .errorAlert {\n    margin-bottom: 15px;\n  }\n</style>"],"sourceRoot":"src/components"}]}