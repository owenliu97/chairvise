{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\ImportData.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\ImportData.vue","mtime":1591977012000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport MappingTool from \"@/components/MappingTool.vue\";\nimport Papa from \"papaparse\";\nimport { REVIEW_DATE_DAY_FIELD, REVIEW_DATE_TIME_FIELD, REVIEW_TABLE_ID } from \"@/common/const\";\nimport { deepCopy } from \"@/common/utility\";\nimport PredefinedMappings from \"@/store/data/predefinedMapping\";\nimport moment from \"moment\";\nexport default {\n  name: \"ImportData\",\n  data: function data() {\n    return {\n      predefinedMappings: PredefinedMappings\n    };\n  },\n  beforeCreate: function beforeCreate() {\n    this.$store.dispatch('fetchDBMetaDataEntities');\n    this.$store.dispatch('getVersionList');\n  },\n  computed: {\n    isLogin: function isLogin() {\n      return this.$store.state.userInfo.isLogin;\n    },\n    isAppLoading: function isAppLoading() {\n      return this.$store.state.isPageLoading || this.$store.state.dbMetaData.entitiesStatus.isLoading;\n    },\n    dbSchemas: function dbSchemas() {\n      return this.$store.state.dbMetaData.entities;\n    },\n    formatType: {\n      get: function get() {\n        return this.$store.state.dataMapping.data.formatType;\n      },\n      set: function set(newValue) {\n        this.$store.commit(\"setFormatType\", newValue);\n      }\n    },\n    tableType: {\n      get: function get() {\n        return this.$store.state.dataMapping.data.tableType;\n      },\n      set: function set(newValue) {\n        var dbSchema = deepCopy(this.dbSchemas[newValue]);\n\n        if (newValue === REVIEW_TABLE_ID) {\n          dbSchema.fieldMetaDataList.push(REVIEW_DATE_DAY_FIELD);\n          dbSchema.fieldMetaDataList.push(REVIEW_DATE_TIME_FIELD);\n        }\n\n        this.$store.commit(\"setTableType\", newValue);\n        this.$store.commit(\"setDBSchema\", dbSchema);\n      }\n    },\n    versionId: {\n      get: function get() {\n        return this.$store.state.dataMapping.data.versionId;\n      },\n      set: function set(newValue) {\n        this.$store.commit(\"setVersionId\", newValue);\n      }\n    },\n    hasHeader: {\n      get: function get() {\n        return this.$store.state.dataMapping.data.hasHeader;\n      },\n      set: function set(newValue) {\n        this.$store.commit(\"setHasHeader\", newValue);\n      }\n    },\n    hasPredefined: {\n      get: function get() {\n        return this.$store.state.dataMapping.data.hasPredefined;\n      },\n      set: function set(newValue) {\n        this.$store.commit(\"setPredefinedSwitch\", newValue);\n      }\n    },\n    predefinedMappingId: {\n      get: function get() {\n        return this.$store.state.dataMapping.data.predefinedMappingId;\n      },\n      set: function set(newValue) {\n        this.$store.commit(\"setPredefinedMapping\", {\n          id: newValue,\n          mapping: PredefinedMappings[newValue].mapping\n        });\n      }\n    },\n    isReadyForMapping: function isReadyForMapping() {\n      return this.$store.state.dataMapping.hasFileUploaded && this.$store.state.dataMapping.hasFormatTypeSpecified && this.$store.state.dataMapping.hasTableTypeSelected && this.$store.state.dataMapping.hasHeaderSpecified && this.$store.state.dataMapping.hasPredefinedSpecified && this.$store.state.dataMapping.hasVersionIdSpecified;\n    },\n    uploaded: function uploaded() {\n      return this.$store.state.dataMapping.hasFileUploaded;\n    },\n    isReadyForUpload: function isReadyForUpload() {\n      return this.$store.state.dataMapping.hasFormatTypeSpecified && this.$store.state.dataMapping.hasTableTypeSelected && this.$store.state.dataMapping.hasHeaderSpecified && this.$store.state.dataMapping.hasPredefinedSwitchSpecified && this.$store.state.dataMapping.hasVersionIdSpecified;\n    },\n    isReadyForChoosing: function isReadyForChoosing() {\n      return this.$store.state.dataMapping.hasTableTypeSelected;\n    }\n  },\n  methods: {\n    querySearch: function querySearch(queryString, cb) {\n      // convert to array of string\n      var links = this.$store.state.presentation.versionList.map(function (v) {\n        return v.versionId;\n      }); // function to remove duplicate from array of string\n\n      var reduceFunction = function reduceFunction(links) {\n        return links.filter(function (v, i) {\n          return links.indexOf(v) === i;\n        });\n      };\n\n      links = reduceFunction(links);\n      links = links.map(function (v) {\n        return {\n          \"value\": v\n        };\n      });\n      var results = queryString ? links.filter(this.createFilter(queryString)) : links;\n      cb(results);\n    },\n    createFilter: function createFilter(queryString) {\n      return function (link) {\n        return link.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0;\n      };\n    },\n    navigateToHomePage: function navigateToHomePage() {\n      this.$router.replace(\"/home\");\n    },\n    fileUploadHandler: function fileUploadHandler(file) {\n      // show loading and go parsing\n      this.$store.commit(\"setPageLoadingStatus\", true); // if versionList is empty\n      // console.log(this.$store.state.presentation.versionList);\n      // filter by \"AuthorRecord\" \"ReviewRecord\" \"SubmissionRecord\"\n\n      if (!this.$store.state.presentation.versionList) {\n        this.$store.commit(\"setIsNewVersion\", false);\n      } else {\n        // if tabletype 0 author elif 1 review elif 2 sub\n        // filter by \"AuthorRecord\" \"ReviewRecord\" \"SubmissionRecord\"\n        var verList;\n\n        switch (this.$store.state.dataMapping.data.tableType) {\n          case 0:\n            verList = this.$store.state.presentation.versionList.filter(function (v) {\n              return v.recordType === \"AuthorRecord\";\n            }).map(function (v) {\n              return v.versionId;\n            });\n            break;\n\n          case 1:\n            verList = this.$store.state.presentation.versionList.filter(function (v) {\n              return v.recordType === \"ReviewRecord\";\n            }).map(function (v) {\n              return v.versionId;\n            });\n            break;\n\n          case 2:\n            verList = this.$store.state.presentation.versionList.filter(function (v) {\n              return v.recordType === \"SubmissionRecord\";\n            }).map(function (v) {\n              return v.versionId;\n            });\n            break;\n\n          default:\n        }\n\n        this.$store.commit(\"setIsNewVersion\", !verList.includes(this.$store.state.dataMapping.data.versionId));\n      }\n      /*  tabletype 1\t  1 - review \n          tabletype 0\t  2 - author\n          tabletype 2\t  3 - sub */\n      // map sub to sub// rev to rev // author to author if predefined mapping specified\n\n\n      if (this.$store.state.dataMapping.data.hasPredefined) {\n        switch (this.$store.state.dataMapping.data.tableType) {\n          case 0:\n            this.$store.commit(\"setPredefinedMapping\", {\n              id: 2,\n              mapping: PredefinedMappings[2].mapping\n            });\n            break;\n\n          case 1:\n            this.$store.commit(\"setPredefinedMapping\", {\n              id: 1,\n              mapping: PredefinedMappings[1].mapping\n            });\n            break;\n\n          case 2:\n            this.$store.commit(\"setPredefinedMapping\", {\n              id: 3,\n              mapping: PredefinedMappings[3].mapping\n            });\n            break;\n\n          default:\n        }\n      } else {\n        this.$store.commit(\"setPredefinedMapping\", {\n          id: 0,\n          mapping: PredefinedMappings[0].mapping\n        });\n      }\n\n      Papa.parse(file.raw, {\n        // ignoring empty lines in csv file\n        skipEmptyLines: true,\n        complete: function (result) {\n          var res = result;\n          var res2 = res.data;\n          var verId = this.$store.state.dataMapping.data.versionId; //author file preprocessing\n\n          if (this.$store.state.dataMapping.data.tableType == \"0\") {\n            var authorres = []; //ACL file preprocessing //Softconf\n\n            if (this.$store.state.dataMapping.data.formatType == \"2\") {\n              authorres.push([\"submission #\", \"first name\", \"last name\", \"email\", \"country\", \"organization\", \"Web page\", \"person #\", \"corresponding?\"]); // for each row of data, manipulate temporary array element[] \n              // then push to true array res2[] for parsing\n\n              for (var i = 1; i < res2.length; i++) {\n                var x = res2[i]; //console.log(x);\n\n                var k = 0,\n                    j = 14,\n                    element = [],\n                    corr = \"\",\n                    country = \"\";\n\n                while (x[j] != \"\") {\n                  if (x[j] == x[65] && x[j + 1] == x[66]) {\n                    corr = \"yes\";\n                    country = x[78];\n                  } else {\n                    corr = \"no\";\n                    country = \"\";\n                  }\n\n                  element[k] = [x[0], x[j], x[j + 1], x[j + 2], country, x[j + 3], \"\", \"\", corr, verId];\n                  authorres.push(element[k]);\n                  k += 1;\n                  j = 14 + k * 5;\n                } //var element1=[x[0],x[14],x[15],x[16],\"\",x[17],\"\",\"\"];\n\n              }\n\n              res2 = authorres; //console.log(authorres)\n            } //author anonymization - Both formats\n\n\n            var convertstring = require(\"convert-string\");\n\n            for (var m = 1; m < res2.length; m++) {\n              var conv1 = convertstring.stringToBytes(res2[m][1]);\n              var conv2 = convertstring.stringToBytes(res2[m][2]);\n              var firstname = \"\";\n              var lastname = \"\";\n\n              for (var a = 0; a < conv1.length; a++) {\n                firstname = firstname.concat(String(conv1[a] + 18));\n              }\n\n              for (var w = 0; w < conv2.length; w++) {\n                lastname = lastname.concat(String(conv2[w] + 18));\n              }\n\n              res2[m][1] = firstname;\n              res2[m][2] = lastname;\n            } //console.log(res2);\n\n          } //review file preprocessing\n          else if (this.$store.state.dataMapping.data.tableType == \"1\") {\n              //Softconf\n              if (this.$store.state.dataMapping.data.formatType == \"2\") {\n                var reviewres = [];\n                reviewres.push([\"Review Id\", \"Submission Id\", \"Num Review Assignment\", \"Reviewer Name\", \"Expertise Level\", \"Review Comment\", \"Confidence Level\", \"Overall Evaluation Score\", \"Column 9\", \"Column 10\", \"Column 11\", \"Column 12\", \"Day of the Review Date\", \"Time of the Review Date\", \"Has Recommended for the Best Paper\"]);\n\n                for (var q = 1; q < res2.length; q++) {\n                  var z = res2[q];\n                  z[32] = \"confidence: \" + z[32]; //console.log(typeof(z[7]));\n                  //var str=z[7].toString();\n\n                  var date_time = z[7].split(\" \"); //console.log(date_time);\n\n                  var date = date_time[0];\n                  var time = date_time[1].split(\":\")[0] + \":\" + date_time[1].split(\":\")[1]; //console.log(date,time);\n\n                  element = [\"\", z[0], \"\", \"\", \"\", z[38], z[32], z[31], \"\", \"\", \"\", \"\", date, time, \"\", verId];\n                  reviewres.push(element);\n                }\n\n                res2 = reviewres; //console.log(reviewres);\n              } //author anonymization - JCDL\n              // Easy Chair\n              else if (this.$store.state.dataMapping.data.formatType == \"1\") {\n                  var convert_string = require(\"convert-string\");\n\n                  for (var index = 1; index < res2.length; index++) {\n                    var convert = convert_string.stringToBytes(res2[index][3]);\n                    var name = \"\";\n\n                    for (var idx = 0; idx < convert.length; idx++) {\n                      name = name.concat(String(convert[idx] + 18));\n                    }\n\n                    res2[index][3] = name;\n                  }\n                }\n            } //ACL submission file processing\n            else if (this.$store.state.dataMapping.data.tableType == \"2\") {\n                if (this.$store.state.dataMapping.data.formatType == \"2\") {\n                  var submissionres = [];\n                  submissionres.push([\"#\", \"track #\", \"track name\", \"title\", \"authors\", \"submitted\", \"last updated\", \"form fields\", \"keywords\", \"decision\", \"notified\", \"reviews sent\", \"abstract\"]);\n\n                  for (var l = 1; l < res2.length; l++) {\n                    var y = res2[l];\n                    var dt = moment(y[10], \"D MMM YYYY HH:mm:ss\").format(\"YYYY-M-D H:m\");\n\n                    if (y[6].includes(\"Reject\")) {\n                      y[6] = \"reject\";\n                    } else {\n                      y[6] = \"accept\";\n                    } //console.log(x);\n\n\n                    element = [y[0], \"\", y[4], y[2], y[3], dt, dt, \"\", y[13], y[6], \"\", \"\", y[9], verId];\n                    submissionres.push(element);\n                  }\n\n                  res2 = submissionres;\n                }\n              }\n\n          if (this.$store.state.dataMapping.data.formatType == \"1\") {\n            var tempCSV = []; //author\n\n            if (this.$store.state.dataMapping.data.tableType == \"0\") {\n              tempCSV.push([\"submission #\", \"first name\", \"last name\", \"email\", \"country\", \"organization\", \"Web page\", \"person #\", \"corresponding?\"]);\n            } //review\n            else if (this.$store.state.dataMapping.data.tableType == \"1\") {\n                tempCSV.push([\"Review Id\", \"Submission Id\", \"Num Review Assignment\", \"Reviewer Name\", \"Expertise Level\", \"Review Comment\", \"Confidence Level\", \"Overall Evaluation Score\", \"Column 9\", \"Column 10\", \"Column 11\", \"Column 12\", \"Day of the Review Date\", \"Time of the Review Date\", \"Has Recommended for the Best Paper\"]);\n              } //submission\n              else if (this.$store.state.dataMapping.data.tableType == \"2\") {\n                  tempCSV.push([\"#\", \"track #\", \"track name\", \"title\", \"authors\", \"submitted\", \"last updated\", \"form fields\", \"keywords\", \"decision\", \"notified\", \"reviews sent\", \"abstract\"]);\n                } // for each row of data, manipulate temporary array element[] \n            // then push to true array res2[] for parsing\n\n\n            var csvRow = [];\n\n            for (var rowNum = 1; rowNum < res2.length; rowNum++) {\n              csvRow = res2[rowNum]; //csvRow.push(verId);\n\n              tempCSV.push(csvRow);\n            }\n\n            res2 = tempCSV;\n          } //console.log(res2);\n\n\n          this.$store.commit(\"setUploadedFile\", res2);\n          this.$store.commit(\"setPageLoadingStatus\", false);\n        }.bind(this)\n      });\n    }\n  },\n  components: {\n    MappingTool: MappingTool\n  }\n};",{"version":3,"sources":["ImportData.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-main>\n    <el-alert\n      title=\"You need to login-in to view the page\"\n      type=\"error\"\n      v-if=\"!isLogin && !isAppLoading\">\n      &nbsp;<el-button type=\"warning\" plain size=\"mini\" @click=\"navigateToHomePage\">Return to the Home Page</el-button>\n    </el-alert>\n\n    <div v-if=\"isLogin\">\n      <mapping-tool v-if=\"isReadyForMapping\" ref=\"mapTool\"></mapping-tool>\n\n      <el-card v-else>\n        <div slot=\"header\" class=\"clearfix\">\n          <span>Upload Data</span>\n        </div>\n      \n      <div class=\"section\">\n        <h2> Record Information </h2>\n        <el-divider></el-divider>\n        \n        <div class=\"form-card\">\n          <label class=\"label\"> Conference Type </label>\n          <br/>\n          <el-radio-group v-model=\"formatType\" size=\"medium\">\n            <el-radio-button :label=\"1\">EasyChair</el-radio-button>\n            <el-radio-button :label=\"2\">SoftConf</el-radio-button>\n          </el-radio-group>\n        </div>\n\n        <div class=\"form-card\">\n          <label class=\"label\"> Table Type </label>\n          <br/>\n          <el-radio-group v-model=\"tableType\" size=\"medium\">\n            <el-radio-button v-for=\"(schema, idx) in dbSchemas\" \n              :label=\"idx\" \n              :key=\"schema.name\"> \n              {{ schema.name }}\n            </el-radio-button>\n          </el-radio-group>\n        </div>\n      </div>\n\n      <div class=\"section\" v-if=\"isReadyForChoosing\">\n        <h2>\n          Mapping Information\n\n          <el-tooltip placement=\"top\">\n            <div slot=\"content\">\n              Optional\n            </div>\n            <el-button type=\"text\" icon=\"el-icon-info\" circle></el-button>\n          </el-tooltip>\n        </h2>\n        <el-divider></el-divider>\n\n        <div class=\"form-card\">\n          <el-switch\n            v-model=\"hasHeader\"\n            active-text=\"Has Header\"\n            inactive-text=\"No Header\">\n          </el-switch>\n        </div>\n\n        <div class=\"form-card\" >\n          <el-switch\n            v-model=\"hasPredefined\"\n            active-text=\"Predefined Mapping\"\n            inactive-text=\"No Predefined Mapping\">\n          </el-switch>\n        </div> \n      </div>\n      \n      <div class=\"section\" v-if=\"isReadyForChoosing\">\n        <h2> \n          Version Information\n\n          <el-tooltip placement=\"top\">\n            <div slot=\"content\">\n              If the input version is an existing version, current record will be replaced based on record type.\n              <br/>\n              If the input version is a new version, current record will be created based on record type.\n            </div>\n            <el-button type=\"text\" icon=\"el-icon-question\" circle></el-button>\n          </el-tooltip>\n        </h2>        \n        <el-divider></el-divider>\n        \n        <el-row class=\"form-card\">\n          <el-col>\n            <label class=\"label\">\n              Version\n            </label>\n            <br/>\n            <el-autocomplete\n              class=\"inline-input\"\n              v-model=\"versionId\"\n              :fetch-suggestions=\"querySearch\"\n              placeholder=\"Input Version\"\n            ></el-autocomplete>\n          </el-col>\n        </el-row>\n        <div class=\"form-card\">\n          <el-upload v-if=\"isReadyForUpload\" drag action=\"\"\n                    :auto-upload=\"false\"\n                    :show-file-list=\"false\"\n                    :multiple=\"false\"\n                    :on-change=\"fileUploadHandler\">\n            <i class=\"el-icon-upload\"></i>\n            <div class=\"el-upload__text\">Drop .csv file here or <em>click to upload</em></div>\n          </el-upload>\n        </div>\n      </div>\n\n      </el-card>\n    </div>\n  </el-main>\n</template>\n\n<script>\n  import MappingTool from \"@/components/MappingTool.vue\";\n  import Papa from \"papaparse\";\n  import {REVIEW_DATE_DAY_FIELD, REVIEW_DATE_TIME_FIELD, REVIEW_TABLE_ID} from \"@/common/const\"\n  import {deepCopy} from \"@/common/utility\"\n  import PredefinedMappings from \"@/store/data/predefinedMapping\"\n  import moment from \"moment\"\n\n  export default {\n    name: \"ImportData\",\n    data() {\n      return {\n        predefinedMappings: PredefinedMappings\n      };\n    },\n    beforeCreate() {\n      this.$store.dispatch('fetchDBMetaDataEntities');\n      this.$store.dispatch('getVersionList');\n    },\n    computed: {\n      isLogin() {\n        return this.$store.state.userInfo.isLogin;\n      },\n      isAppLoading: function () {\n        return this.$store.state.isPageLoading || this.$store.state.dbMetaData.entitiesStatus.isLoading;\n      },\n      dbSchemas: function () {\n        return this.$store.state.dbMetaData.entities;\n      },\n      formatType: {\n        get: function () {\n          return this.$store.state.dataMapping.data.formatType;\n        },\n        set: function (newValue) {\n          this.$store.commit(\"setFormatType\", newValue);\n        }\n      },\n      tableType: {\n        get: function () {\n          return this.$store.state.dataMapping.data.tableType;\n        },\n        set: function (newValue) {\n          let dbSchema = deepCopy(this.dbSchemas[newValue]);\n          if (newValue === REVIEW_TABLE_ID) {\n            dbSchema.fieldMetaDataList.push(REVIEW_DATE_DAY_FIELD);\n            dbSchema.fieldMetaDataList.push(REVIEW_DATE_TIME_FIELD);\n          }\n          this.$store.commit(\"setTableType\", newValue);\n          this.$store.commit(\"setDBSchema\", dbSchema);\n        }\n      },\n      versionId: {\n        get: function () {\n          return this.$store.state.dataMapping.data.versionId;\n        },\n        set: function (newValue) {\n          this.$store.commit(\"setVersionId\", newValue);\n        }\n      },\n      hasHeader: {\n        get: function () {\n          return this.$store.state.dataMapping.data.hasHeader;\n        },\n        set: function (newValue) {\n          this.$store.commit(\"setHasHeader\", newValue);\n        }\n      },\n      hasPredefined: {\n        get: function () {\n          return this.$store.state.dataMapping.data.hasPredefined;\n        },\n        set: function (newValue) {\n          this.$store.commit(\"setPredefinedSwitch\", newValue);\n        }\n      },\n      predefinedMappingId: {\n        get: function () {\n          return this.$store.state.dataMapping.data.predefinedMappingId;\n        },\n        set: function (newValue) {\n          this.$store.commit(\"setPredefinedMapping\", {id: newValue, mapping: PredefinedMappings[newValue].mapping});\n        }\n      },\n      isReadyForMapping: function () {\n        return this.$store.state.dataMapping.hasFileUploaded\n          && this.$store.state.dataMapping.hasFormatTypeSpecified\n          && this.$store.state.dataMapping.hasTableTypeSelected\n          && this.$store.state.dataMapping.hasHeaderSpecified\n          && this.$store.state.dataMapping.hasPredefinedSpecified\n          && this.$store.state.dataMapping.hasVersionIdSpecified;\n      },\n      uploaded: function () {\n        return this.$store.state.dataMapping.hasFileUploaded;\n      },\n      isReadyForUpload: function () {\n        return this.$store.state.dataMapping.hasFormatTypeSpecified\n         && this.$store.state.dataMapping.hasTableTypeSelected\n         && this.$store.state.dataMapping.hasHeaderSpecified\n         && this.$store.state.dataMapping.hasPredefinedSwitchSpecified\n         && this.$store.state.dataMapping.hasVersionIdSpecified;\n      },\n      isReadyForChoosing: function () {\n        return this.$store.state.dataMapping.hasTableTypeSelected;\n      }\n    },\n    methods: {\n      querySearch(queryString, cb) {\n        // convert to array of string\n        var links = this.$store.state.presentation.versionList.map(v => v.versionId);\n        // function to remove duplicate from array of string\n        let reduceFunction = (links) => links.filter((v,i) => links.indexOf(v) === i );\n        links = reduceFunction(links);\n        links = links.map(v => { return { \"value\" : v} });\n        var results = queryString ? links.filter(this.createFilter(queryString)) : links;\n        cb(results);\n      },\n      createFilter(queryString) {\n        return (link) => {\n          return (link.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\n        };\n      },\n      navigateToHomePage() {\n        this.$router.replace(\"/home\");\n      },\n      fileUploadHandler: function (file) {\n        // show loading and go parsing\n        this.$store.commit(\"setPageLoadingStatus\", true);\n\n        // if versionList is empty\n        // console.log(this.$store.state.presentation.versionList);\n        // filter by \"AuthorRecord\" \"ReviewRecord\" \"SubmissionRecord\"\n        if (!this.$store.state.presentation.versionList) {\n          this.$store.commit(\"setIsNewVersion\", false);\n        } else {\n          // if tabletype 0 author elif 1 review elif 2 sub\n          // filter by \"AuthorRecord\" \"ReviewRecord\" \"SubmissionRecord\"\n          var verList;\n          switch (this.$store.state.dataMapping.data.tableType) {\n            case 0:\n              verList = this.$store.state.presentation.versionList\n                        .filter(v => v.recordType === \"AuthorRecord\")\n                        .map(v => v.versionId);\n              break;\n            case 1:\n              verList = this.$store.state.presentation.versionList\n                        .filter(v => v.recordType === \"ReviewRecord\")\n                        .map(v => v.versionId);\n              break;\n            case 2:\n              verList = this.$store.state.presentation.versionList\n                        .filter(v => v.recordType === \"SubmissionRecord\")\n                        .map(v => v.versionId);\n              break;\n            default:\n          }\n          this.$store.commit(\"setIsNewVersion\", \n                            !verList.includes(this.$store.state.dataMapping.data.versionId));\n        }\n\n        /*  tabletype 1\t  1 - review \n            tabletype 0\t  2 - author\n            tabletype 2\t  3 - sub */\n        // map sub to sub// rev to rev // author to author if predefined mapping specified\n        if (this.$store.state.dataMapping.data.hasPredefined) {\n            switch(this.$store.state.dataMapping.data.tableType) {\n              case 0:\n                this.$store.commit(\"setPredefinedMapping\",\n                {id: 2, mapping: PredefinedMappings[2].mapping});\n                break;\n              case 1:\n                this.$store.commit(\"setPredefinedMapping\",\n                {id: 1, mapping: PredefinedMappings[1].mapping});\n                break;\n              case 2:\n                this.$store.commit(\"setPredefinedMapping\",\n                {id: 3, mapping: PredefinedMappings[3].mapping});\n                break;\n              default:\n            }\n        }\n        else {\n            this.$store.commit(\"setPredefinedMapping\",\n             {id: 0, mapping: PredefinedMappings[0].mapping});\n        }\n\n        Papa.parse(file.raw, {\n          // ignoring empty lines in csv file\n          skipEmptyLines: true,\n          complete: function (result) {\n          var res=result;\n          var res2=res.data;\n          var verId = this.$store.state.dataMapping.data.versionId;\n\n          //author file preprocessing\n          if( this.$store.state.dataMapping.data.tableType==\"0\" ){\n              var authorres=[];\n              //ACL file preprocessing //Softconf\n              if(this.$store.state.dataMapping.data.formatType==\"2\"){\n              authorres.push([\"submission #\",\"first name\",\"last name\",\"email\",\"country\",\"organization\",\"Web page\",\"person #\",\"corresponding?\"]);\n              // for each row of data, manipulate temporary array element[] \n              // then push to true array res2[] for parsing\n                for (var i = 1; i < res2.length; i++) {\n                  var x = res2[i];\n                  //console.log(x);\n                  var k=0,j=14,element=[],corr=\"\",country=\"\";\n                  while(x[j]!=\"\"){\n                    if(x[j]==x[65] && x[j+1]==x[66]){\n                    corr = \"yes\";\n                    country=x[78];\n                    }\n                    else {\n                    corr=\"no\";\n                    country=\"\";\n                    }\n                    element[k]= [x[0],x[j],x[j+1],x[j+2],country,x[j+3],\"\",\"\",corr, verId];\n                    authorres.push(element[k]);\n                    k+=1;\n                    j=14+k*5;\n                  }\n                //var element1=[x[0],x[14],x[15],x[16],\"\",x[17],\"\",\"\"];\n                }\n                res2=authorres;\n                //console.log(authorres)\n              }\n\n              //author anonymization - Both formats\n              var convertstring=require(\"convert-string\");\n              for(var m=1;m<res2.length;m++){\n                  var conv1=convertstring.stringToBytes(res2[m][1]);\n                  var conv2=convertstring.stringToBytes(res2[m][2]);\n                  var firstname=\"\";\n                  var lastname=\"\";\n                  for(var a=0;a<conv1.length;a++){\n                      firstname=firstname.concat(String(conv1[a]+18));\n                  }\n                  for(var w=0;w<conv2.length;w++){\n                      lastname=lastname.concat(String(conv2[w]+18));\n                  }\n                  res2[m][1]=firstname;\n                  res2[m][2]=lastname;\n              }\n              //console.log(res2);\n           }\n\n          //review file preprocessing\n          else if( this.$store.state.dataMapping.data.tableType==\"1\" ){\n              //Softconf\n              if(this.$store.state.dataMapping.data.formatType==\"2\"){\n                var reviewres=[];\n                reviewres.push([\"Review Id\",\"Submission Id\", \"Num Review Assignment\", \"Reviewer Name\", \"Expertise Level\", \"Review Comment\",\"Confidence Level\", \"Overall Evaluation Score\", \"Column 9\",\"Column 10\",\"Column 11\",\"Column 12\", \"Day of the Review Date\", \"Time of the Review Date\", \"Has Recommended for the Best Paper\"]);\n\n                for (var q = 1; q < res2.length; q++) {\n                    var z = res2[q];\n                    z[32]=\"confidence: \"+z[32];\n                    //console.log(typeof(z[7]));\n                    //var str=z[7].toString();\n                    var date_time=z[7].split(\" \");\n                    //console.log(date_time);\n                    var date=date_time[0];\n                    var time=date_time[1].split(\":\")[0]+\":\"+date_time[1].split(\":\")[1];\n                    //console.log(date,time);\n                    element=[\"\",z[0],\"\",\"\",\"\",z[38],z[32],z[31],\"\",\"\",\"\",\"\",date,time,\"\",verId];\n                    reviewres.push(element);\n                }\n                res2=reviewres;\n                //console.log(reviewres);\n              }\n\n              //author anonymization - JCDL\n              // Easy Chair\n              else if(this.$store.state.dataMapping.data.formatType==\"1\"){\n                var convert_string=require(\"convert-string\");\n                for(var index=1;index<res2.length;index++){\n                    var convert=convert_string.stringToBytes(res2[index][3]);\n                    var name=\"\";\n                    for(var idx=0;idx<convert.length;idx++){\n                        name=name.concat(String(convert[idx]+18));\n                    }\n                    res2[index][3]=name;\n                }\n              }\n            }\n\n           //ACL submission file processing\n          else if( this.$store.state.dataMapping.data.tableType==\"2\" ){\n              if(this.$store.state.dataMapping.data.formatType==\"2\"){\n              var submissionres=[];\n              submissionres.push([\"#\", \"track #\", \"track name\", \"title\", \"authors\", \"submitted\",\"last updated\", \"form fields\", \"keywords\", \"decision\", \"notified\", \"reviews sent\", \"abstract\"]);\n\n              for (var l = 1; l < res2.length; l++) {\n                var y = res2[l];\n                var dt = moment(y[10], \"D MMM YYYY HH:mm:ss\").format(\"YYYY-M-D H:m\");\n                if(y[6].includes(\"Reject\")){y[6]=\"reject\";}\n                else {y[6]=\"accept\";}\n                //console.log(x);\n                element=[y[0],\"\",y[4],y[2],y[3],dt,dt,\"\",y[13],y[6],\"\",\"\",y[9], verId];\n                submissionres.push(element);\n              }\n                res2=submissionres;\n              }\n          }\n\n          if(this.$store.state.dataMapping.data.formatType==\"1\"){\n            var tempCSV=[];\n            //author\n            if( this.$store.state.dataMapping.data.tableType==\"0\" ){\n              tempCSV.push([\"submission #\",\"first name\",\"last name\",\"email\",\"country\",\"organization\",\"Web page\",\"person #\",\"corresponding?\"]);\n            }\n            //review\n            else if(this.$store.state.dataMapping.data.tableType==\"1\"){\n              tempCSV.push([\"Review Id\",\"Submission Id\", \"Num Review Assignment\", \"Reviewer Name\", \"Expertise Level\", \"Review Comment\",\"Confidence Level\", \"Overall Evaluation Score\", \"Column 9\",\"Column 10\",\"Column 11\",\"Column 12\", \"Day of the Review Date\", \"Time of the Review Date\", \"Has Recommended for the Best Paper\"]);\n            }\n            //submission\n            else if(this.$store.state.dataMapping.data.tableType==\"2\"){\n              tempCSV.push([\"#\", \"track #\", \"track name\", \"title\", \"authors\", \"submitted\",\"last updated\", \"form fields\", \"keywords\", \"decision\", \"notified\", \"reviews sent\", \"abstract\"]);\n            }\n            // for each row of data, manipulate temporary array element[] \n            // then push to true array res2[] for parsing\n            var csvRow=[];\n            for (var rowNum = 1; rowNum < res2.length; rowNum++) {\n                csvRow = res2[rowNum];\n                //csvRow.push(verId);\n                tempCSV.push(csvRow);\n            }\n            res2=tempCSV;\n          }\n            //console.log(res2);\n            this.$store.commit(\"setUploadedFile\",res2);\n            this.$store.commit(\"setPageLoadingStatus\", false);\n          }.bind(this)\n        });\n      }\n    },\n    components: {\n      MappingTool\n    }\n  };\n</script>\n\n<style scoped>\n  .upload-box {\n    /*padding-top: 100px; */\n  }\n\n  .upload-box .el-select {\n    margin-top: 20px;\n  }\n\n  .button-row {\n    margin-top: 30px;\n  }\n\n  .text {\n    font-size: 14px;\n  }\n\n  .item {\n    margin-bottom: 18px;\n  }\n\n  .clearfix:before,\n  .clearfix:after {\n    display: table;\n    content: \"\";\n  }\n  \n  .clearfix:after {\n    clear: both\n  }\n\n  .box-card {\n    width: 480px;\n    position: relative;\n    left: 50%;\n    margin-left: -240px;\n  }\n\n  .autocomplete-verid {\n    position: relative;\n  }\n\n  .form-card {\n    margin: 16px 0px;\n  }\n\n  .section {\n    padding: 0px 16px 16px 16px;\n  }\n</style>\n"],"sourceRoot":"src/views"}]}