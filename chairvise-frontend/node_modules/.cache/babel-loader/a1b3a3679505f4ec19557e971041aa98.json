{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\chart\\DependencyChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\chart\\DependencyChart.vue","mtime":1592326138000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\nimport { Chart } from \"highcharts-vue\";\nimport Highcharts from \"highcharts\";\nimport dependencyInit from \"highcharts/modules/dependency-wheel\";\nimport sanKeyInit from \"highcharts/modules/sankey\";\nimport exporting from \"highcharts/modules/exporting\";\nexporting(Highcharts);\nsanKeyInit(Highcharts);\ndependencyInit(Highcharts);\nexport default {\n  name: \"DependencyChart\",\n  props: {\n    chartData: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      // default chart settings\n      chartOptions: {\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: \"\"\n        },\n        series: [{\n          keys: [\"from\", \"to\", \"weight\"],\n          data: [],\n          type: \"dependencywheel\",\n          name: \"Dependency wheel series\",\n          dataLabels: {\n            color: \"#333\",\n            textPath: {\n              enabled: true,\n              attributes: {\n                dy: 5\n              }\n            },\n            distance: 10\n          },\n          size: \"95%\"\n        }]\n      }\n    };\n  },\n  components: {\n    highcharts: Chart\n  },\n  watch: {\n    chartData: function chartData() {\n      this.renderDependencyChart(this.chartData);\n    }\n  },\n  mounted: function mounted() {\n    this.renderDependencyChart(this.chartData);\n  },\n  methods: {\n    // pass the extract data from query and pass it into the chart\n    renderDependencyChart: function renderDependencyChart(chartData) {\n      var chart = this.$refs.highcharts.chart;\n      var xField1 = [];\n      var xField2 = [];\n      var submissionCount = []; // get the submission for each row i from query data\n\n      chartData.datasets[0].data.map(function (data) {\n        submissionCount.push(data);\n      }); // get the xField1 name for row i from query data\n\n      chartData.labels.map(function (data) {\n        xField1.push(data);\n      }); // get the xField2 name for row i from query data\n\n      chartData.labels2.map(function (data) {\n        xField2.push(data);\n      }); // put each row i extracted from query data into the chart\n\n      var seriesData = [];\n\n      for (var i = 0; i < xField1.length; i++) {\n        seriesData.push([xField1[i], xField2[i], submissionCount[i]]);\n      } // set the chart data\n\n\n      chart.series[0].setData(seriesData, true);\n    }\n  }\n};",{"version":3,"sources":["DependencyChart.vue"],"names":[],"mappings":";;;;AAKA,SAAA,KAAA,QAAA,gBAAA;AACA,OAAA,UAAA,MAAA,YAAA;AACA,OAAA,cAAA,MAAA,qCAAA;AACA,OAAA,UAAA,MAAA,2BAAA;AACA,OAAA,SAAA,MAAA,8BAAA;AACA,SAAA,CAAA,UAAA,CAAA;AACA,UAAA,CAAA,UAAA,CAAA;AACA,cAAA,CAAA,UAAA,CAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AADA,GAFA;AAQA,EAAA,IARA,kBAQA;AACA,WAAA;AACA;AACA,MAAA,YAAA,EAAA;AACA,QAAA,SAAA,EAAA;AACA,UAAA,OAAA,EAAA;AADA,SADA;AAIA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA;AADA,SAJA;AAOA,QAAA,MAAA,EAAA,CACA;AACA,UAAA,IAAA,EAAA,CAAA,MAAA,EAAA,IAAA,EAAA,QAAA,CADA;AAEA,UAAA,IAAA,EAAA,EAFA;AAIA,UAAA,IAAA,EAAA,iBAJA;AAMA,UAAA,IAAA,EAAA,yBANA;AAOA,UAAA,UAAA,EAAA;AACA,YAAA,KAAA,EAAA,MADA;AAEA,YAAA,QAAA,EAAA;AACA,cAAA,OAAA,EAAA,IADA;AAEA,cAAA,UAAA,EAAA;AACA,gBAAA,EAAA,EAAA;AADA;AAFA,aAFA;AAQA,YAAA,QAAA,EAAA;AARA,WAPA;AAiBA,UAAA,IAAA,EAAA;AAjBA,SADA;AAPA;AAFA,KAAA;AAgCA,GAzCA;AA0CA,EAAA,UAAA,EAAA;AACA,IAAA,UAAA,EAAA;AADA,GA1CA;AA6CA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,WAAA,qBAAA,CAAA,KAAA,SAAA;AACA;AAHA,GA7CA;AAkDA,EAAA,OAlDA,qBAkDA;AACA,SAAA,qBAAA,CAAA,KAAA,SAAA;AACA,GApDA;AAqDA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,qBAFA,iCAEA,SAFA,EAEA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,UAAA,CAAA,KAAA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,eAAA,GAAA,EAAA,CAJA,CAMA;;AACA,MAAA,SAAA,CAAA,QAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,eAAA,CAAA,IAAA,CAAA,IAAA;AACA,OAFA,EAPA,CAUA;;AACA,MAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,IAAA;AACA,OAFA,EAXA,CAcA;;AACA,MAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,IAAA;AACA,OAFA,EAfA,CAmBA;;AACA,UAAA,UAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,OAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,UAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAAA,CAAA,EAAA,eAAA,CAAA,CAAA,CAAA,CAAA;AACA,OAvBA,CAwBA;;;AACA,MAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,OAAA,CAAA,UAAA,EAAA,IAAA;AACA;AA5BA;AArDA,CAAA","sourcesContent":["<template>\r\n  <highcharts :options=\"chartOptions\" ref=\"highcharts\"></highcharts>\r\n</template>\r\n\r\n<script>\r\nimport { Chart } from \"highcharts-vue\";\r\nimport Highcharts from \"highcharts\";\r\nimport dependencyInit from \"highcharts/modules/dependency-wheel\";\r\nimport sanKeyInit from \"highcharts/modules/sankey\";\r\nimport exporting from \"highcharts/modules/exporting\";\r\nexporting(Highcharts);\r\nsanKeyInit(Highcharts);\r\ndependencyInit(Highcharts);\r\n\r\nexport default {\r\n  name: \"DependencyChart\",\r\n  props: {\r\n    chartData: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      // default chart settings\r\n      chartOptions: {\r\n        exporting: {\r\n          enabled: false\r\n        },\r\n        title: {\r\n          text: \"\"\r\n        },\r\n        series: [\r\n          {\r\n            keys: [\"from\", \"to\", \"weight\"],\r\n            data: [],\r\n\r\n            type: \"dependencywheel\",\r\n\r\n            name: \"Dependency wheel series\",\r\n            dataLabels: {\r\n              color: \"#333\",\r\n              textPath: {\r\n                enabled: true,\r\n                attributes: {\r\n                  dy: 5\r\n                }\r\n              },\r\n              distance: 10\r\n            },\r\n            size: \"95%\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  components: {\r\n    highcharts: Chart\r\n  },\r\n  watch: {\r\n    chartData() {\r\n      this.renderDependencyChart(this.chartData);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.renderDependencyChart(this.chartData);\r\n  },\r\n  methods: {\r\n    // pass the extract data from query and pass it into the chart\r\n    renderDependencyChart(chartData) {\r\n      let chart = this.$refs.highcharts.chart;\r\n      var xField1 = [];\r\n      var xField2 = [];\r\n      var submissionCount = [];\r\n\r\n      // get the submission for each row i from query data\r\n      chartData.datasets[0].data.map(data => {\r\n        submissionCount.push(data);\r\n      });\r\n      // get the xField1 name for row i from query data\r\n      chartData.labels.map(data => {\r\n        xField1.push(data);\r\n      });\r\n      // get the xField2 name for row i from query data\r\n      chartData.labels2.map(data => {\r\n        xField2.push(data);\r\n      });\r\n\r\n      // put each row i extracted from query data into the chart\r\n      var seriesData = [];\r\n      for (var i = 0; i < xField1.length; i++) {\r\n        seriesData.push([xField1[i], xField2[i], submissionCount[i]]);\r\n      }\r\n      // set the chart data\r\n      chart.series[0].setData(seriesData, true);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"sourceRoot":"src/components/sectionDetail/chart"}]}