{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BasicSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BasicSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { deepCopy } from \"@/common/utility\";\nexport default {\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    },\n    hasData: {\n      type: Boolean,\n      required: true\n    },\n    extraFormItemsRules: {\n      type: Object,\n      required: false\n    },\n    editFormSelectionsRule: {\n      type: Array,\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    },\n    editFormInvolvedRecordsRule: {\n      type: Array,\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    },\n    editFormFiltersRule: {\n      type: Array,\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    },\n    editFormJoinersRule: {\n      type: Array,\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    },\n    editFormGroupersRule: {\n      type: Array,\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    },\n    editFormSortersRule: {\n      type: Array,\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  watch: {\n    'version': function version() {\n      if (this.isEditing == true) {\n        this.previewAnalysisResult('editForm');\n      } else {\n        this.sendAnalysisRequest();\n      }\n    }\n  },\n  created: function created() {\n    this.syncDataWithProps();\n    this.sendAnalysisRequest();\n  },\n  data: function data() {\n    return {\n      isInAdvancedMode: false,\n      isEditing: false,\n      editForm: {\n        title: '',\n        description: '',\n        dataSet: '',\n        selections: [],\n        involvedRecords: [],\n        filters: [],\n        joiners: [],\n        groupers: [],\n        sorters: [],\n        extraData: {}\n      },\n      editFormRule: {\n        involvedRecords: this.editFormInvolvedRecordsRule,\n        groupers: this.editFormGroupersRule,\n        extraData: this.extraFormItemsRules\n      }\n    };\n  },\n  computed: {\n    involvedRecordsOptions: function involvedRecordsOptions() {\n      return this.$store.state.dbMetaData.entities.map(function (entity) {\n        return {\n          label: entity.name,\n          value: entity.tableName\n        };\n      });\n    },\n    editFormInvolvedRecords: function editFormInvolvedRecords() {\n      var _this = this;\n\n      return this.editForm.involvedRecords.map(function (r) {\n        return {\n          name: r,\n          customized: !_this.$store.state.dbMetaData.entities.some(function (e) {\n            return e.tableName === r;\n          })\n        };\n      });\n    },\n    filtersFieldOptions: function filtersFieldOptions() {\n      var _this2 = this;\n\n      return this.$store.state.dbMetaData.entities.filter(function (entity) {\n        return _this2.editForm.involvedRecords.includes(entity.tableName);\n      }).map(function (entity) {\n        return {\n          label: entity.name,\n          options: entity.fieldMetaDataList.map(function (field) {\n            return {\n              label: field.name,\n              value: field.fieldName\n            };\n          })\n        };\n      });\n    },\n    joinersFieldOptions: function joinersFieldOptions() {\n      return this.filtersFieldOptions;\n    },\n    groupersFieldOptions: function groupersFieldOptions() {\n      return this.filtersFieldOptions;\n    },\n    isPresentationEditable: function isPresentationEditable() {\n      return this.$store.state.presentation.isPresentationEditable;\n    }\n  },\n  methods: {\n    changeEditMode: function changeEditMode(isEditing) {\n      this.isEditing = isEditing;\n    },\n    cancelEditing: function cancelEditing() {\n      this.isEditing = false;\n      this.syncDataWithProps();\n      this.sendAnalysisRequest();\n    },\n    syncDataWithProps: function syncDataWithProps() {\n      this.editForm.title = this.sectionDetail.title;\n      this.editForm.description = this.sectionDetail.description;\n      this.editForm.dataSet = this.sectionDetail.dataSet;\n      this.editForm.selections = deepCopy(this.sectionDetail.selections); // deep copy\n\n      this.editForm.involvedRecords = this.sectionDetail.involvedRecords.map(function (r) {\n        return r.name;\n      });\n      this.editForm.filters = this.sectionDetail.filters.map(function (f) {\n        return Object.assign({}, f);\n      });\n      this.editForm.joiners = this.sectionDetail.joiners.map(function (f) {\n        return Object.assign({}, f);\n      });\n      this.editForm.groupers = this.sectionDetail.groupers.map(function (r) {\n        return r.field;\n      });\n      this.editForm.sorters = deepCopy(this.sectionDetail.sorters); // deep copy\n\n      this.editForm.extraData = deepCopy(this.sectionDetail.extraData); // deep copy\n    },\n    addSelection: function addSelection() {\n      this.editForm.selections.push({\n        expression: '',\n        rename: ''\n      });\n    },\n    removeSelection: function removeSelection(selection) {\n      var index = this.editForm.selections.indexOf(selection);\n      this.editForm.selections.splice(index, 1);\n    },\n    addJoiner: function addJoiner() {\n      this.editForm.joiners.push({\n        left: '',\n        right: ''\n      });\n    },\n    removeJoiner: function removeJoiner(joiner) {\n      var index = this.editForm.joiners.indexOf(joiner);\n      this.editForm.joiners.splice(index, 1);\n    },\n    addFilter: function addFilter() {\n      this.editForm.filters.push({\n        field: '',\n        comparator: '=',\n        value: ''\n      });\n    },\n    removeFilter: function removeFilter(filter) {\n      var index = this.editForm.filters.indexOf(filter);\n      this.editForm.filters.splice(index, 1);\n    },\n    addSorter: function addSorter() {\n      this.editForm.sorters.push({\n        field: '',\n        order: ''\n      });\n    },\n    removeSorter: function removeSorter(sorter) {\n      var index = this.editForm.sorters.indexOf(sorter);\n      this.editForm.sorters.splice(index, 1);\n    },\n    saveSectionDetail: function saveSectionDetail(formName) {\n      var _this3 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          _this3.$store.dispatch('saveSectionDetail', {\n            id: _this3.sectionDetail.id,\n            presentationId: _this3.presentationId,\n            title: _this3.editForm.title,\n            description: _this3.editForm.description,\n            dataSet: _this3.sectionDetail.dataSet,\n            selections: _this3.editForm.selections,\n            involvedRecords: deepCopy(_this3.editFormInvolvedRecords),\n            filters: _this3.editForm.filters.map(function (f) {\n              return Object.assign({}, f);\n            }),\n            joiners: _this3.editForm.joiners.map(function (j) {\n              return Object.assign({}, j);\n            }),\n            groupers: _this3.editForm.groupers.map(function (g) {\n              return {\n                field: g\n              };\n            }),\n            sorters: _this3.editForm.sorters.map(function (s) {\n              return Object.assign({}, s);\n            }),\n            extraData: _this3.editForm.extraData\n          }).then(function () {\n            // only update when there is no error in saving\n            if (_this3.sectionDetail.status.isApiError) {\n              return;\n            }\n\n            _this3.isEditing = false;\n\n            _this3.sendAnalysisRequest();\n          });\n\n          return true;\n        } else {\n          return false;\n        }\n      });\n    },\n    deleteSectionDetail: function deleteSectionDetail() {\n      this.$store.dispatch('deleteSectionDetail', {\n        presentationId: this.presentationId,\n        id: this.sectionDetail.id\n      });\n    },\n    previewAnalysisResult: function previewAnalysisResult(formName) {\n      var _this4 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (!valid) {\n          return false;\n        }\n\n        _this4.$store.dispatch('sendPreviewAnalysisRequest', {\n          presentationId: _this4.presentationId,\n          id: _this4.sectionDetail.id,\n          dataSet: _this4.sectionDetail.dataSet,\n          selections: _this4.editForm.selections,\n          involvedRecords: _this4.editFormInvolvedRecords,\n          filters: _this4.editForm.filters,\n          joiners: _this4.editForm.joiners.map(function (j) {\n            return Object.assign({}, j);\n          }),\n          groupers: _this4.editForm.groupers.map(function (g) {\n            return {\n              field: g\n            };\n          }),\n          sorters: _this4.editForm.sorters.map(function (s) {\n            return Object.assign({}, s);\n          }),\n          versionId: _this4.version\n        }).then(function () {\n          _this4.$emit('update-visualisation', {\n            selections: _this4.editForm.selections,\n            involvedRecords: _this4.editFormInvolvedRecords,\n            filters: _this4.editForm.filters.map(function (f) {\n              return Object.assign({}, f);\n            }),\n            joiners: _this4.editForm.joiners.map(function (j) {\n              return Object.assign({}, j);\n            }),\n            groupers: _this4.editForm.groupers.map(function (g) {\n              return {\n                field: g\n              };\n            }),\n            sorters: _this4.editForm.sorters.map(function (s) {\n              return Object.assign({}, s);\n            }),\n            result: _this4.sectionDetail.previewResult,\n            extraData: _this4.editForm.extraData\n          });\n        });\n      });\n    },\n    sendAnalysisRequest: function sendAnalysisRequest() {\n      var _this5 = this;\n\n      this.$store.dispatch('sendAnalysisRequest', {\n        id: this.sectionDetail.id,\n        presentationId: this.presentationId,\n        version: this.version\n      }).then(function () {\n        _this5.$emit('update-visualisation', {\n          presentationId: _this5.presentationId,\n          selections: _this5.sectionDetail.selections,\n          involvedRecords: _this5.sectionDetail.involvedRecords,\n          filters: _this5.sectionDetail.filters,\n          joiners: _this5.sectionDetail.joiners,\n          result: _this5.sectionDetail.result,\n          groupers: _this5.sectionDetail.groupers,\n          sorters: _this5.sectionDetail.sorters,\n          extraData: _this5.sectionDetail.extraData,\n          versionId: _this5.version\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["BasicSectionDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <el-row v-loading=\"sectionDetail.status.isLoading\">\n    <el-form status-icon ref=\"editForm\" label-position=\"left\" :model=\"editForm\" label-width=\"170px\"\n             :rules=\"editFormRule\">\n      <div class=\"title\" v-if=\"!isEditing\">\n        {{ sectionDetail.title }}\n        <el-button type=\"primary\" @click=\"changeEditMode(true)\" v-if=\"isPresentationEditable\" icon=\"el-icon-edit\">\n          Edit\n        </el-button>\n        <el-button type=\"danger\" icon=\"el-icon-delete\"  @click=\"deleteSectionDetail\"\n                   v-if=\"isPresentationEditable\">\n          Delete\n        </el-button>\n      </div>\n      <div class=\"title\" v-else>\n        <el-input v-model=\"editForm.title\"></el-input>\n      </div>\n      <el-alert\n        v-if=\"sectionDetail.status.isApiError\"\n        :title=\"sectionDetail.status.apiErrorMsg\"\n        :description=\"sectionDetail.status.apiErrorMsgDetail\"\n        show-icon\n        type=\"error\"\n        class=\"errorMessage\">\n      </el-alert>\n      <el-alert\n        v-if=\"!this.hasData\"\n        title=\"No Data to display\"\n        type=\"info\"\n        class=\"noDataToDisplay\"\n      >\n      </el-alert>\n      <slot v-else></slot>\n      <div v-if=\"!isEditing\" class=\"description\">{{ editForm.description }}</div>\n      <div v-if=\"isEditing\">\n\n        <el-form-item label=\"Editing Mode\">\n          <el-switch\n            v-model=\"isInAdvancedMode\"\n            active-text=\"Advanced\"\n            inactive-text=\"Basic\">\n          </el-switch>\n        </el-form-item>\n\n        <el-form-item v-if=\"isInAdvancedMode\" v-for=\"(selection, index) in editForm.selections\"\n                      :label=\"'Selection ' + index\"\n                      :key=\"'s' + index\"\n                      :prop=\"'selections.' + index\" :rules=\"editFormSelectionsRule\">\n          <el-input v-model=\"selection.expression\" placeholder=\"Expression\" style=\"width: 300px\"></el-input>&nbsp;\n          <el-input v-model=\"selection.rename\" placeholder=\"Rename Field\" style=\"width: 200px\"></el-input>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeSelection(selection)\"></el-button>\n        </el-form-item>\n\n        <el-form-item label=\"Record Involved\" prop=\"involvedRecords\" v-if=\"isInAdvancedMode\" key=\"involvedRecords\">\n          <el-select v-model=\"editForm.involvedRecords\" multiple placeholder=\"Please select\" filterable allow-create>\n            <el-option\n              v-for=\"option in involvedRecordsOptions\"\n              :key=\"option.value\"\n              :label=\"option.label\"\n              :value=\"option.value\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item v-if=\"isInAdvancedMode\" v-for=\"(joiner, index) in editForm.joiners\" :label=\"'Joiner ' + index\"\n                      :key=\"'j' + index\"\n                      :prop=\"'joiners.' + index\" :rules=\"editFormJoinersRule\">\n          On\n          <el-select placeholder=\"Left\" v-model=\"joiner.left\">\n            <el-option-group\n              v-for=\"group in joinersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>\n          Equals\n          <el-select placeholder=\"Right\" v-model=\"joiner.right\">\n            <el-option-group\n              v-for=\"group in joinersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeJoiner(joiner)\"></el-button>\n        </el-form-item>\n\n        <el-form-item v-for=\"(filter, index) in editForm.filters\" :label=\"'Filter ' + index\"\n                      :key=\"'f' + index\"\n                      :prop=\"'filters.' + index\" :rules=\"editFormFiltersRule\">\n          <el-select placeholder=\"Field\" v-model=\"filter.field\" filterable allow-create>\n            <el-option-group\n              v-for=\"group in filtersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>&nbsp;\n          <el-select v-model=\"filter.comparator\" style=\"width: 80px\">\n            <el-option label=\">\" value=\">\"/>\n            <el-option label=\"=\" value=\"=\"/>\n            <el-option label=\"<\" value=\"<\"/>\n          </el-select>&nbsp;\n          <el-input v-model=\"filter.value\" placeholder=\"Value\" style=\"width: 200px\"></el-input>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeFilter(filter)\"></el-button>\n        </el-form-item>\n\n        <el-form-item label=\"Description for the section\">\n          <el-input\n            type=\"textarea\"\n            :autosize=\"{ minRows: 4 }\"\n            placeholder=\"Please enter description (Leave empty to hide the description part)\"\n            v-model=\"editForm.description\">\n          </el-input>\n        </el-form-item>\n\n        <el-form-item label=\"Group (Aggregation)\" prop=\"groupers\" v-if=\"isInAdvancedMode\" key=\"groupers\">\n          <el-select placeholder=\"Groupers\" v-model=\"editForm.groupers\"\n                     style=\"width: 100%\"\n                     multiple\n                     filterable\n                     allow-create>\n            <el-option-group\n              v-for=\"group in groupersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>&nbsp;\n        </el-form-item>\n\n        <el-form-item v-if=\"isInAdvancedMode\" v-for=\"(sorter, index) in editForm.sorters\" :label=\"'Sorting ' + index\"\n                      :key=\"'sort' + index\"\n                      :prop=\"'sorters.' + index\" :rules=\"editFormSortersRule\">\n          <el-input v-model=\"sorter.field\" placeholder=\"Field to Sort\" style=\"width: 300px\"></el-input>&nbsp;\n          <el-select v-model=\"sorter.order\" style=\"width: 80px\" placeholder=\"Order\">\n            <el-option label=\"Big to Small\" value=\"DESC\"/>\n            <el-option label=\"Small to Big\" value=\"ASC\"/>\n          </el-select>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeSorter(sorter)\"></el-button>\n        </el-form-item>\n\n        <slot name=\"extraFormItems\" :editForm=\"editForm\" :extraData=\"editForm.extraData\"\n              :isInAdvancedMode=\"isInAdvancedMode\"></slot>\n        <el-form-item>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addSelection\" v-if=\"isInAdvancedMode\">Add selection</el-button>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addJoiner\" v-if=\"isInAdvancedMode\">Add joiner</el-button>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addFilter\">Add filter</el-button>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addSorter\" v-if=\"isInAdvancedMode\">Add sorting</el-button>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-view\" @click=\"previewAnalysisResult('editForm')\" plain>Preview</el-button>\n          <el-button type=\"success\" icon=\"el-icon-check\" @click=\"saveSectionDetail('editForm')\">Save</el-button>\n          <el-button icon=\"el-icon-close\" @click=\"cancelEditing\">Cancel</el-button>\n        </el-form-item>\n      </div>\n    </el-form>\n  </el-row>\n</template>\n\n<script>\n  import {deepCopy} from \"@/common/utility\"\n\n  export default {\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      },\n      hasData: {\n        type: Boolean,\n        required: true\n      },\n      extraFormItemsRules: {\n        type: Object,\n        required: false\n      },\n      editFormSelectionsRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormInvolvedRecordsRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormFiltersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormJoinersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormGroupersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormSortersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n\n    },\n    watch: {\n      'version'() {\n        if (this.isEditing == true) {\n          this.previewAnalysisResult('editForm');\n        }\n        else {\n          this.sendAnalysisRequest();\n        }\n      }\n    },\n    created() {\n      this.syncDataWithProps();\n      this.sendAnalysisRequest();\n    },\n\n    data() {\n      return {\n        isInAdvancedMode: false,\n        isEditing: false,\n\n        editForm: {\n          title: '',\n          description: '',\n          dataSet: '',\n          selections: [],\n          involvedRecords: [],\n          filters: [],\n          joiners: [],\n          groupers: [],\n          sorters: [],\n          extraData: {}\n        },\n\n        editFormRule: {\n          involvedRecords: this.editFormInvolvedRecordsRule,\n          groupers: this.editFormGroupersRule,\n          extraData: this.extraFormItemsRules\n        },\n\n      }\n    },\n\n    computed: {\n      involvedRecordsOptions() {\n        return this.$store.state.dbMetaData.entities.map(entity => ({\n          label: entity.name,\n          value: entity.tableName\n        }))\n      },\n      editFormInvolvedRecords() {\n        return this.editForm.involvedRecords.map(r => ({\n          name: r,\n          customized: !this.$store.state.dbMetaData.entities.some(e => e.tableName === r)\n        }))\n      },\n      filtersFieldOptions() {\n        return this.$store.state.dbMetaData.entities\n          .filter(entity => this.editForm.involvedRecords.includes(entity.tableName))\n          .map(entity => ({\n            label: entity.name,\n            options: entity.fieldMetaDataList.map(field => ({\n              label: field.name,\n              value: field.fieldName\n            }))\n          }))\n      },\n      joinersFieldOptions() {\n        return this.filtersFieldOptions;\n      },\n      groupersFieldOptions() {\n        return this.filtersFieldOptions;\n      },\n      isPresentationEditable() {\n        return this.$store.state.presentation.isPresentationEditable;\n      }\n    },\n\n    methods: {\n      changeEditMode(isEditing) {\n        this.isEditing = isEditing;\n      },\n\n      cancelEditing() {\n        this.isEditing = false;\n        this.syncDataWithProps();\n        this.sendAnalysisRequest();\n      },\n\n      syncDataWithProps() {\n        this.editForm.title = this.sectionDetail.title;\n        this.editForm.description = this.sectionDetail.description;\n        this.editForm.dataSet = this.sectionDetail.dataSet;\n        this.editForm.selections = deepCopy(this.sectionDetail.selections); // deep copy\n        this.editForm.involvedRecords = this.sectionDetail.involvedRecords.map(r => r.name);\n        this.editForm.filters = this.sectionDetail.filters.map(f => Object.assign({}, f));\n        this.editForm.joiners = this.sectionDetail.joiners.map(f => Object.assign({}, f));\n        this.editForm.groupers = this.sectionDetail.groupers.map(r => r.field);\n        this.editForm.sorters = deepCopy(this.sectionDetail.sorters); // deep copy\n        this.editForm.extraData = deepCopy(this.sectionDetail.extraData) // deep copy\n      },\n\n      addSelection() {\n        this.editForm.selections.push({\n          expression: '',\n          rename: '',\n        })\n      },\n\n      removeSelection(selection) {\n        let index = this.editForm.selections.indexOf(selection);\n        this.editForm.selections.splice(index, 1)\n      },\n\n      addJoiner() {\n        this.editForm.joiners.push({\n          left: '',\n          right: '',\n        })\n      },\n\n      removeJoiner(joiner) {\n        let index = this.editForm.joiners.indexOf(joiner);\n        this.editForm.joiners.splice(index, 1)\n      },\n\n      addFilter() {\n        this.editForm.filters.push({\n          field: '',\n          comparator: '=',\n          value: '',\n        })\n      },\n\n      removeFilter(filter) {\n        let index = this.editForm.filters.indexOf(filter);\n        this.editForm.filters.splice(index, 1)\n      },\n\n      addSorter() {\n        this.editForm.sorters.push({\n          field: '',\n          order: '',\n        })\n      },\n\n      removeSorter(sorter) {\n        let index = this.editForm.sorters.indexOf(sorter);\n        this.editForm.sorters.splice(index, 1)\n      },\n\n      saveSectionDetail(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (valid) {\n            this.$store.dispatch('saveSectionDetail', {\n              id: this.sectionDetail.id,\n              presentationId: this.presentationId,\n              title: this.editForm.title,\n              description: this.editForm.description,\n              dataSet: this.sectionDetail.dataSet,\n              selections: this.editForm.selections,\n              involvedRecords: deepCopy(this.editFormInvolvedRecords),\n              filters: this.editForm.filters.map(f => Object.assign({}, f)),\n              joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n              groupers: this.editForm.groupers.map(g => ({field: g})),\n              sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n              extraData: this.editForm.extraData\n            })\n              .then(() => {\n                // only update when there is no error in saving\n                if (this.sectionDetail.status.isApiError) {\n                  return\n                }\n                this.isEditing = false;\n                this.sendAnalysisRequest();\n              });\n            return true;\n          } else {\n            return false;\n          }\n        });\n      },\n\n      deleteSectionDetail() {\n        this.$store.dispatch('deleteSectionDetail', {\n          presentationId: this.presentationId,\n          id: this.sectionDetail.id\n        });\n      },\n\n      previewAnalysisResult(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (!valid) {\n            return false;\n          }\n\n          this.$store.dispatch('sendPreviewAnalysisRequest', {\n            presentationId: this.presentationId,\n            id: this.sectionDetail.id,\n            dataSet: this.sectionDetail.dataSet,\n            selections: this.editForm.selections,\n            involvedRecords: this.editFormInvolvedRecords,\n            filters: this.editForm.filters,\n            joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n            groupers: this.editForm.groupers.map(g => ({field: g})),\n            sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n            versionId: this.version\n          })\n            .then(() => {\n              this.$emit('update-visualisation', {\n                selections: this.editForm.selections,\n                involvedRecords: this.editFormInvolvedRecords,\n                filters: this.editForm.filters.map(f => Object.assign({}, f)),\n                joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n                groupers: this.editForm.groupers.map(g => ({field: g})),\n                sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n                result: this.sectionDetail.previewResult,\n                extraData: this.editForm.extraData\n              });\n            })\n        });\n      },\n\n      sendAnalysisRequest() {\n        this.$store.dispatch('sendAnalysisRequest', {id: this.sectionDetail.id, presentationId: this.presentationId, version: this.version})\n          .then(() => {\n            this.$emit('update-visualisation', {\n              presentationId: this.presentationId,\n              selections: this.sectionDetail.selections,\n              involvedRecords: this.sectionDetail.involvedRecords,\n              filters: this.sectionDetail.filters,\n              joiners: this.sectionDetail.joiners,\n              result: this.sectionDetail.result,\n              groupers: this.sectionDetail.groupers,\n              sorters: this.sectionDetail.sorters,\n              extraData: this.sectionDetail.extraData,\n              versionId: this.version\n            });\n          })\n      },\n    },\n  }\n</script>\n\n<style scoped>\n  .title {\n    font-size: 20px;\n    text-align: center;\n    margin-bottom: 10px;\n    margin-top: 10px;\n  }\n\n  .description {\n    margin-top: 20px;\n    padding-left: 50px;\n    padding-right: 50px;\n  }\n\n  .noDataToDisplay {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  .errorMessage {\n    margin-top: 10px;\n  }\n</style>"],"sourceRoot":"src/components/sectionDetail"}]}