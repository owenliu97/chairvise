{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\PresentationSection.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\PresentationSection.vue","mtime":1591979968000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ChartJsPluginDataLabels from 'chartjs-plugin-datalabels';\nimport AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\";\nimport { ID_NEW_PRESENTATION } from \"@/common/const\";\nimport SectionListPanel from \"@/components/SectionListPanel.vue\";\nimport PredefinedQueries from \"@/store/data/predefinedQueries\";\nimport PresentationBrief from \"@/components/PresentationBrief.vue\";\nexport default {\n  props: {\n    id: String\n  },\n  data: function data() {\n    return {\n      selectedNewSection: '',\n      presentationId: ''\n    };\n  },\n  computed: {\n    isLogin: function isLogin() {\n      return this.$store.state.userInfo.isLogin;\n    },\n    isPresentationEditable: function isPresentationEditable() {\n      return this.$store.state.presentation.isPresentationEditable;\n    },\n    predefinedSections: function predefinedSections() {\n      var sectionOptionsGroup = {}; // grouping the predefined queries\n\n      for (var key in PredefinedQueries) {\n        if (!PredefinedQueries.hasOwnProperty(key)) {\n          continue;\n        }\n\n        var groupName = PredefinedQueries[key].group;\n\n        if (sectionOptionsGroup[groupName] === undefined) {\n          sectionOptionsGroup[groupName] = [];\n        }\n\n        sectionOptionsGroup[groupName].push({\n          value: key,\n          label: PredefinedQueries[key].name\n        });\n      } // generate to format that element ui requires\n\n\n      var sectionOptions = [];\n\n      for (var _groupName in sectionOptionsGroup) {\n        if (!sectionOptionsGroup.hasOwnProperty(_groupName)) {\n          continue;\n        }\n\n        sectionOptions.push({\n          label: _groupName,\n          options: sectionOptionsGroup[_groupName]\n        });\n      }\n\n      return sectionOptions;\n    },\n    isNewPresentation: function isNewPresentation() {\n      return this.presentationId === ID_NEW_PRESENTATION;\n    },\n    sectionList: function sectionList() {\n      return this.$store.state.section.sectionList;\n    },\n    isLoadingSectionList: function isLoadingSectionList() {\n      return this.$store.state.section.sectionListStatus.isLoading;\n    },\n    isSectionListApiError: function isSectionListApiError() {\n      return this.$store.state.section.sectionListStatus.isApiError;\n    },\n    sectionListApiErrorMsg: function sectionListApiErrorMsg() {\n      return this.$store.state.section.sectionListStatus.apiErrorMsg;\n    },\n    isLoadingDBMetaData: function isLoadingDBMetaData() {\n      return this.$store.state.dbMetaData.entitiesStatus.isLoading;\n    }\n  },\n  components: {\n    AbstractSectionDetail: AbstractSectionDetail,\n    SectionListPanel: SectionListPanel,\n    PresentationBrief: PresentationBrief,\n    ChartJsPluginDataLabels: ChartJsPluginDataLabels\n  },\n  mounted: function mounted() {\n    this.presentationId = this.$route.params.id;\n    this.fetchSectionList();\n    this.$store.dispatch('fetchDBMetaDataEntities');\n  },\n  methods: {\n    fetchSectionList: function fetchSectionList() {\n      if (this.isNewPresentation) {\n        this.$store.commit('clearSectionList');\n      } else {\n        this.$store.dispatch('fetchSectionList', this.presentationId);\n      }\n    }\n  }\n};",{"version":3,"sources":["PresentationSection.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-main>\n        <el-container>\n            <el-main>\n                <presentation-brief :id=\"id\"/>\n                <section-list-panel :presentationId=\"id\"/>\n            </el-main>\n        </el-container>\n    </el-main>\n</template>\n\n<script>\n    import ChartJsPluginDataLabels from 'chartjs-plugin-datalabels';\n    import AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\"\n    import {ID_NEW_PRESENTATION} from \"@/common/const\";\n    import SectionListPanel from \"@/components/SectionListPanel.vue\";\n    import PredefinedQueries from \"@/store/data/predefinedQueries\"\n    import PresentationBrief from \"@/components/PresentationBrief.vue\";\n\n    export default {\n        props: {\n            id: String,\n        },\n        data() {\n            return {\n                selectedNewSection: '',\n                presentationId: '',\n            }\n        },\n        computed: {\n            isLogin() {\n                return this.$store.state.userInfo.isLogin\n            },\n\n            isPresentationEditable() {\n                return this.$store.state.presentation.isPresentationEditable;\n            },\n\n            predefinedSections() {\n                let sectionOptionsGroup = {};\n                // grouping the predefined queries\n                for (let key in PredefinedQueries) {\n                    if (!PredefinedQueries.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let groupName = PredefinedQueries[key].group;\n                    if (sectionOptionsGroup[groupName] === undefined) {\n                        sectionOptionsGroup[groupName] = [];\n                    }\n                    sectionOptionsGroup[groupName].push({\n                        value: key,\n                        label: PredefinedQueries[key].name,\n                    })\n                }\n\n                // generate to format that element ui requires\n                let sectionOptions = [];\n                for (let groupName in sectionOptionsGroup) {\n                    if (!sectionOptionsGroup.hasOwnProperty(groupName)) {\n                        continue;\n                    }\n                    sectionOptions.push({\n                        label: groupName,\n                        options: sectionOptionsGroup[groupName]\n                    })\n                }\n                return sectionOptions;\n            },\n\n            isNewPresentation() {\n                return this.presentationId === ID_NEW_PRESENTATION\n            },\n\n            sectionList() {\n                return this.$store.state.section.sectionList\n            },\n            isLoadingSectionList() {\n                return this.$store.state.section.sectionListStatus.isLoading\n            },\n            isSectionListApiError() {\n                return this.$store.state.section.sectionListStatus.isApiError\n            },\n            sectionListApiErrorMsg() {\n                return this.$store.state.section.sectionListStatus.apiErrorMsg\n            },\n            isLoadingDBMetaData() {\n                return this.$store.state.dbMetaData.entitiesStatus.isLoading\n            },\n        },\n        components: {\n            AbstractSectionDetail,\n            SectionListPanel,\n            PresentationBrief,\n            ChartJsPluginDataLabels\n        },\n        mounted() {\n            this.presentationId = this.$route.params.id;\n            this.fetchSectionList();\n            this.$store.dispatch('fetchDBMetaDataEntities');\n        },\n        methods: {\n            fetchSectionList() {\n                if (this.isNewPresentation) {\n                    this.$store.commit('clearSectionList');\n                } else {\n                    this.$store.dispatch('fetchSectionList', this.presentationId)\n                }\n            },\n        }\n    }\n</script>\n\n<style scoped>\n</style>"],"sourceRoot":"src/views"}]}