{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\GraphNetworkSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\GraphNetworkSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue';\nimport GraphNetwork from '@/components/sectionDetail/chart/GraphNetwork.vue';\nimport { generateBackgroundColor } from '@/common/color';\nexport default {\n  name: \"GraphNetworkSectionDetail\",\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      nodes: [],\n      links: [],\n      options: {},\n      partialResult: []\n    };\n  },\n  computed: {\n    hasData: function hasData() {\n      return this.nodes.length !== 0;\n    }\n  },\n  methods: {\n    showNodeDetails: function showNodeDetails(event, node) {\n      var newNodeMsg;\n\n      if (this.$nodeMsg !== undefined) {\n        newNodeMsg = this.$nodeMsg;\n      }\n\n      newNodeMsg += node._labelClass;\n      this.$message({\n        showClose: true,\n        title: 'Information',\n        message: newNodeMsg\n      });\n    },\n    showLinkDetails: function showLinkDetails(event, link) {\n      var info = [this.nodes[link.sid]._labelClass, this.nodes[link.tid]._labelClass, link.name];\n      var newMsg = \"\";\n\n      for (var i = 0; i < info.length; i++) {\n        newMsg += info[i];\n\n        if (this.$linkMsg[i].msg !== undefined) {\n          newMsg += this.$linkMsg[i].msg;\n        }\n      }\n\n      this.$message({\n        showClose: true,\n        title: 'Information',\n        message: newMsg\n      });\n    },\n    updateVisualisation: function updateVisualisation(_ref) {\n      var _this = this;\n\n      var result = _ref.result,\n          selections = _ref.selections,\n          extraData = _ref.extraData;\n      var i;\n      this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\n      this.$nodeMsg = extraData.nodeMessage;\n      this.$linkMsg = extraData.linkMessage; // Add distinct nodes to the network graph\n\n      var distinctNodesSet = new Set();\n      this.partialResult.forEach(function (res) {\n        distinctNodesSet.add(res[selections[0].rename]);\n        distinctNodesSet.add(res[selections[1].rename]);\n      });\n      var distinctNodesArray = Array.from(distinctNodesSet);\n      var distinctNodes = [];\n\n      for (i = 0; i < distinctNodesArray.length; i++) {\n        distinctNodes[i] = {\n          id: i,\n          name: \"#\" + (i + 1),\n          _labelClass: distinctNodesArray[i]\n        };\n      }\n\n      var nodeSizeList = [];\n\n      for (i = 0; i < distinctNodes.length; i++) {\n        nodeSizeList.push(0);\n      }\n\n      var graphLinks = [];\n      this.partialResult.forEach(function (element, index) {\n        var num_entry = element[selections[2].rename];\n        graphLinks[index] = {\n          sid: distinctNodes.filter(function (x) {\n            return x._labelClass == element[selections[0].rename];\n          }).map(function (x) {\n            return x.id;\n          })[0],\n          tid: distinctNodes.filter(function (x) {\n            return x._labelClass == element[selections[1].rename];\n          }).map(function (x) {\n            return x.id;\n          })[0],\n          name: String(num_entry),\n          _svgAttrs: {\n            'stroke-width': -(8 / num_entry) + 10\n          }\n        }; //console.log(graphLinks[index]['sid'],graphLinks[index]['tid'], num_entry);\n\n        nodeSizeList[graphLinks[index]['sid']] += num_entry;\n        nodeSizeList[graphLinks[index]['tid']] += num_entry; //console.log(nodeSizeList);\n      });\n      nodeSizeList.forEach(function (element, index) {\n        distinctNodes[index]['_size'] = -(30 / element) + 40;\n      });\n\n      if (extraData.isColorfulBar) {\n        distinctNodes.forEach(function (node, index) {\n          node._color = generateBackgroundColor(_this.partialResult.length)[index % _this.partialResult.length];\n        });\n        graphLinks.forEach(function (link, index) {\n          link._color = generateBackgroundColor(_this.partialResult.length)[index % _this.partialResult.length];\n        });\n      } else {\n        distinctNodes.forEach(function (node) {\n          node._color = generateBackgroundColor(_this.partialResult.length)[_this.partialResult.length - 1];\n        });\n        graphLinks.forEach(function (link) {\n          link._color = generateBackgroundColor(_this.partialResult.length)[_this.partialResult.length - 1];\n        });\n      }\n\n      this.nodes = distinctNodes;\n      this.links = graphLinks;\n      this.options = {\n        force: 2000,\n        nodeSize: 30,\n        nodeLabels: true,\n        linkLabels: false,\n        linkWidth: 50,\n        fontSize: 14,\n        canvas: false\n      }; //console.log(\"data: \" + this.nodes[0].name);\n    }\n  },\n  components: {\n    BasicSectionDetail: BasicSectionDetail,\n    GraphNetwork: GraphNetwork\n  }\n};",{"version":3,"sources":["GraphNetworkSectionDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\n                        :version=\"version\"\n                        :extraFormItemsRules=\"{}\"\n                        @update-visualisation=\"updateVisualisation\">\n    <GraphNetwork :nodes=\"nodes\" :links=\"links\" :options=\"options\"\n            :nodeClick=\"showNodeDetails\"\n            :linkClick=\"showLinkDetails\"></GraphNetwork>\n\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\n      <el-form-item label=\"Colorful Bar\" prop=\"extraData.isColorfulBar\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-switch\n          v-model=\"slotProps.extraData.isColorfulBar\"\n          active-text=\"Colorful Bar\"\n          inactive-text=\"Single Color Bar\">\n        </el-switch>\n      </el-form-item>\n      <el-form-item label=\"Num of result to display\" prop=\"extraData.numOfResultToDisplay\"\n                    v-if=\"slotProps.isInAdvancedMode\">\n        <el-slider v-model=\"slotProps.extraData.numOfResultToDisplay\" :min=\"5\" :max=\"30\"></el-slider>\n      </el-form-item>\n    </template>\n  </basic-section-detail>\n</template>\n\n<script>\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n  import GraphNetwork from '@/components/sectionDetail/chart/GraphNetwork.vue'\n  import {generateBackgroundColor} from '@/common/color'\n  \n  export default {\n    name: \"GraphNetworkSectionDetail\",\n\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String, \n        required: true\n      }\n    },\n\n    data() {\n      return {\n        nodes: [],\n        links: [],\n        options: {},\n        partialResult: [],\n      }\n    },\n\n    computed: {\n      hasData() {\n        return this.nodes.length !== 0;\n      },\n    },\n\n    methods: {\n      showNodeDetails(event, node) {\n        let newNodeMsg;\n        if (this.$nodeMsg !== undefined) {\n          newNodeMsg = this.$nodeMsg;\n        }\n        newNodeMsg += node._labelClass;\n        this.$message({\n          showClose: true,\n          title: 'Information',\n          message: newNodeMsg\n        });\n      },\n      showLinkDetails(event, link) {\n        var info = [this.nodes[link.sid]._labelClass, this.nodes[link.tid]._labelClass, link.name];\n        var newMsg = \"\";\n        for(var i = 0; i < info.length; i++) {\n          newMsg += info[i];\n          if (this.$linkMsg[i].msg !== undefined) {\n            newMsg += this.$linkMsg[i].msg;\n          }\n        }\n        this.$message({\n          showClose: true,\n          title: 'Information',\n          message: newMsg\n        });\n      },\n      updateVisualisation({result, selections, extraData}) {\n        let i;\n        this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\n\n        this.$nodeMsg = extraData.nodeMessage;\n        this.$linkMsg = extraData.linkMessage;\n\n        // Add distinct nodes to the network graph\n        let distinctNodesSet = new Set();\n        this.partialResult.forEach(res => {\n          distinctNodesSet.add(res[selections[0].rename]);\n          distinctNodesSet.add(res[selections[1].rename]);\n        });\n\n        let distinctNodesArray = Array.from(distinctNodesSet);\n        let distinctNodes = [];\n        for(i = 0; i < distinctNodesArray.length; i++) {\n          distinctNodes[i] = {\n            id: i,\n            name: \"#\" + (i + 1),\n            _labelClass: distinctNodesArray[i],\n          };\n        }\n\n        var nodeSizeList = [];\n        for (i = 0; i<distinctNodes.length; i++){\n          nodeSizeList.push(0);\n        }\n\n        let graphLinks = [];\n        this.partialResult.forEach((element, index) => {\n          var num_entry = element[selections[2].rename];\n          graphLinks[index] = {\n            sid: distinctNodes.filter(x => x._labelClass == element[selections[0].rename]).map(x => x.id)[0],\n            tid: distinctNodes.filter(x => x._labelClass == element[selections[1].rename]).map(x => x.id)[0],\n            name: String(num_entry),\n            _svgAttrs:{'stroke-width': -(8/num_entry)+10}\n          };\n          //console.log(graphLinks[index]['sid'],graphLinks[index]['tid'], num_entry);\n          nodeSizeList[graphLinks[index]['sid']] += num_entry;\n          nodeSizeList[graphLinks[index]['tid']] += num_entry;\n          //console.log(nodeSizeList);\n        });\n\n        nodeSizeList.forEach((element, index) =>{\n          distinctNodes[index]['_size'] = -(30/element)+40;\n        });\n        if (extraData.isColorfulBar) {\n          distinctNodes.forEach((node,index) => {\n            node._color = generateBackgroundColor(this.partialResult.length)[index % this.partialResult.length];\n          })\n          graphLinks.forEach((link, index) => {\n            link._color = generateBackgroundColor(this.partialResult.length)[index % this.partialResult.length];\n          })\n        } else {\n          distinctNodes.forEach(node => {\n            node._color = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n          })\n          graphLinks.forEach(link => {\n            link._color = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n          })\n        }\n\n        this.nodes = distinctNodes;\n        this.links = graphLinks;\n        this.options = {\n          force: 2000,\n          nodeSize: 30,\n          nodeLabels: true,\n          linkLabels: false,\n          linkWidth: 50,\n          fontSize: 14,\n          canvas: false\n        }\n        //console.log(\"data: \" + this.nodes[0].name);\n      }\n    },\n\n    components: {\n      BasicSectionDetail,\n      GraphNetwork\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>\n\n<style>\n.node{\n  stroke:rgba(18,120,98,.7);\n  stroke-width:2px;\n  -webkit-transition:fill .5s ease;\n  transition:fill .5s ease;\n  fill:#dcfaf3\n}\n.node.selected{\n  stroke:#caa455\n}\n.link{\n  stroke:rgba(18,120,98,.3);\n  /*stroke-width: 2px;*/\n}\n.link,.node{\n  stroke-linecap:round\n}\n.link:hover,.node:hover{\n  stroke-width:5px\n}\n.link.selected{\n  stroke:rgba(202,164,85,.6)\n}\n.curve{\n  fill:none\n}\n.link-label,.node-label{\n  fill:rgba(0,0,0,.6)\n}\n.link-label{\n  -webkit-transform:translateY(-.5em);\n  transform:translateY(-.5em);\n  text-anchor:middle\n}\n</style>"],"sourceRoot":"src/components/sectionDetail"}]}