{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\StatsSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\StatsSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { max, mean, median, min, standardDeviation, sum } from 'simple-statistics';\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue';\nexport default {\n  name: \"StatsSectionDetail\",\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      tableData: []\n    };\n  },\n  computed: {\n    hasData: function hasData() {\n      return this.tableData.length !== 0;\n    }\n  },\n  methods: {\n    updateVisualisation: function updateVisualisation(_ref) {\n      var _this = this;\n\n      var result = _ref.result,\n          selections = _ref.selections,\n          extraData = _ref.extraData;\n      this.tableData = [];\n\n      if (result.length === 0) {\n        return;\n      }\n\n      var data = result.map(function (r) {\n        return r[selections[1].rename];\n      });\n      extraData.types.forEach(function (t) {\n        var rIds = [];\n        var rId;\n        var stringBuilder;\n\n        switch (t) {\n          case 'min':\n            stringBuilder = \"\";\n            rIds = result.filter(function (r) {\n              return r[selections[1].rename] == min(data);\n            }).map(function (r) {\n              return r[selections[0].rename];\n            });\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n              for (var _iterator = rIds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                rId = _step.value;\n                stringBuilder = stringBuilder + rId + \", \";\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n\n            stringBuilder = stringBuilder.substring(0, stringBuilder.length - 2);\n\n            _this.tableData.push({\n              type: 'Min',\n              value: min(data),\n              numIds: rIds.length,\n              reviewer: stringBuilder\n            });\n\n            break;\n\n          case 'max':\n            stringBuilder = \"\";\n            rIds = result.filter(function (r) {\n              return r[selections[1].rename] == max(data);\n            }).map(function (r) {\n              return r[selections[0].rename];\n            });\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = rIds[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                rId = _step2.value;\n                stringBuilder = stringBuilder + rId + \", \";\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n\n            stringBuilder = stringBuilder.substring(0, stringBuilder.length - 2);\n\n            _this.tableData.push({\n              type: 'Max',\n              value: max(data),\n              numIds: rIds.length,\n              reviewer: stringBuilder\n            });\n\n            break;\n\n          case 'sum':\n            _this.tableData.push({\n              type: 'Sum',\n              value: sum(data),\n              numIds: result.length,\n              reviewer: \"-\"\n            });\n\n            break;\n\n          case 'avg':\n            _this.tableData.push({\n              type: 'Mean',\n              value: mean(data).toFixed(2),\n              numIds: result.length,\n              reviewer: \"-\"\n            });\n\n            break;\n\n          case 'median':\n            _this.tableData.push({\n              type: 'Median',\n              value: median(data),\n              numIds: result.length,\n              reviewer: \"-\"\n            });\n\n            break;\n\n          case 'std':\n            _this.tableData.push({\n              type: 'ST.DEV',\n              value: standardDeviation(data).toFixed(2),\n              numIds: result.length,\n              reviewer: \"-\"\n            });\n\n            break;\n        }\n      });\n    }\n  },\n  components: {\n    BasicSectionDetail: BasicSectionDetail\n  }\n};",{"version":3,"sources":["StatsSectionDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\n                        :version=\"version\"\n                        :extraFormItemsRules=\"{}\"\n                        @update-visualisation=\"updateVisualisation\">\n    <el-table\n      :data=\"tableData\"\n      stripe\n      style=\"width: 100%\">\n\n      <el-table-column\n        prop=\"type\"\n        label=\"Type\" width=\"200\">\n      </el-table-column>\n\n      <el-table-column\n        prop=\"value\"\n        label=\"Value\" width=\"100\">\n        <template slot-scope=\"scope\">\n          <el-popover trigger=\"hover\" placement=\"top-start\">\n            <p> No. of Reviewers: {{ scope.row.numIds }}</p>\n            <div slot=\"reference\" class=\"name-wrapper\">\n              <el-button class=\"hovered-text\" type=\"text\"> {{ scope.row.value }} </el-button> \n            </div>\n          </el-popover>\n        </template>\n      </el-table-column>\n\n     <el-table-column\n        prop=\"reviewer\"\n        label=\"Corresponding Reviewer ID\">\n        <template slot-scope=\"scope\">\n        {{ scope.row.reviewer }}\n        </template>\n      </el-table-column>\n\n    </el-table>\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\n      <el-form-item label=\"Type\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"type\" v-model=\"slotProps.extraData.types\" multiple>\n          <el-option label=\"Min\" value=\"min\" reviewer=\"min\"></el-option>\n          <el-option label=\"Max\" value=\"max\" reviewer=\"max\"></el-option>\n          <el-option label=\"Sum\" value=\"sum\" reviewer=\"sum\"></el-option>\n          <el-option label=\"Average\" value=\"avg\" reviewer=\"avg\"></el-option>\n          <el-option label=\"Median\" value=\"median\" reviewer=\"median\"></el-option>\n          <el-option label=\"Standard Deviation\" value=\"std\" reviewer=\"std\"></el-option>\n        </el-select>\n      </el-form-item>\n    </template>\n  </basic-section-detail>\n</template>\n\n<script>\n  import {max, mean, median, min, standardDeviation, sum} from 'simple-statistics'\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n\n  export default {\n    name: \"StatsSectionDetail\",\n\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      }\n    },\n\n    data() {\n      return {\n        tableData: []\n      }\n    },\n\n    computed: {\n      hasData() {\n        return this.tableData.length !== 0;\n      }\n    },\n\n    methods: {\n      updateVisualisation({result, selections, extraData}) {\n        this.tableData = [];\n        if (result.length === 0) {\n          return\n        }\n        let data = result.map(r => r[selections[1].rename]);\n\n        extraData.types.forEach(t => {\n          var rIds = [];\n          var rId;\n          var stringBuilder;\n          switch (t) {\n            case 'min':\n              stringBuilder = \"\";\n              rIds = result.filter(r => r[selections[1].rename] == min(data)).map(\n                r => r[selections[0].rename]);\n\n              for (rId of rIds) {\n                stringBuilder = stringBuilder + rId + \", \";\n              }\n              stringBuilder = stringBuilder.substring(0, stringBuilder.length-2);\n              \n              this.tableData.push({\n                type: 'Min',\n                value: min(data),\n                numIds: rIds.length,\n                reviewer: stringBuilder,\n              });\n              break;\n            case 'max':\n              stringBuilder = \"\";\n              rIds = result.filter(r => r[selections[1].rename] == max(data)).map(\n                r => r[selections[0].rename]);\n              for (rId of rIds) {\n                stringBuilder = stringBuilder + rId + \", \";\n              }\n              stringBuilder = stringBuilder.substring(0, stringBuilder.length-2);\n              this.tableData.push({\n                type: 'Max',\n                value: max(data),\n                numIds: rIds.length,\n                reviewer: stringBuilder,\n              });\n              break;\n            case 'sum':\n              this.tableData.push({\n                type: 'Sum',\n                value: sum(data),\n                numIds: result.length,\n                reviewer: \"-\",\n              });\n              break;\n            case 'avg':\n              this.tableData.push({\n                type: 'Mean',\n                value: mean(data).toFixed(2),\n                numIds: result.length,\n                reviewer: \"-\",\n              });\n              break;\n            case 'median':\n              this.tableData.push({\n                type: 'Median',\n                value: median(data),\n                numIds: result.length,\n                reviewer: \"-\",\n              });\n              break;\n            case 'std':\n              this.tableData.push({\n                type: 'ST.DEV',\n                value: standardDeviation(data).toFixed(2),\n                numIds: result.length,\n                reviewer: \"-\", \n              });\n              break; \n          }\n        })\n      }\n    },\n\n    components: {\n      BasicSectionDetail,\n    }\n  }\n</script>\n\n<style scoped>\n.hovered-text {\n  color: #606266\n}\n</style>"],"sourceRoot":"src/components/sectionDetail"}]}