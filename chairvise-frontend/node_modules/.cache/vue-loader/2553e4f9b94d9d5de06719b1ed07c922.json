{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\PresentationBrief.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\PresentationBrief.vue","mtime":1593267952000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AccessControlPanel from '@/components/AccessControlPanel'\nimport {downloadPDF} from \"@/store/helpers/pdfDownloader\"\nimport {downloadPPTX} from \"@/store/helpers/pptxDownloader\"\nimport {AccessLevel, ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\nimport {deepCopy} from \"@/common/utility\";\n\nexport default {\n  name: 'PresentationBrief',\n  props: {\n    id: String\n  },\n  mounted() {\n    this.updatePresentationForm();\n  },\n  watch: {\n    'id'() {\n      this.updatePresentationForm()\n    },\n  },\n  computed: {\n    isLogin() {\n      return this.$store.state.userInfo.isLogin\n    },\n    isPresentationEditable() {\n      return this.$store.state.presentation.isPresentationEditable;\n    },\n\n    presentationForm() {\n      return {\n        name: this.presentationFormName,\n        creatorIdentifier: this.presentationFormCreatorIdentifier,\n        description: this.presentationFormDescription,\n      }\n    },\n    presentationFormName: {\n      get() {\n        return this.$store.state.presentation.presentationForm.name\n      },\n      set(value) {\n        this.$store.commit('setPresentationFormField', {\n          field: 'name',\n          value\n        })\n      },\n    },\n    presentationFormCreatorIdentifier() {\n      return this.$store.state.presentation.presentationForm.creatorIdentifier\n    },\n    presentationFormDescription: {\n      get() {\n        return this.$store.state.presentation.presentationForm.description\n      },\n      set(value) {\n        this.$store.commit('setPresentationFormField', {\n          field: 'description',\n          value\n        })\n      },\n    },\n    isNewPresentation() {\n      return this.id === ID_NEW_PRESENTATION\n    },\n    isInEditMode() {\n      return this.isEditing || this.isNewPresentation\n    },\n    isLoading() {\n      return this.$store.state.presentation.presentationFormStatus.isLoading\n    },\n    isError() {\n      return this.$store.state.presentation.presentationFormStatus.isApiError\n    },\n    apiErrorMsg() {\n      return this.$store.state.presentation.presentationFormStatus.apiErrorMsg\n    }\n  },\n  data() {\n    return {\n      isEditing: false,\n      isAccessControlDialogVisible: false,\n      rules: {\n        name: [\n          {required: true, message: 'Please enter presentation name', trigger: 'blur'},\n          {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n        ]\n      }\n    }\n  },\n  methods: {\n    changeEditMode(isEditing) {\n      if (isEditing === false) {\n        this.updatePresentationForm();\n      }\n      this.isEditing = isEditing;\n    },\n\n    openAccessControlPanel() {\n      this.isAccessControlDialogVisible = true;\n    },\n\n    addPresentation() {\n      this.$refs['presentationForm'].validate((valid, object) => {\n        if (!valid) {\n\n          if('name' in object) {\n            this.$notify.error({\n              title: 'Error',\n              message: object.name[0].message\n            });\n          }\n          return\n        }\n        this.$refs['presentationForm'].clearValidate();\n        if (this.isNewPresentation) {\n          // add\n          this.$store.dispatch('savePresentation')\n                  .then(() => {\n                    if (this.isError) {\n                      return\n                    }\n                    // redirect to the newly added presentation\n                    this.$router.push({\n                      name: 'analyze',\n                      params: {\n                        id: this.$store.state.presentation.presentationForm.id\n                      }\n                    });\n                  });\n        } else {\n          // edit\n          this.$store.dispatch('updatePresentation')\n                  .then(() => {\n                    if (this.isError) {\n                      return\n                    }\n                    this.isEditing = false\n                  })\n        }\n      });\n    },\n    deletePresentation() {\n      this.$store.dispatch('deletePresentation', this.id)\n              .then(() => {\n                if (this.isError) {\n                  return\n                }\n                this.$router.replace({\n                  name: 'analyze',\n                  params: {\n                    id: ID_NEW_PRESENTATION\n                  }\n                });\n                this.isEditing = false;\n              })\n    },\n    updatePresentationForm() {\n      if (this.$refs['presentationForm']) {\n        this.$refs['presentationForm'].clearValidate();\n      }\n      this.$store.commit('resetPresentationForm');\n      if (this.id !== ID_NEW_PRESENTATION) {\n        this.$store.dispatch('getPresentation', this.id)\n                .then(() => {\n                  // check writable or not\n                  this.$store.dispatch('fetchAccessControlList', this.id)\n                          .then(() => {\n                            let currentUser = this.$store.state.userInfo.userEmail;\n                            let accessControlList = this.$store.state.accessControl.accessControlList;\n                            let isPresentationEditable =\n                                    currentUser === this.presentationFormCreatorIdentifier\n                                    || accessControlList.some(acl => acl.userIdentifier === currentUser && acl.accessLevel === AccessLevel.CAN_WRITE)\n                                    || accessControlList.some(acl => acl.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC && acl.accessLevel === AccessLevel.CAN_WRITE);\n                            this.$store.commit('setIsPresentationEditable', isPresentationEditable)\n                          })\n                })\n      }\n    },\n    downloadPDF() {\n      window.scrollTo(0, 0)\n      let vm = this;\n      let wasPresentationEditable = deepCopy(vm.isPresentationEditable);\n      vm.$store.commit('setIsPresentationEditable', false);\n      vm.$store.commit('setPageLoadingStatus', true);\n\n      this.$nextTick(() => {\n        downloadPDF(vm.presentationFormName).then(() => {\n          vm.$store.commit('setIsPresentationEditable', wasPresentationEditable);\n          vm.$store.commit('setPageLoadingStatus', false);\n        });\n      });\n    },\n    downloadPPTX() {\n      window.scrollTo(0, 0)\n      let vm = this;\n      let wasPresentationEditable = deepCopy(vm.isPresentationEditable);\n      vm.$store.commit('setIsPresentationEditable', false);\n      vm.$store.commit('setPageLoadingStatus', true);\n\n      this.$nextTick(() => {\n        downloadPPTX(vm.presentationFormName).then(() => {\n          vm.$store.commit('setIsPresentationEditable', wasPresentationEditable);\n          vm.$store.commit('setPageLoadingStatus', false);\n        });\n      });\n    }\n  },\n\n  components: {\n    AccessControlPanel\n  },\n}\n",{"version":3,"sources":["PresentationBrief.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"PresentationBrief.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <el-card class=\"details-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span> Presentation Details </span>\n      </div>\n      <el-row>\n        <el-col :span=\"18\">\n          <el-form label-position=\"left\" ref=\"presentationForm\" \n                  label-width=\"150px\" :rules=\"rules\"\n                  :model=\"presentationForm\" v-loading=\"isLoading\" >\n            <el-alert v-if=\"isError\" :title=\"apiErrorMsg\" type=\"error\" show-icon class=\"errorMsg\"/>\n\n            <el-form-item label=\"Name: \" v-show=\"isInEditMode\" :prop=\" 'name' \" >\n              <div v-if=\"!isInEditMode\">{{ presentationForm.name }}</div>\n              <el-input v-model=\"presentationFormName\" v-if=\"isInEditMode\"/>\n            </el-form-item>\n            <el-form-item label=\"Name: \" v-show=\"!isInEditMode\" >\n              <div v-if=\"!isInEditMode\">{{ presentationForm.name }}</div>\n              <el-input v-model=\"presentationFormName\" v-if=\"isInEditMode\"/>\n            </el-form-item>\n            <el-form-item label=\"Access Control: \" v-if=\"!isNewPresentation\">\n              <el-tag>Created by {{ presentationForm.creatorIdentifier }}</el-tag>\n            </el-form-item>\n            <el-form-item label=\"Description: \">\n              <div v-if=\"!isInEditMode\" id=\"presentation-description\">{{ presentationForm.description }}</div>\n              <el-input type=\"textarea\" autosize v-model=\"presentationFormDescription\" v-if=\"isInEditMode\"/>\n            </el-form-item>\n            <el-form-item v-if=\"isInEditMode\">\n              <el-button-group>\n                <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"addPresentation()\" v-if=\"isInEditMode\">Save</el-button>\n                <el-button type=\"info\" icon=\"el-icon-close\" @click=\"changeEditMode(false)\" v-if=\"isInEditMode && !isNewPresentation\">Cancel</el-button>\n              </el-button-group>\n            </el-form-item>\n          </el-form>\n        </el-col>\n      </el-row>\n      <el-divider v-if=\"!isInEditMode\"></el-divider>\n      <el-row v-if=\"!isInEditMode\">\n        <el-col class=\"download-section\" :span=\"12\">\n          <el-button-group>\n            <el-button type=\"primary\" @click=\"downloadPDF()\" v-if=\"!isInEditMode && !isNewPresentation\"\n              icon=\"el-icon-document\">\n                PDF\n            </el-button>\n            <el-button type=\"danger\" @click=\"downloadPPTX()\" v-if=\"!isInEditMode && !isNewPresentation\"\n              icon=\"el-icon-data-board\">\n                Powerpoint\n            </el-button>\n          </el-button-group>\n        </el-col>\n        <el-col class=\"options-section\" :span=\"12\">\n          <el-divider direction=\"vertical\" class=\"v-divide\"></el-divider>\n          <el-button-group>\n            <el-button type=\"success\" class=\"share_button_left_margin\" icon=\"el-icon-share\"\n                    @click=\"openAccessControlPanel()\" v-if=\"isLogin && isPresentationEditable\">\n              Share\n            </el-button>\n            <el-button type=\"primary\" @click=\"changeEditMode(true)\" icon=\"el-icon-edit\"\n                    v-if=\"!isInEditMode && isPresentationEditable\">\n              Edit\n            </el-button>\n            <el-button type=\"danger\" v-if=\"!isNewPresentation && isLogin && isPresentationEditable\"\n                    icon=\"el-icon-delete\" @click=\"deletePresentation()\">\n              Delete\n            </el-button>\n          </el-button-group>\n        </el-col>\n      </el-row>\n    </el-card>\n\n    <el-dialog title=\"Share with other users:\" :visible.sync=\"isAccessControlDialogVisible\" width=\"70%\"\n            :close-on-click-modal=\"false\">\n      <access-control-panel :presentationId=\"id\"></access-control-panel>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import AccessControlPanel from '@/components/AccessControlPanel'\n  import {downloadPDF} from \"@/store/helpers/pdfDownloader\"\n  import {downloadPPTX} from \"@/store/helpers/pptxDownloader\"\n  import {AccessLevel, ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\n  import {deepCopy} from \"@/common/utility\";\n\n  export default {\n    name: 'PresentationBrief',\n    props: {\n      id: String\n    },\n    mounted() {\n      this.updatePresentationForm();\n    },\n    watch: {\n      'id'() {\n        this.updatePresentationForm()\n      },\n    },\n    computed: {\n      isLogin() {\n        return this.$store.state.userInfo.isLogin\n      },\n      isPresentationEditable() {\n        return this.$store.state.presentation.isPresentationEditable;\n      },\n\n      presentationForm() {\n        return {\n          name: this.presentationFormName,\n          creatorIdentifier: this.presentationFormCreatorIdentifier,\n          description: this.presentationFormDescription,\n        }\n      },\n      presentationFormName: {\n        get() {\n          return this.$store.state.presentation.presentationForm.name\n        },\n        set(value) {\n          this.$store.commit('setPresentationFormField', {\n            field: 'name',\n            value\n          })\n        },\n      },\n      presentationFormCreatorIdentifier() {\n        return this.$store.state.presentation.presentationForm.creatorIdentifier\n      },\n      presentationFormDescription: {\n        get() {\n          return this.$store.state.presentation.presentationForm.description\n        },\n        set(value) {\n          this.$store.commit('setPresentationFormField', {\n            field: 'description',\n            value\n          })\n        },\n      },\n      isNewPresentation() {\n        return this.id === ID_NEW_PRESENTATION\n      },\n      isInEditMode() {\n        return this.isEditing || this.isNewPresentation\n      },\n      isLoading() {\n        return this.$store.state.presentation.presentationFormStatus.isLoading\n      },\n      isError() {\n        return this.$store.state.presentation.presentationFormStatus.isApiError\n      },\n      apiErrorMsg() {\n        return this.$store.state.presentation.presentationFormStatus.apiErrorMsg\n      }\n    },\n    data() {\n      return {\n        isEditing: false,\n        isAccessControlDialogVisible: false,\n        rules: {\n          name: [\n            {required: true, message: 'Please enter presentation name', trigger: 'blur'},\n            {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n          ]\n        }\n      }\n    },\n    methods: {\n      changeEditMode(isEditing) {\n        if (isEditing === false) {\n          this.updatePresentationForm();\n        }\n        this.isEditing = isEditing;\n      },\n\n      openAccessControlPanel() {\n        this.isAccessControlDialogVisible = true;\n      },\n\n      addPresentation() {\n        this.$refs['presentationForm'].validate((valid, object) => {\n          if (!valid) {\n\n            if('name' in object) {\n              this.$notify.error({\n                title: 'Error',\n                message: object.name[0].message\n              });\n            }\n            return\n          }\n          this.$refs['presentationForm'].clearValidate();\n          if (this.isNewPresentation) {\n            // add\n            this.$store.dispatch('savePresentation')\n                    .then(() => {\n                      if (this.isError) {\n                        return\n                      }\n                      // redirect to the newly added presentation\n                      this.$router.push({\n                        name: 'analyze',\n                        params: {\n                          id: this.$store.state.presentation.presentationForm.id\n                        }\n                      });\n                    });\n          } else {\n            // edit\n            this.$store.dispatch('updatePresentation')\n                    .then(() => {\n                      if (this.isError) {\n                        return\n                      }\n                      this.isEditing = false\n                    })\n          }\n        });\n      },\n      deletePresentation() {\n        this.$store.dispatch('deletePresentation', this.id)\n                .then(() => {\n                  if (this.isError) {\n                    return\n                  }\n                  this.$router.replace({\n                    name: 'analyze',\n                    params: {\n                      id: ID_NEW_PRESENTATION\n                    }\n                  });\n                  this.isEditing = false;\n                })\n      },\n      updatePresentationForm() {\n        if (this.$refs['presentationForm']) {\n          this.$refs['presentationForm'].clearValidate();\n        }\n        this.$store.commit('resetPresentationForm');\n        if (this.id !== ID_NEW_PRESENTATION) {\n          this.$store.dispatch('getPresentation', this.id)\n                  .then(() => {\n                    // check writable or not\n                    this.$store.dispatch('fetchAccessControlList', this.id)\n                            .then(() => {\n                              let currentUser = this.$store.state.userInfo.userEmail;\n                              let accessControlList = this.$store.state.accessControl.accessControlList;\n                              let isPresentationEditable =\n                                      currentUser === this.presentationFormCreatorIdentifier\n                                      || accessControlList.some(acl => acl.userIdentifier === currentUser && acl.accessLevel === AccessLevel.CAN_WRITE)\n                                      || accessControlList.some(acl => acl.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC && acl.accessLevel === AccessLevel.CAN_WRITE);\n                              this.$store.commit('setIsPresentationEditable', isPresentationEditable)\n                            })\n                  })\n        }\n      },\n      downloadPDF() {\n        window.scrollTo(0, 0)\n        let vm = this;\n        let wasPresentationEditable = deepCopy(vm.isPresentationEditable);\n        vm.$store.commit('setIsPresentationEditable', false);\n        vm.$store.commit('setPageLoadingStatus', true);\n\n        this.$nextTick(() => {\n          downloadPDF(vm.presentationFormName).then(() => {\n            vm.$store.commit('setIsPresentationEditable', wasPresentationEditable);\n            vm.$store.commit('setPageLoadingStatus', false);\n          });\n        });\n      },\n      downloadPPTX() {\n        window.scrollTo(0, 0)\n        let vm = this;\n        let wasPresentationEditable = deepCopy(vm.isPresentationEditable);\n        vm.$store.commit('setIsPresentationEditable', false);\n        vm.$store.commit('setPageLoadingStatus', true);\n\n        this.$nextTick(() => {\n          downloadPPTX(vm.presentationFormName).then(() => {\n            vm.$store.commit('setIsPresentationEditable', wasPresentationEditable);\n            vm.$store.commit('setPageLoadingStatus', false);\n          });\n        });\n      }\n    },\n\n    components: {\n      AccessControlPanel\n    },\n  }\n</script>\n\n<style scoped>\n  .formStyle {\n    display: inline-block;\n    text-align: left;\n    margin-right: 8px;\n  }ß\n  .errorMsg {\n    margin-bottom: 18px;\n  }\n  .el-form-item__label {\n    font-weight: bold;\n  }\n  .el-card {\n    margin-bottom: 10px;\n  }\n  .details-card {\n    overflow-x: auto;\n  }\n  .download-section {\n    text-align:center;\n    vertical-align:middle;\n    margin-top: 1.5rem;\n  }\n  .options-section {\n    text-align:center;\n    vertical-align:middle;\n    margin-top: 1.5rem;\n  }\n  .v-divide {\n    float: left;\n    height: 6rem;\n    margin-top: -1.5rem;\n  }\n</style>\n"]}]}