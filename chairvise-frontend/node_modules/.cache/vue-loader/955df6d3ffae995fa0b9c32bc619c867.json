{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\DependencyChartSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\DependencyChartSectionDetail.vue","mtime":1592326180000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DependencyChart from '@/components/sectionDetail/chart/DependencyChart.vue'\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\nimport {generateBorderColor, generateBackgroundColor} from '@/common/color'\n\nexport default {\n  name: \"DependencyChartSectionDetail\",\n\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      editFormSelectionsRule: [{\n        validator: (rule, value, callback) => {\n          if (value.expression.length === 0 || value.expression.rename === 0) {\n            return callback(new Error('Please specify all field for the selection'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormInvolvedRecordsRule: [{\n        validator: (rule, value, callback) => {\n          if (value.length < 1) {\n            return callback(new Error('There must be one record involved'))\n          }\n          callback();\n        },\n        trigger: 'change',\n      }],\n      editFormFiltersRule: [{\n        validator: (rule, value, callback) => {\n          if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n            return callback(new Error('Please specify all fields'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormSortersRule: [{\n        validator: (rule, value, callback) => {\n          if (value.field.length === 0 || value.order.length === 0) {\n            return callback(new Error('Please specify all fields'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormGroupersRule: [],\n\n      extraFormItemsRules: {\n        xAxisFieldName: [{\n          required: true,\n          message: 'There should be one field to map x axis',\n          trigger: 'blur',\n        }],          \n        xAxisFieldName2: [{\n          required: true,\n          message: 'There should be one field to map x axis',\n          trigger: 'blur',\n        }],\n        yAxisFieldName: [{\n          required: true,\n          message: 'There should be one field to map y axis',\n          trigger: 'blur',\n        }],\n      },\n\n      labels: [],\n      labels2: [],\n      dataset: {},\n      partialResult: [],\n      options: {},\n    }\n  },\n\n  computed: {\n    hasData() {\n      return this.labels.length !== 0;\n    },\n\n    chartData() {\n      return {\n        labels: this.labels,\n        labels2: this.labels2,\n        datasets: [this.dataset]\n      }\n    }\n  },\n\n  methods: {\n    updateVisualisation({result, extraData}) {\n      this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\n\n\n      // process x axis\n      this.labels = this.partialResult.map(record => record[extraData.xAxisFieldName]);\n      this.labels2 = this.partialResult.map(record => record[extraData.xAxisFieldName2]);\n\n      // process y axis\n      this.dataset = {\n        borderWidth: 1,\n        label: extraData.dataSetLabel,\n        data: this.partialResult.map(record => record[extraData.yAxisFieldName]),\n        backgroundColor: generateBackgroundColor(this.partialResult.length),\n        borderColor: generateBorderColor(this.partialResult.length),\n      };\n\n      // generate color\n      if (extraData.isColorfulBar) {\n        this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length);\n        this.dataset.borderColor = generateBorderColor(this.partialResult.length);\n      } else {\n        // choose a color in random\n        this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n        this.dataset.borderColor = generateBorderColor(this.partialResult.length)[this.partialResult.length - 1];\n      }\n\n      // to display more data\n      let toolTipFooterCallback = (tooltipItems) => {\n        let currentIndex = tooltipItems[0].index;\n        return extraData.fieldsShownInToolTips.map(f => `${f.label}: ${this.partialResult[currentIndex][f.field]}`);\n      };\n\n      // process tooltip callback\n      this.options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            gridLines: {\n              display: true\n            }\n          }],\n          xAxes: [{\n            gridLines: {\n              display: false\n            },\n            ticks: {\n              autoSkip: false\n            }\n          }]\n        },\n        legend: {\n          display: true,\n          position: 'bottom'\n        },\n        layout: {\n          padding: {\n            top: 30,\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          callbacks: {\n            footer: toolTipFooterCallback\n          }\n        },\n        plugins: {\n          datalabels: {\n            anchor: 'end',\n            align: 'end'\n          }\n        }\n      }\n    },\n\n    addTooltip(tooltips) {\n      tooltips.push({\n        label: '',\n        field: '',\n      })\n    },\n\n    removeTooltip(tooltips, tooltipToRemove) {\n      let index = tooltips.indexOf(tooltipToRemove);\n      tooltips.splice(index, 1)\n    },\n  },\n\n  components: {\n    BasicSectionDetail,\n    DependencyChart\n  }\n}\n",{"version":3,"sources":["DependencyChartSectionDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"DependencyChartSectionDetail.vue","sourceRoot":"src/components/sectionDetail","sourcesContent":["<template>\r\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\r\n                        :version=\"version\"\r\n                        :edit-form-selections-rule=\"editFormSelectionsRule\"\r\n                        :edit-form-involved-records-rule=\"editFormInvolvedRecordsRule\"\r\n                        :edit-form-filters-rule=\"editFormFiltersRule\"\r\n                        :edit-form-groupers-rule=\"editFormGroupersRule\"\r\n                        :edit-form-sorters-rule=\"editFormSortersRule\"\r\n                        :extraFormItemsRules=\"extraFormItemsRules\"\r\n                        @update-visualisation=\"updateVisualisation\">\r\n    <dependency-chart :chart-data=\"chartData\"></dependency-chart>\r\n\r\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\r\n      <el-form-item label=\"xAxis Field Name\" prop=\"extraData.xAxisFieldName\" v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-select placeholder=\"xAxisFieldName\" v-model=\"slotProps.extraData.xAxisFieldName\">\r\n          <el-option\r\n            v-for=\"selection in slotProps.editForm.selections\"\r\n            :key=\"selection.rename\"\r\n            :label=\"selection.rename\"\r\n            :value=\"selection.rename\">\r\n          </el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"xAxis Field Name 2\" prop=\"extraData.xAxisFieldName2\" v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-select placeholder=\"xAxisFieldName2\" v-model=\"slotProps.extraData.xAxisFieldName2\">\r\n          <el-option\r\n            v-for=\"selection in slotProps.editForm.selections\"\r\n            :key=\"selection.rename\"\r\n            :label=\"selection.rename\"\r\n            :value=\"selection.rename\">\r\n          </el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"yAxis Field Name\" prop=\"extraData.yAxisFieldName\" v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-select placeholder=\"yAxisFieldName\" v-model=\"slotProps.extraData.yAxisFieldName\">\r\n          <el-option\r\n            v-for=\"selection in slotProps.editForm.selections\"\r\n            :key=\"selection.rename\"\r\n            :label=\"selection.rename\"\r\n            :value=\"selection.rename\">\r\n          </el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item label=\"Legend Label Name\" prop=\"extraData.dataSetLabel\" v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-input v-model=\"slotProps.extraData.dataSetLabel\" placeholder=\"Label Name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Colorful Bar\" prop=\"extraData.isColorfulBar\" v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-switch\r\n          v-model=\"slotProps.extraData.isColorfulBar\"\r\n          active-text=\"Colorful Bar\"\r\n          inactive-text=\"Single Color Bar\">\r\n        </el-switch>\r\n      </el-form-item>\r\n      <el-form-item label=\"Num of result to display\" prop=\"extraData.numOfResultToDisplay\"\r\n                    v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-slider v-model=\"slotProps.extraData.numOfResultToDisplay\" :min=\"5\" :max=\"30\"></el-slider>\r\n      </el-form-item>\r\n      <el-form-item v-if=\"slotProps.isInAdvancedMode\"\r\n                    v-for=\"(tooltip, index) in slotProps.extraData.fieldsShownInToolTips\" :label=\"'Tooltips ' + index\"\r\n                    :key=\"'tooltips' + index\">\r\n        <el-select placeholder=\"Field\" v-model=\"tooltip.field\">\r\n          <el-option\r\n            v-for=\"selection in slotProps.editForm.selections\"\r\n            :key=\"selection.rename\"\r\n            :label=\"selection.rename\"\r\n            :value=\"selection.rename\">\r\n          </el-option>\r\n        </el-select>&nbsp;\r\n        <el-input v-model=\"tooltip.label\" placeholder=\"Label Name\" style=\"width: 150px\"></el-input>&nbsp;\r\n        <el-button type=\"danger\" icon=\"el-icon-delete\" circle\r\n                   @click=\"removeTooltip(slotProps.extraData.fieldsShownInToolTips, tooltip)\"></el-button>\r\n      </el-form-item>\r\n      <el-form-item v-if=\"slotProps.isInAdvancedMode\">\r\n        <el-button type=\"success\" plain @click=\"addTooltip(slotProps.extraData.fieldsShownInToolTips)\">Add Tooltip\r\n        </el-button>\r\n      </el-form-item>\r\n    </template>\r\n  </basic-section-detail>\r\n</template>\r\n\r\n<script>\r\n  import DependencyChart from '@/components/sectionDetail/chart/DependencyChart.vue'\r\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\r\n  import {generateBorderColor, generateBackgroundColor} from '@/common/color'\r\n\r\n  export default {\r\n    name: \"DependencyChartSectionDetail\",\r\n\r\n    props: {\r\n      sectionDetail: {\r\n        type: Object,\r\n        required: true\r\n      },\r\n      presentationId: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      version: {\r\n        type: String,\r\n        required: true\r\n      }\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        editFormSelectionsRule: [{\r\n          validator: (rule, value, callback) => {\r\n            if (value.expression.length === 0 || value.expression.rename === 0) {\r\n              return callback(new Error('Please specify all field for the selection'))\r\n            }\r\n            callback();\r\n          },\r\n          trigger: 'blur',\r\n        }],\r\n        editFormInvolvedRecordsRule: [{\r\n          validator: (rule, value, callback) => {\r\n            if (value.length < 1) {\r\n              return callback(new Error('There must be one record involved'))\r\n            }\r\n            callback();\r\n          },\r\n          trigger: 'change',\r\n        }],\r\n        editFormFiltersRule: [{\r\n          validator: (rule, value, callback) => {\r\n            if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\r\n              return callback(new Error('Please specify all fields'))\r\n            }\r\n            callback();\r\n          },\r\n          trigger: 'blur',\r\n        }],\r\n        editFormSortersRule: [{\r\n          validator: (rule, value, callback) => {\r\n            if (value.field.length === 0 || value.order.length === 0) {\r\n              return callback(new Error('Please specify all fields'))\r\n            }\r\n            callback();\r\n          },\r\n          trigger: 'blur',\r\n        }],\r\n        editFormGroupersRule: [],\r\n\r\n        extraFormItemsRules: {\r\n          xAxisFieldName: [{\r\n            required: true,\r\n            message: 'There should be one field to map x axis',\r\n            trigger: 'blur',\r\n          }],          \r\n          xAxisFieldName2: [{\r\n            required: true,\r\n            message: 'There should be one field to map x axis',\r\n            trigger: 'blur',\r\n          }],\r\n          yAxisFieldName: [{\r\n            required: true,\r\n            message: 'There should be one field to map y axis',\r\n            trigger: 'blur',\r\n          }],\r\n        },\r\n\r\n        labels: [],\r\n        labels2: [],\r\n        dataset: {},\r\n        partialResult: [],\r\n        options: {},\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      hasData() {\r\n        return this.labels.length !== 0;\r\n      },\r\n\r\n      chartData() {\r\n        return {\r\n          labels: this.labels,\r\n          labels2: this.labels2,\r\n          datasets: [this.dataset]\r\n        }\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      updateVisualisation({result, extraData}) {\r\n        this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\r\n\r\n\r\n        // process x axis\r\n        this.labels = this.partialResult.map(record => record[extraData.xAxisFieldName]);\r\n        this.labels2 = this.partialResult.map(record => record[extraData.xAxisFieldName2]);\r\n\r\n        // process y axis\r\n        this.dataset = {\r\n          borderWidth: 1,\r\n          label: extraData.dataSetLabel,\r\n          data: this.partialResult.map(record => record[extraData.yAxisFieldName]),\r\n          backgroundColor: generateBackgroundColor(this.partialResult.length),\r\n          borderColor: generateBorderColor(this.partialResult.length),\r\n        };\r\n\r\n        // generate color\r\n        if (extraData.isColorfulBar) {\r\n          this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length);\r\n          this.dataset.borderColor = generateBorderColor(this.partialResult.length);\r\n        } else {\r\n          // choose a color in random\r\n          this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\r\n          this.dataset.borderColor = generateBorderColor(this.partialResult.length)[this.partialResult.length - 1];\r\n        }\r\n\r\n        // to display more data\r\n        let toolTipFooterCallback = (tooltipItems) => {\r\n          let currentIndex = tooltipItems[0].index;\r\n          return extraData.fieldsShownInToolTips.map(f => `${f.label}: ${this.partialResult[currentIndex][f.field]}`);\r\n        };\r\n\r\n        // process tooltip callback\r\n        this.options = {\r\n          scales: {\r\n            yAxes: [{\r\n              ticks: {\r\n                beginAtZero: true\r\n              },\r\n              gridLines: {\r\n                display: true\r\n              }\r\n            }],\r\n            xAxes: [{\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                autoSkip: false\r\n              }\r\n            }]\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: 'bottom'\r\n          },\r\n          layout: {\r\n            padding: {\r\n              top: 30,\r\n            }\r\n          },\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          tooltips: {\r\n            callbacks: {\r\n              footer: toolTipFooterCallback\r\n            }\r\n          },\r\n          plugins: {\r\n            datalabels: {\r\n              anchor: 'end',\r\n              align: 'end'\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      addTooltip(tooltips) {\r\n        tooltips.push({\r\n          label: '',\r\n          field: '',\r\n        })\r\n      },\r\n\r\n      removeTooltip(tooltips, tooltipToRemove) {\r\n        let index = tooltips.indexOf(tooltipToRemove);\r\n        tooltips.splice(index, 1)\r\n      },\r\n    },\r\n\r\n    components: {\r\n      BasicSectionDetail,\r\n      DependencyChart\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}