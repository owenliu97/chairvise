{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewPresentation.vue?vue&type=style&index=0&id=4e28e890&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewPresentation.vue","mtime":1591977110000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.errorMsg {\n    margin-bottom: 18px;\n}\n",{"version":3,"sources":["NewPresentation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoMA;AACA;AACA","file":"NewPresentation.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <el-main>\n        <el-card>\n            <div slot=\"header\" class=\"clearfix\">\n                <span> Create New Presentation </span>\n            </div>\n            <el-alert v-if=\"isNewPresentation && !isLogin\" title=\"Please login to create new presentation\" type=\"error\" show-icon\n                    class=\"errorMsg\"/>\n            <el-form v-else :rules=\"rules\" ref=\"presentationForm\"\n                    :model=\"presentationForm\" v-loading=\"isLoading\">\n\n                <el-form-item label=\"Name\" :prop=\"'name'\" >\n                    <el-col>\n                        <el-input v-model=\"presentationFormName\" placeholder=\"Enter name\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item label=\"Description\">\n                    <el-col>\n                        <el-input type=\"textarea\" v-model=\"presentationFormDescription\" placeholder=\"Enter description\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"uploadClicked()\">Save</el-button>\n                </el-form-item>\n            </el-form>\n        </el-card>\n\n        <!-- dialogs -->\n        <el-dialog\n        title=\"Confirm\"\n        :visible.sync=\"hasSubmitted\"\n        width=\"30%\" center>\n            <span> Are you sure that the presentation details are correct?</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button v-on:click=\"hasSubmitted = false\">Cancel</el-button>\n                <el-button type=\"primary\" v-on:click=\"addPresentation\">Confirm</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog\n        title=\"Success\"\n        :visible.sync=\"saveSuccess\"\n        width=\"30%\" center>\n            <span>You have successfully added a new presentation</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"primary\" v-on:click=\"closeSuccess\">Sure</el-button>\n            </span>\n        </el-dialog>\n        <!-- end of dialogs -->\n    </el-main>\n</template>\n\n<script>\n    import {AccessLevel, ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\n\n    export default {\n        name: 'PresentationBrief',\n        props: {\n            id: String\n        },\n        watch: {\n            'id'() {\n                this.updatePresentationForm()\n            },\n        },\n        mounted() {\n            this.updatePresentationForm();\n            this.$store.dispatch('getVersionList')\n        },\n        computed: {\n            isLogin() {\n                return this.$store.state.userInfo.isLogin\n            },\n            presentationForm() {\n                return {\n                    name: this.presentationFormName,\n                    creatorIdentifier: this.presentationFormCreatorIdentifier,\n                    description: this.presentationFormDescription,\n                }\n            },\n            presentationFormCreatorIdentifier() {\n                return this.$store.state.presentation.presentationForm.creatorIdentifier\n            },\n            presentationFormName: {\n                get() {\n                    return this.$store.state.presentation.presentationForm.name\n                },\n                set(value) {\n                    this.$store.commit('setPresentationFormField', {\n                        field: 'name',\n                        value\n                    })\n                },\n            },\n            presentationFormDescription: {\n                get() {\n                    return this.$store.state.presentation.presentationForm.description\n                },\n                set(value) {\n                    this.$store.commit('setPresentationFormField', {\n                        field: 'description',\n                        value\n                    })\n                },\n            },\n\n            isNewPresentation() {\n                return this.id === ID_NEW_PRESENTATION\n            },\n            isInEditMode() {\n                return this.isEditing || this.isNewPresentation\n            },\n            saveSuccess() {\n                return this.$store.state.presentation.isSaveSuccess\n            },\n            isLoading() {\n                return this.$store.state.presentation.presentationFormStatus.isLoading\n            },\n            isError() {\n                return this.$store.state.presentation.presentationFormStatus.isApiError\n            },\n            apiErrorMsg() {\n                return this.$store.state.presentation.presentationFormStatus.apiErrorMsg\n            }\n        },\n        data() {\n            return {\n                hasSubmitted: false,\n                rules: {\n                    name: [\n                        {required: true, message: 'Please enter presentation name', trigger: 'blur'},\n                        {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n                    ],\n                }\n            }\n        },\n        methods: {\n            addPresentation() {\n                this.hasSubmitted = false;\n                this.$store.dispatch('savePresentation').then(() => {\n                    if (this.isNewPresentation && !this.isLogin) {\n                        return\n                    }\n                });\n            },\n            updatePresentationForm() {\n                if (this.$refs['presentationForm']) {\n                    this.$refs['presentationForm'].clearValidate();\n                }\n                this.$store.commit('resetPresentationForm');\n                if (this.id !== ID_NEW_PRESENTATION) {\n                    this.$store.dispatch('getPresentation', this.id)\n                        .then(() => {\n                            // check writable or not\n                            this.$store.dispatch('fetchAccessControlList', this.id)\n                                .then(() => {\n                                    let currentUser = this.$store.state.userInfo.userEmail;\n                                    let accessControlList = this.$store.state.accessControl.accessControlList;\n                                    let isPresentationEditable =\n                                        currentUser === this.presentationFormCreatorIdentifier\n                                        || accessControlList.some(acl => acl.userIdentifier === currentUser && acl.accessLevel === AccessLevel.CAN_WRITE)\n                                        || accessControlList.some(acl => acl.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC && acl.accessLevel === AccessLevel.CAN_WRITE);\n                                    this.$store.commit('setIsPresentationEditable', isPresentationEditable)\n                                })\n                        })\n                } else {\n                    this.$store.dispatch(\"getVersionList\")\n                }\n            },\n            uploadClicked() {\n                this.$refs['presentationForm'].validate((valid, object) => {\n                    if (!valid) {\n                        if('name' in object) {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: object.name[0].message\n                            });\n                        }\n                        return\n                    }\n                    this.$refs['presentationForm'].clearValidate();\n                    this.hasSubmitted = true;\n                });\n            },\n            closeSuccess() {\n                this.$store.commit(\"setSaveSuccess\", false);\n                this.$router.push({\n                    name: 'analyze'\n                });\n            }\n        },\n        components: {\n        },\n    }\n</script>\n\n<style scoped>\n    .errorMsg {\n        margin-bottom: 18px;\n    }\n</style>\n"]}]}