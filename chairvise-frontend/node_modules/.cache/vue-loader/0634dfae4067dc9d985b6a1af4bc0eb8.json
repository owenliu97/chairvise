{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-full-calendar\\components\\FullCalendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-full-calendar\\components\\FullCalendar.vue","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport defaultsDeep from 'lodash.defaultsdeep'\nimport 'fullcalendar'\nimport $ from 'jquery'\n\nexport default {\n    props: {\n        events: {\n            default() {\n                return []\n            },\n        },\n\n        eventSources: {\n            default() {\n                return []\n            },\n        },\n\n        editable: {\n            default() {\n                return true\n            },\n        },\n\n        selectable: {\n            default() {\n                return true\n            },\n        },\n\n        selectHelper: {\n            default() {\n                return true\n            },\n        },\n\n        header: {\n            default() {\n                return {\n                    left:   'prev,next today',\n                    center: 'title',\n                    right:  'month,agendaWeek,agendaDay'\n                }\n            },\n        },\n\n        defaultView: {\n            default() {\n                return 'agendaWeek'\n            },\n        },\n\n        sync: {\n            default() {\n                return false\n            }\n        },\n\n        config: {\n            type: Object,\n            default() {\n                return {}\n            },\n        },\n    },\n\n    computed: {\n        defaultConfig() {\n            const self = this\n            return {\n                header: this.header,\n                defaultView: this.defaultView,\n                editable: this.editable,\n                selectable: this.selectable,\n                selectHelper: this.selectHelper,\n                aspectRatio: 2,\n                timeFormat: 'HH:mm',\n                events: this.events,\n                eventSources: this.eventSources,\n\n                eventRender(...args) {\n                    if (this.sync) {\n                        self.events = cal.fullCalendar('clientEvents')\n                    }\n                    self.$emit('event-render', ...args)\n                },\n                \n                viewRender(...args) {\n                    if (this.sync) {\n                        self.events = cal.fullCalendar('clientEvents')\n                    }\n                    self.$emit('view-render', ...args)\n                },\n\n                eventDestroy(event) {\n                    if (this.sync) {\n                        self.events = cal.fullCalendar('clientEvents')\n                    }\n                },\n\n                eventClick(...args) {\n                    self.$emit('event-selected', ...args)\n                },\n\n                eventMouseover(...args) {\n                    self.$emit('event-mouseover', ...args)\n                },\n\n                eventMouseout(...args) {\n                    self.$emit('event-mouseout', ...args)\n                },\n\n                eventDrop(...args) {\n                    self.$emit('event-drop', ...args)\n                },\n\n                eventReceive(...args) {\n                    self.$emit('event-receive', ...args)\n                },\n\n                eventResize(...args) {\n                    self.$emit('event-resize', ...args)\n                },\n\n                dayClick(...args){\n                    self.$emit('day-click', ...args)\n                },\n                select(start, end, jsEvent, view, resource) {\n                    self.$emit('event-created', {\n                        start,\n                        end,\n                        allDay: !start.hasTime() && !end.hasTime(),\n                        view,\n                        resource\n                    })\n                }\n            }\n        },\n    },\n\n    mounted() {\n        const cal = $(this.$el),\n            self = this\n\n        this.$on('remove-event', (event) => {\n            if(event && event.hasOwnProperty('id')){\n                $(this.$el).fullCalendar('removeEvents', event.id);\n            }else{\n                $(this.$el).fullCalendar('removeEvents', event);\n            }\n        })\n\n        this.$on('rerender-events', () => {\n            $(this.$el).fullCalendar('rerenderEvents')\n        })\n\n        this.$on('refetch-events', () => {\n            $(this.$el).fullCalendar('refetchEvents')\n        })\n\n        this.$on('render-event', (event) => {\n            $(this.$el).fullCalendar('renderEvent', event)\n        })\n\n        this.$on('reload-events', () => {\n            $(this.$el).fullCalendar('removeEvents')\n            $(this.$el).fullCalendar('addEventSource', this.events)\n        })\n\n        this.$on('rebuild-sources', () => {\n            $(this.$el).fullCalendar('removeEventSources')\n            this.eventSources.map(event => {\n                $(this.$el).fullCalendar('addEventSource', event)\n            })\n        })\n\n        cal.fullCalendar(defaultsDeep(this.config, this.defaultConfig))\n    },\n\n    methods: {\n        fireMethod(...options) {\n            return $(this.$el).fullCalendar(...options)\n        },\n    },\n\n    watch: {\n        events: {\n            deep: true,\n            handler(val) {\n                $(this.$el).fullCalendar('removeEvents')\n                $(this.$el).fullCalendar('addEventSource', this.events)\n            },\n        },\n        eventSources: {\n            deep: true,\n            handler(val) {\n                this.$emit('rebuild-sources')\n            },\n        },\n    },\n\n    beforeDestroy() {\n        this.$off('remove-event')\n        this.$off('rerender-events')\n        this.$off('refetch-events')\n        this.$off('render-event')\n        this.$off('reload-events')\n        this.$off('rebuild-sources')\n    },\n}\n",{"version":3,"sources":["FullCalendar.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FullCalendar.vue","sourceRoot":"node_modules/vue-full-calendar/components","sourcesContent":["<template>\n    <div ref=\"calendar\" id=\"calendar\"></div>\n</template>\n\n<script>\n    import defaultsDeep from 'lodash.defaultsdeep'\n    import 'fullcalendar'\n    import $ from 'jquery'\n\n    export default {\n        props: {\n            events: {\n                default() {\n                    return []\n                },\n            },\n\n            eventSources: {\n                default() {\n                    return []\n                },\n            },\n\n            editable: {\n                default() {\n                    return true\n                },\n            },\n\n            selectable: {\n                default() {\n                    return true\n                },\n            },\n\n            selectHelper: {\n                default() {\n                    return true\n                },\n            },\n\n            header: {\n                default() {\n                    return {\n                        left:   'prev,next today',\n                        center: 'title',\n                        right:  'month,agendaWeek,agendaDay'\n                    }\n                },\n            },\n\n            defaultView: {\n                default() {\n                    return 'agendaWeek'\n                },\n            },\n\n            sync: {\n                default() {\n                    return false\n                }\n            },\n\n            config: {\n                type: Object,\n                default() {\n                    return {}\n                },\n            },\n        },\n\n        computed: {\n            defaultConfig() {\n                const self = this\n                return {\n                    header: this.header,\n                    defaultView: this.defaultView,\n                    editable: this.editable,\n                    selectable: this.selectable,\n                    selectHelper: this.selectHelper,\n                    aspectRatio: 2,\n                    timeFormat: 'HH:mm',\n                    events: this.events,\n                    eventSources: this.eventSources,\n\n                    eventRender(...args) {\n                        if (this.sync) {\n                            self.events = cal.fullCalendar('clientEvents')\n                        }\n                        self.$emit('event-render', ...args)\n                    },\n                    \n                    viewRender(...args) {\n                        if (this.sync) {\n                            self.events = cal.fullCalendar('clientEvents')\n                        }\n                        self.$emit('view-render', ...args)\n                    },\n\n                    eventDestroy(event) {\n                        if (this.sync) {\n                            self.events = cal.fullCalendar('clientEvents')\n                        }\n                    },\n\n                    eventClick(...args) {\n                        self.$emit('event-selected', ...args)\n                    },\n\n                    eventMouseover(...args) {\n                        self.$emit('event-mouseover', ...args)\n                    },\n\n                    eventMouseout(...args) {\n                        self.$emit('event-mouseout', ...args)\n                    },\n\n                    eventDrop(...args) {\n                        self.$emit('event-drop', ...args)\n                    },\n\n                    eventReceive(...args) {\n                        self.$emit('event-receive', ...args)\n                    },\n\n                    eventResize(...args) {\n                        self.$emit('event-resize', ...args)\n                    },\n\n                    dayClick(...args){\n                        self.$emit('day-click', ...args)\n                    },\n                    select(start, end, jsEvent, view, resource) {\n                        self.$emit('event-created', {\n                            start,\n                            end,\n                            allDay: !start.hasTime() && !end.hasTime(),\n                            view,\n                            resource\n                        })\n                    }\n                }\n            },\n        },\n\n        mounted() {\n            const cal = $(this.$el),\n                self = this\n\n            this.$on('remove-event', (event) => {\n                if(event && event.hasOwnProperty('id')){\n                    $(this.$el).fullCalendar('removeEvents', event.id);\n                }else{\n                    $(this.$el).fullCalendar('removeEvents', event);\n                }\n            })\n\n            this.$on('rerender-events', () => {\n                $(this.$el).fullCalendar('rerenderEvents')\n            })\n\n            this.$on('refetch-events', () => {\n                $(this.$el).fullCalendar('refetchEvents')\n            })\n\n            this.$on('render-event', (event) => {\n                $(this.$el).fullCalendar('renderEvent', event)\n            })\n\n            this.$on('reload-events', () => {\n                $(this.$el).fullCalendar('removeEvents')\n                $(this.$el).fullCalendar('addEventSource', this.events)\n            })\n\n            this.$on('rebuild-sources', () => {\n                $(this.$el).fullCalendar('removeEventSources')\n                this.eventSources.map(event => {\n                    $(this.$el).fullCalendar('addEventSource', event)\n                })\n            })\n\n            cal.fullCalendar(defaultsDeep(this.config, this.defaultConfig))\n        },\n\n        methods: {\n            fireMethod(...options) {\n                return $(this.$el).fullCalendar(...options)\n            },\n        },\n\n        watch: {\n            events: {\n                deep: true,\n                handler(val) {\n                    $(this.$el).fullCalendar('removeEvents')\n                    $(this.$el).fullCalendar('addEventSource', this.events)\n                },\n            },\n            eventSources: {\n                deep: true,\n                handler(val) {\n                    this.$emit('rebuild-sources')\n                },\n            },\n        },\n\n        beforeDestroy() {\n            this.$off('remove-event')\n            this.$off('rerender-events')\n            this.$off('refetch-events')\n            this.$off('render-event')\n            this.$off('reload-events')\n            this.$off('rebuild-sources')\n        },\n    }\n</script>\n"]}]}