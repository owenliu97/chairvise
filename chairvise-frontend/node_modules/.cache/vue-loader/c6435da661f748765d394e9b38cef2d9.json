{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewConference.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\NewConference.vue","mtime":1591977142000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Datepicker from 'vuejs-datepicker';\nimport {ID_NEW_CONFERENCE} from \"../common/const\";\nexport default {\n    name: \"AddConference\",\n    props: {\n        id: String\n    },\n    watch: {\n        'id'() {\n            this.updateConferenceForm()\n        },\n    },\n    mounted() {\n        this.updateConferenceForm();\n    },\n    computed: {\n        isLogin() {\n            return this.$store.state.userInfo.isLogin\n        },\n        conferenceForm() {\n            return {\n                name: this.conferenceFormName,\n                description: this.conferenceFormDescription,\n                date: this.conferenceFormDate,\n            }\n        },\n        conferenceFormName: {\n            get() {\n                return this.$store.state.conference.conferenceForm.name\n            },\n            set(value) {\n                this.$store.commit('setConferenceFormField', {\n                    field: 'name',\n                    value\n                })\n            },\n        },\n        conferenceFormDescription: {\n            get() {\n                return this.$store.state.conference.conferenceForm.description\n            },\n            set(value) {\n                this.$store.commit('setConferenceFormField', {\n                    field: 'description',\n                    value\n                })\n            },\n        },\n        conferenceFormDate: {\n            get() {\n                return this.$store.state.conference.conferenceForm.date\n            },\n            set(value) {\n                this.$store.commit('setConferenceFormField', {\n                    field: 'date',\n                    value\n                })\n            },\n        },\n        isNewConference() {\n            return this.id === ID_NEW_CONFERENCE\n        },\n        isInEditMode() {\n            return this.isEditing || this.isNewPresentation\n        },\n        saveSuccess() {\n            return this.$store.state.conference.isSaveSuccess\n        },\n        isLoading() {\n            return this.$store.state.conference.conferenceFormStatus.isLoading\n        },\n        isError() {\n            return this.$store.state.conference.conferenceFormStatus.isApiError\n        },\n        apiErrorMsg() {\n            return this.$store.state.conference.conferenceFormStatus.apiErrorMsg\n        }\n    },\n    methods: {\n        addConference() {\n            this.hasSubmitted = false;\n            this.$store.dispatch('saveConference').then(() => {\n                    if (this.isNewConference && !this.isLogin) {\n                        return\n                    }\n                });\n        },\n        updateConferenceForm() {\n            if (this.$refs['conferenceForm']) {\n                this.$refs['conferenceForm'].clearValidate();\n            }\n            this.$store.commit('resetConferenceForm');\n        },\n        uploadClicked() {\n            this.$refs['conferenceForm'].validate((valid, object) => {\n                if (!valid) {\n                    if('name' in object) {\n                        this.$notify.error({\n                            title: 'Error',\n                            message: object.name[0].message\n                        });\n                    }\n                    if ('date' in object) {\n                        this.$notify.error({\n                            title: 'Error',\n                            message: object.date[0].message,\n                            offset: 100\n                        });\n                    }\n                    return\n                }\n                this.$refs['conferenceForm'].clearValidate();\n                this.hasSubmitted = true;\n            });\n        },\n        closeSuccess() {\n            this.$store.commit(\"setSaveSuccess\", false);\n            this.$router.push({\n                name: 'conference'\n            });\n        }\n    },\n    components: {\n        Datepicker,\n    },\n    data() {\n        return {\n            hasSubmitted: false,\n            rules: {\n                name: [\n                    {required: true, message: 'Please enter conference name', trigger: 'blur'},\n                    {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n                ],\n                date: [\n                    {required: true, message: 'Please select a conference date and time.', trigger: 'blur'},\n                ]\n            }\n        }\n    },\n}\n",{"version":3,"sources":["NewConference.vue"],"names":[],"mappingsfile":"NewConference.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <el-main>\n        <el-card>\n            <div slot=\"header\" class=\"clearfix\">\n                <span> Add New Conference  </span>\n            </div>\n            <el-alert v-if=\"isNewConference && !isLogin\" title=\"Please login to create new conference\" type=\"error\" show-icon\n                      class=\"errorMsg\"/>\n            <el-form v-else :rules=\"rules\" ref=\"conferenceForm\"\n                     :model=\"conferenceForm\" v-loading=\"isLoading\">\n                <el-form-item label=\"Name\" :prop=\"'name'\" >\n                    <el-col>\n                        <el-input v-model=\"conferenceFormName\" placeholder=\"Enter name\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item label=\"Description\">\n                    <el-col>\n                        <el-input v-model=\"conferenceFormDescription\" placeholder=\"Enter description\"/>\n                    </el-col>\n                </el-form-item>\n                <el-form-item label=\"Conference Date\" :prop=\"'date'\">\n                    <el-col>\n                        <el-date-picker\n                                v-model=\"conferenceFormDate\"\n                                type=\"datetime\"\n                                placeholder=\"Select date and time\">\n                        </el-date-picker>\n                    </el-col>\n                </el-form-item>\n\n                <el-form-item>\n                    <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"uploadClicked()\">Save</el-button>\n                </el-form-item>\n            </el-form>\n        </el-card>\n\n\n        <!-- dialogs -->\n        <el-dialog\n        title=\"Confirm\"\n        :visible.sync=\"hasSubmitted\"\n        width=\"30%\" center>\n            <span> Are you sure that the conference details are correct?</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button v-on:click=\"hasSubmitted = false\">Cancel</el-button>\n                <el-button type=\"primary\" v-on:click=\"addConference\">Confirm</el-button>\n            </span>\n        </el-dialog>\n        <el-dialog\n        title=\"Success\"\n        :visible.sync=\"saveSuccess\"\n        width=\"30%\" center>\n            <span>You have successfully added a new conference</span>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"primary\" v-on:click=\"closeSuccess\">Sure</el-button>\n            </span>\n        </el-dialog>\n        <!-- end of dialogs -->\n    </el-main>\n</template>\n\n<script>\n    import Datepicker from 'vuejs-datepicker';\n    import {ID_NEW_CONFERENCE} from \"../common/const\";\n    export default {\n        name: \"AddConference\",\n        props: {\n            id: String\n        },\n        watch: {\n            'id'() {\n                this.updateConferenceForm()\n            },\n        },\n        mounted() {\n            this.updateConferenceForm();\n        },\n        computed: {\n            isLogin() {\n                return this.$store.state.userInfo.isLogin\n            },\n            conferenceForm() {\n                return {\n                    name: this.conferenceFormName,\n                    description: this.conferenceFormDescription,\n                    date: this.conferenceFormDate,\n                }\n            },\n            conferenceFormName: {\n                get() {\n                    return this.$store.state.conference.conferenceForm.name\n                },\n                set(value) {\n                    this.$store.commit('setConferenceFormField', {\n                        field: 'name',\n                        value\n                    })\n                },\n            },\n            conferenceFormDescription: {\n                get() {\n                    return this.$store.state.conference.conferenceForm.description\n                },\n                set(value) {\n                    this.$store.commit('setConferenceFormField', {\n                        field: 'description',\n                        value\n                    })\n                },\n            },\n            conferenceFormDate: {\n                get() {\n                    return this.$store.state.conference.conferenceForm.date\n                },\n                set(value) {\n                    this.$store.commit('setConferenceFormField', {\n                        field: 'date',\n                        value\n                    })\n                },\n            },\n            isNewConference() {\n                return this.id === ID_NEW_CONFERENCE\n            },\n            isInEditMode() {\n                return this.isEditing || this.isNewPresentation\n            },\n            saveSuccess() {\n                return this.$store.state.conference.isSaveSuccess\n            },\n            isLoading() {\n                return this.$store.state.conference.conferenceFormStatus.isLoading\n            },\n            isError() {\n                return this.$store.state.conference.conferenceFormStatus.isApiError\n            },\n            apiErrorMsg() {\n                return this.$store.state.conference.conferenceFormStatus.apiErrorMsg\n            }\n        },\n        methods: {\n            addConference() {\n                this.hasSubmitted = false;\n                this.$store.dispatch('saveConference').then(() => {\n                        if (this.isNewConference && !this.isLogin) {\n                            return\n                        }\n                    });\n            },\n            updateConferenceForm() {\n                if (this.$refs['conferenceForm']) {\n                    this.$refs['conferenceForm'].clearValidate();\n                }\n                this.$store.commit('resetConferenceForm');\n            },\n            uploadClicked() {\n                this.$refs['conferenceForm'].validate((valid, object) => {\n                    if (!valid) {\n                        if('name' in object) {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: object.name[0].message\n                            });\n                        }\n                        if ('date' in object) {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: object.date[0].message,\n                                offset: 100\n                            });\n                        }\n                        return\n                    }\n                    this.$refs['conferenceForm'].clearValidate();\n                    this.hasSubmitted = true;\n                });\n            },\n            closeSuccess() {\n                this.$store.commit(\"setSaveSuccess\", false);\n                this.$router.push({\n                    name: 'conference'\n                });\n            }\n        },\n        components: {\n            Datepicker,\n        },\n        data() {\n            return {\n                hasSubmitted: false,\n                rules: {\n                    name: [\n                        {required: true, message: 'Please enter conference name', trigger: 'blur'},\n                        {min: 3, message: 'The length should be more than 3 character', trigger: 'blur'}\n                    ],\n                    date: [\n                        {required: true, message: 'Please select a conference date and time.', trigger: 'blur'},\n                    ]\n                }\n            }\n        },\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}