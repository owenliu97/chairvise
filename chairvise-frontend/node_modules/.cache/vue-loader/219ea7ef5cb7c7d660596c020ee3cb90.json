{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\PieChartSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\PieChartSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\nimport PieChart from '@/components/sectionDetail/chart/PieChart.vue'\nimport {generateBorderColor, generateBackgroundColor} from '@/common/color'\n\nexport default {\n  name: \"PieChartSectionDetail\",\n\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n\n      labels: [],\n      dataset: {},\n      options: {},\n    }\n  },\n\n  computed: {\n    hasData() {\n      return this.labels.length !== 0;\n    },\n\n    chartData() {\n      return {\n        labels: this.labels,\n        datasets: [this.dataset]\n      }\n    }\n  },\n\n  methods: {\n    updateVisualisation({result, extraData}) {\n      let displayedResult = result.slice(0, extraData.numOfResultToDisplay);\n      let remainedResult = result.slice(extraData.numOfResultToDisplay, result.length);\n\n      // process category\n      this.labels = displayedResult.map(record => record[extraData.categoryFieldName]);\n      if (remainedResult.length !== 0) {\n        this.labels.push(\"Other\");\n      }\n\n      // process value\n      let data = displayedResult.map(record => record[extraData.valueFieldName]);\n      if (remainedResult.length !== 0) {\n        // take sum of the rest\n        data.push(remainedResult.map(record => record[extraData.valueFieldName]).reduce((a, b) => a + b, 0));\n      }\n\n      // generate dataset\n      this.dataset = {\n        borderWidth: 1,\n        label: extraData.dataSetLabel,\n        data,\n        backgroundColor: generateBackgroundColor(data.length),\n        borderColor: generateBorderColor(data.length),\n      };\n\n      // process options\n      this.options = {\n        legend: {\n          display: true,\n          position: 'bottom'\n        },\n        layout: {\n          padding: {\n            top: 15,\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          datalabels: {\n            // show both value and percentage\n            formatter: (value, ctx) => {\n              let sum = 0;\n              let dataArr = ctx.chart.data.datasets[0].data;\n              dataArr.map(data => {\n                sum += data;\n              });\n              let percentage = (value * 100 / sum).toFixed(2) + \"%\";\n              return `${percentage} (${value})`;\n            },\n          }\n        }\n      }\n    }\n  },\n\n  components: {\n    BasicSectionDetail,\n    PieChart\n  }\n}\n",{"version":3,"sources":["PieChartSectionDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"PieChartSectionDetail.vue","sourceRoot":"src/components/sectionDetail","sourcesContent":["<template>\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\n                        :version=\"version\"\n                        :extraFormItemsRules=\"{}\"\n                        @update-visualisation=\"updateVisualisation\">\n    <pie-chart :chart-data=\"chartData\" :options=\"options\"></pie-chart>\n\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\n      <el-form-item label=\"Category Field Name\" prop=\"extraData.categoryFieldName\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"categoryFieldName\" v-model=\"slotProps.extraData.categoryFieldName\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Value Field Name\" prop=\"extraData.valueFieldName\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"valueFieldName\" v-model=\"slotProps.extraData.valueFieldName\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Num of result to display\" prop=\"extraData.numOfResultToDisplay\"\n                    v-if=\"slotProps.isInAdvancedMode\">\n        <el-slider v-model=\"slotProps.extraData.numOfResultToDisplay\" :min=\"5\" :max=\"30\"></el-slider>\n      </el-form-item>\n    </template>\n  </basic-section-detail>\n</template>\n\n<script>\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n  import PieChart from '@/components/sectionDetail/chart/PieChart.vue'\n  import {generateBorderColor, generateBackgroundColor} from '@/common/color'\n\n  export default {\n    name: \"PieChartSectionDetail\",\n\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      }\n    },\n\n    data() {\n      return {\n\n        labels: [],\n        dataset: {},\n        options: {},\n      }\n    },\n\n    computed: {\n      hasData() {\n        return this.labels.length !== 0;\n      },\n\n      chartData() {\n        return {\n          labels: this.labels,\n          datasets: [this.dataset]\n        }\n      }\n    },\n\n    methods: {\n      updateVisualisation({result, extraData}) {\n        let displayedResult = result.slice(0, extraData.numOfResultToDisplay);\n        let remainedResult = result.slice(extraData.numOfResultToDisplay, result.length);\n\n        // process category\n        this.labels = displayedResult.map(record => record[extraData.categoryFieldName]);\n        if (remainedResult.length !== 0) {\n          this.labels.push(\"Other\");\n        }\n\n        // process value\n        let data = displayedResult.map(record => record[extraData.valueFieldName]);\n        if (remainedResult.length !== 0) {\n          // take sum of the rest\n          data.push(remainedResult.map(record => record[extraData.valueFieldName]).reduce((a, b) => a + b, 0));\n        }\n\n        // generate dataset\n        this.dataset = {\n          borderWidth: 1,\n          label: extraData.dataSetLabel,\n          data,\n          backgroundColor: generateBackgroundColor(data.length),\n          borderColor: generateBorderColor(data.length),\n        };\n\n        // process options\n        this.options = {\n          legend: {\n            display: true,\n            position: 'bottom'\n          },\n          layout: {\n            padding: {\n              top: 15,\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false,\n          plugins: {\n            datalabels: {\n              // show both value and percentage\n              formatter: (value, ctx) => {\n                let sum = 0;\n                let dataArr = ctx.chart.data.datasets[0].data;\n                dataArr.map(data => {\n                  sum += data;\n                });\n                let percentage = (value * 100 / sum).toFixed(2) + \"%\";\n                return `${percentage} (${value})`;\n              },\n            }\n          }\n        }\n      }\n    },\n\n    components: {\n      BasicSectionDetail,\n      PieChart\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}