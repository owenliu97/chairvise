{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\AccessControlPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\AccessControlPanel.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\n\nexport default {\n  name: \"AccessControlPanel\",\n\n  props: {\n    presentationId: {\n      type: String,\n      required: true\n    }\n  },\n\n  watch: {\n    'presentationId': {\n      immediate: true,\n      handler: 'fetchAccessControlList'\n    }\n  },\n\n  data() {\n    return {\n      accessControlFormRule: {\n        userIdentifier: [\n          {required: true, message: 'Please enter the email', trigger: 'blur'},\n          {type: 'email', message: 'Please enter a valid email', trigger: ['blur']},\n          {\n            validator: (rule, value, callback) => {\n              if (this.accessControlList.some(ele => ele.userIdentifier === value)) {\n                callback(new Error('There is existent access control for the user'));\n              } else {\n                callback();\n              }\n            },\n            trigger: 'blur'\n          }\n        ],\n        accessLevel: [\n          {required: true, message: 'Please give an access level', trigger: 'blur'},\n        ]\n      },\n      currentUrl: '',\n    }\n  },\n\n  beforeUpdate() {\n    this.currentUrl = window.location.href;\n  },\n\n  computed: {\n\n    isAccessControlPanelLoading() {\n      return this.$store.state.accessControl.accessControlListStatus.isLoading\n        || this.$store.state.accessControl.accessControlFormStatus.isLoading\n    },\n\n    isAccessControlListApiError() {\n      return this.$store.state.accessControl.accessControlListStatus.isApiError\n    },\n\n    accessControlListApiErrorMsg() {\n      return this.$store.state.accessControl.accessControlListStatus.apiErrorMsg\n    },\n\n    isAccessControlFormApiError() {\n      return this.$store.state.accessControl.accessControlFormStatus.isApiError\n    },\n\n    accessControlFormApiErrorMsg() {\n      return this.$store.state.accessControl.accessControlFormStatus.apiErrorMsg\n    },\n\n\n    accessControlList() {\n      // filter out public access control in the ACL\n      return this.$store.state.accessControl.accessControlList\n        .filter(ac => ac.userIdentifier !== SPECIAL_IDENTIFIER_PUBLIC)\n    },\n\n    publicAccessLevel() {\n      let publicAccessLevelControl =\n        this.$store.state.accessControl.accessControlList.find(ac => ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC);\n      if (publicAccessLevelControl === undefined) {\n        return 'OFF'\n      }\n      return publicAccessLevelControl.accessLevel\n    },\n\n    accessControlForm() {\n      return {\n        userIdentifier: this.accessControlFormUserIdentifier,\n        accessLevel: this.accessControlFormAccessLevel,\n      }\n    },\n\n    accessControlFormUserIdentifier: {\n      get() {\n        return this.$store.state.accessControl.accessControlForm.userIdentifier\n      },\n      set(value) {\n        this.$store.commit('setAccessControlFormField', {\n          field: 'userIdentifier',\n          value\n        })\n      },\n    },\n    accessControlFormAccessLevel: {\n      get() {\n        return this.$store.state.accessControl.accessControlForm.accessLevel\n      },\n      set(value) {\n        this.$store.commit('setAccessControlFormField', {\n          field: 'accessLevel',\n          value\n        })\n      },\n    },\n  },\n\n  methods: {\n    modifyPublicAccessControl(accessLevel) {\n      let publicAccessControl =\n        this.$store.state.accessControl.accessControlList.find(ac => ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC);\n\n      // delete\n      if (accessLevel === 'OFF' && publicAccessControl !== undefined) {\n        this.$store.dispatch('deleteAccessControl',\n          {\n            presentationId: this.presentationId,\n            id: publicAccessControl.id,\n          }\n        );\n        return;\n      }\n\n      if (publicAccessControl === undefined) {\n        // create if not exist\n        this.$store.dispatch('addAccessControl', {\n          presentationId: this.presentationId,\n          userIdentifier: SPECIAL_IDENTIFIER_PUBLIC,\n          accessLevel\n        })\n      } else {\n        // update if exist\n        this.$store.dispatch('updateAccessControl',\n          {\n            presentationId: this.presentationId,\n            id: publicAccessControl.id,\n            accessLevel\n          }\n        );\n      }\n    },\n\n    fetchAccessControlList() {\n      if (this.presentationId === ID_NEW_PRESENTATION) {\n        return;\n      }\n      this.$store.dispatch('fetchAccessControlList', this.presentationId)\n    },\n\n    updateAccessControl({id}, $event) {\n      this.$store.dispatch('updateAccessControl',\n        {\n          presentationId: this.presentationId,\n          id,\n          accessLevel: $event\n        }\n      );\n    },\n    deleteAccessControl({id}) {\n      this.$store.dispatch('deleteAccessControl',\n        {\n          presentationId: this.presentationId,\n          id,\n        }\n      );\n    },\n    addAccessControl() {\n      this.$refs['accessControlForm'].validate((valid) => {\n        if (!valid) {\n          return\n        }\n        this.$store.dispatch('addAccessControl', {\n          presentationId: this.presentationId,\n          userIdentifier: this.accessControlFormUserIdentifier,\n          accessLevel: this.accessControlFormAccessLevel\n        })\n          .then(() => {\n            this.accessControlFormUserIdentifier = '';\n            this.accessControlFormAccessLevel = '';\n            this.$refs['accessControlForm'].resetFields();\n          });\n      });\n    },\n  }\n}\n",{"version":3,"sources":["AccessControlPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccessControlPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div v-loading=\"isAccessControlPanelLoading\">\n    <h4>Shareable Link</h4>\n    <el-input\n      :value=\"currentUrl\"\n      @focus=\"$event.target.select()\">\n      <template slot=\"prepend\">Any one with the link</template>\n      <template slot=\"append\">\n        <el-select :value=\"publicAccessLevel\" @change=\"modifyPublicAccessControl($event)\" style=\"width: 150px\">\n          <el-option label=\"Cannot Access\" value=\"OFF\"></el-option>\n          <el-option label=\"Can View\" value=\"CAN_READ\"></el-option>\n          <el-option label=\"Can Edit\" value=\"CAN_WRITE\"></el-option>\n        </el-select>\n      </template>\n    </el-input>\n    <h4>Specific Access Control</h4>\n    <el-alert v-if=\"isAccessControlListApiError\" :title=\"accessControlListApiErrorMsg\" type=\"error\" show-icon\n              class=\"errorAlert\"/>\n    <el-table\n      :data=\"accessControlList\"\n      style=\"width: 100%\" emptyText=\"No Access Control for this Presentation!\">\n      <el-table-column\n        prop=\"userIdentifier\"\n        label=\"Email\">\n      </el-table-column>\n      <el-table-column\n        label=\"Access Level\">\n        <template slot-scope=\"scope\">\n          <el-select :value=\"scope.row.accessLevel\" placeholder=\"Select the permission\"\n                     @change=\"updateAccessControl(scope.row, $event)\">\n            <el-option label=\"View\" value=\"CAN_READ\"></el-option>\n            <el-option label=\"Edit\" value=\"CAN_WRITE\"></el-option>\n          </el-select>&nbsp;\n          <el-button\n            type=\"danger\"\n            @click=\"deleteAccessControl(scope.row)\" icon=\"el-icon-delete\" circle></el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <h4>Add New Access Control</h4>\n    <el-alert v-if=\"isAccessControlFormApiError\" :title=\"accessControlFormApiErrorMsg\" type=\"error\" show-icon\n              class=\"errorAlert\"/>\n    <el-form ref=\"accessControlForm\" label-position=\"left\" label-width=\"120px\" :model=\"accessControlForm\"\n             :rules=\"accessControlFormRule\">\n      <el-form-item label=\"Email address\" prop=\"userIdentifier\">\n        <el-input v-model=\"accessControlFormUserIdentifier\" placeholder=\"Email of the user to share\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Permissions\" prop=\"accessLevel\">\n        <el-select v-model=\"accessControlFormAccessLevel\" placeholder=\"Permission the user will have\"\n                   style=\"width: 100%\">\n          <el-option label=\"View\" value=\"CAN_READ\"></el-option>\n          <el-option label=\"Edit\" value=\"CAN_WRITE\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"addAccessControl()\">Add</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\n  import {ID_NEW_PRESENTATION, SPECIAL_IDENTIFIER_PUBLIC} from \"@/common/const\";\n\n  export default {\n    name: \"AccessControlPanel\",\n\n    props: {\n      presentationId: {\n        type: String,\n        required: true\n      }\n    },\n\n    watch: {\n      'presentationId': {\n        immediate: true,\n        handler: 'fetchAccessControlList'\n      }\n    },\n\n    data() {\n      return {\n        accessControlFormRule: {\n          userIdentifier: [\n            {required: true, message: 'Please enter the email', trigger: 'blur'},\n            {type: 'email', message: 'Please enter a valid email', trigger: ['blur']},\n            {\n              validator: (rule, value, callback) => {\n                if (this.accessControlList.some(ele => ele.userIdentifier === value)) {\n                  callback(new Error('There is existent access control for the user'));\n                } else {\n                  callback();\n                }\n              },\n              trigger: 'blur'\n            }\n          ],\n          accessLevel: [\n            {required: true, message: 'Please give an access level', trigger: 'blur'},\n          ]\n        },\n        currentUrl: '',\n      }\n    },\n\n    beforeUpdate() {\n      this.currentUrl = window.location.href;\n    },\n\n    computed: {\n\n      isAccessControlPanelLoading() {\n        return this.$store.state.accessControl.accessControlListStatus.isLoading\n          || this.$store.state.accessControl.accessControlFormStatus.isLoading\n      },\n\n      isAccessControlListApiError() {\n        return this.$store.state.accessControl.accessControlListStatus.isApiError\n      },\n\n      accessControlListApiErrorMsg() {\n        return this.$store.state.accessControl.accessControlListStatus.apiErrorMsg\n      },\n\n      isAccessControlFormApiError() {\n        return this.$store.state.accessControl.accessControlFormStatus.isApiError\n      },\n\n      accessControlFormApiErrorMsg() {\n        return this.$store.state.accessControl.accessControlFormStatus.apiErrorMsg\n      },\n\n\n      accessControlList() {\n        // filter out public access control in the ACL\n        return this.$store.state.accessControl.accessControlList\n          .filter(ac => ac.userIdentifier !== SPECIAL_IDENTIFIER_PUBLIC)\n      },\n\n      publicAccessLevel() {\n        let publicAccessLevelControl =\n          this.$store.state.accessControl.accessControlList.find(ac => ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC);\n        if (publicAccessLevelControl === undefined) {\n          return 'OFF'\n        }\n        return publicAccessLevelControl.accessLevel\n      },\n\n      accessControlForm() {\n        return {\n          userIdentifier: this.accessControlFormUserIdentifier,\n          accessLevel: this.accessControlFormAccessLevel,\n        }\n      },\n\n      accessControlFormUserIdentifier: {\n        get() {\n          return this.$store.state.accessControl.accessControlForm.userIdentifier\n        },\n        set(value) {\n          this.$store.commit('setAccessControlFormField', {\n            field: 'userIdentifier',\n            value\n          })\n        },\n      },\n      accessControlFormAccessLevel: {\n        get() {\n          return this.$store.state.accessControl.accessControlForm.accessLevel\n        },\n        set(value) {\n          this.$store.commit('setAccessControlFormField', {\n            field: 'accessLevel',\n            value\n          })\n        },\n      },\n    },\n\n    methods: {\n      modifyPublicAccessControl(accessLevel) {\n        let publicAccessControl =\n          this.$store.state.accessControl.accessControlList.find(ac => ac.userIdentifier === SPECIAL_IDENTIFIER_PUBLIC);\n\n        // delete\n        if (accessLevel === 'OFF' && publicAccessControl !== undefined) {\n          this.$store.dispatch('deleteAccessControl',\n            {\n              presentationId: this.presentationId,\n              id: publicAccessControl.id,\n            }\n          );\n          return;\n        }\n\n        if (publicAccessControl === undefined) {\n          // create if not exist\n          this.$store.dispatch('addAccessControl', {\n            presentationId: this.presentationId,\n            userIdentifier: SPECIAL_IDENTIFIER_PUBLIC,\n            accessLevel\n          })\n        } else {\n          // update if exist\n          this.$store.dispatch('updateAccessControl',\n            {\n              presentationId: this.presentationId,\n              id: publicAccessControl.id,\n              accessLevel\n            }\n          );\n        }\n      },\n\n      fetchAccessControlList() {\n        if (this.presentationId === ID_NEW_PRESENTATION) {\n          return;\n        }\n        this.$store.dispatch('fetchAccessControlList', this.presentationId)\n      },\n\n      updateAccessControl({id}, $event) {\n        this.$store.dispatch('updateAccessControl',\n          {\n            presentationId: this.presentationId,\n            id,\n            accessLevel: $event\n          }\n        );\n      },\n      deleteAccessControl({id}) {\n        this.$store.dispatch('deleteAccessControl',\n          {\n            presentationId: this.presentationId,\n            id,\n          }\n        );\n      },\n      addAccessControl() {\n        this.$refs['accessControlForm'].validate((valid) => {\n          if (!valid) {\n            return\n          }\n          this.$store.dispatch('addAccessControl', {\n            presentationId: this.presentationId,\n            userIdentifier: this.accessControlFormUserIdentifier,\n            accessLevel: this.accessControlFormAccessLevel\n          })\n            .then(() => {\n              this.accessControlFormUserIdentifier = '';\n              this.accessControlFormAccessLevel = '';\n              this.$refs['accessControlForm'].resetFields();\n            });\n        });\n      },\n    }\n  }\n</script>\n\n<style scoped>\n  .errorAlert {\n    margin-bottom: 15px;\n  }\n</style>"]}]}