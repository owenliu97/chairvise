{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BasicSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BasicSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {deepCopy} from \"@/common/utility\"\n\nexport default {\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    },\n    hasData: {\n      type: Boolean,\n      required: true\n    },\n    extraFormItemsRules: {\n      type: Object,\n      required: false\n    },\n    editFormSelectionsRule: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    },\n    editFormInvolvedRecordsRule: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    },\n    editFormFiltersRule: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    },\n    editFormJoinersRule: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    },\n    editFormGroupersRule: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    },\n    editFormSortersRule: {\n      type: Array,\n      required: false,\n      default: () => ([])\n    },\n\n  },\n  watch: {\n    'version'() {\n      if (this.isEditing == true) {\n        this.previewAnalysisResult('editForm');\n      }\n      else {\n        this.sendAnalysisRequest();\n      }\n    }\n  },\n  created() {\n    this.syncDataWithProps();\n    this.sendAnalysisRequest();\n  },\n\n  data() {\n    return {\n      isInAdvancedMode: false,\n      isEditing: false,\n\n      editForm: {\n        title: '',\n        description: '',\n        dataSet: '',\n        selections: [],\n        involvedRecords: [],\n        filters: [],\n        joiners: [],\n        groupers: [],\n        sorters: [],\n        extraData: {}\n      },\n\n      editFormRule: {\n        involvedRecords: this.editFormInvolvedRecordsRule,\n        groupers: this.editFormGroupersRule,\n        extraData: this.extraFormItemsRules\n      },\n\n    }\n  },\n\n  computed: {\n    involvedRecordsOptions() {\n      return this.$store.state.dbMetaData.entities.map(entity => ({\n        label: entity.name,\n        value: entity.tableName\n      }))\n    },\n    editFormInvolvedRecords() {\n      return this.editForm.involvedRecords.map(r => ({\n        name: r,\n        customized: !this.$store.state.dbMetaData.entities.some(e => e.tableName === r)\n      }))\n    },\n    filtersFieldOptions() {\n      return this.$store.state.dbMetaData.entities\n        .filter(entity => this.editForm.involvedRecords.includes(entity.tableName))\n        .map(entity => ({\n          label: entity.name,\n          options: entity.fieldMetaDataList.map(field => ({\n            label: field.name,\n            value: field.fieldName\n          }))\n        }))\n    },\n    joinersFieldOptions() {\n      return this.filtersFieldOptions;\n    },\n    groupersFieldOptions() {\n      return this.filtersFieldOptions;\n    },\n    isPresentationEditable() {\n      return this.$store.state.presentation.isPresentationEditable;\n    }\n  },\n\n  methods: {\n    changeEditMode(isEditing) {\n      this.isEditing = isEditing;\n    },\n\n    cancelEditing() {\n      this.isEditing = false;\n      this.syncDataWithProps();\n      this.sendAnalysisRequest();\n    },\n\n    syncDataWithProps() {\n      this.editForm.title = this.sectionDetail.title;\n      this.editForm.description = this.sectionDetail.description;\n      this.editForm.dataSet = this.sectionDetail.dataSet;\n      this.editForm.selections = deepCopy(this.sectionDetail.selections); // deep copy\n      this.editForm.involvedRecords = this.sectionDetail.involvedRecords.map(r => r.name);\n      this.editForm.filters = this.sectionDetail.filters.map(f => Object.assign({}, f));\n      this.editForm.joiners = this.sectionDetail.joiners.map(f => Object.assign({}, f));\n      this.editForm.groupers = this.sectionDetail.groupers.map(r => r.field);\n      this.editForm.sorters = deepCopy(this.sectionDetail.sorters); // deep copy\n      this.editForm.extraData = deepCopy(this.sectionDetail.extraData) // deep copy\n    },\n\n    addSelection() {\n      this.editForm.selections.push({\n        expression: '',\n        rename: '',\n      })\n    },\n\n    removeSelection(selection) {\n      let index = this.editForm.selections.indexOf(selection);\n      this.editForm.selections.splice(index, 1)\n    },\n\n    addJoiner() {\n      this.editForm.joiners.push({\n        left: '',\n        right: '',\n      })\n    },\n\n    removeJoiner(joiner) {\n      let index = this.editForm.joiners.indexOf(joiner);\n      this.editForm.joiners.splice(index, 1)\n    },\n\n    addFilter() {\n      this.editForm.filters.push({\n        field: '',\n        comparator: '=',\n        value: '',\n      })\n    },\n\n    removeFilter(filter) {\n      let index = this.editForm.filters.indexOf(filter);\n      this.editForm.filters.splice(index, 1)\n    },\n\n    addSorter() {\n      this.editForm.sorters.push({\n        field: '',\n        order: '',\n      })\n    },\n\n    removeSorter(sorter) {\n      let index = this.editForm.sorters.indexOf(sorter);\n      this.editForm.sorters.splice(index, 1)\n    },\n\n    saveSectionDetail(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          this.$store.dispatch('saveSectionDetail', {\n            id: this.sectionDetail.id,\n            presentationId: this.presentationId,\n            title: this.editForm.title,\n            description: this.editForm.description,\n            dataSet: this.sectionDetail.dataSet,\n            selections: this.editForm.selections,\n            involvedRecords: deepCopy(this.editFormInvolvedRecords),\n            filters: this.editForm.filters.map(f => Object.assign({}, f)),\n            joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n            groupers: this.editForm.groupers.map(g => ({field: g})),\n            sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n            extraData: this.editForm.extraData\n          })\n            .then(() => {\n              // only update when there is no error in saving\n              if (this.sectionDetail.status.isApiError) {\n                return\n              }\n              this.isEditing = false;\n              this.sendAnalysisRequest();\n            });\n          return true;\n        } else {\n          return false;\n        }\n      });\n    },\n\n    deleteSectionDetail() {\n      this.$store.dispatch('deleteSectionDetail', {\n        presentationId: this.presentationId,\n        id: this.sectionDetail.id\n      });\n    },\n\n    previewAnalysisResult(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (!valid) {\n          return false;\n        }\n\n        this.$store.dispatch('sendPreviewAnalysisRequest', {\n          presentationId: this.presentationId,\n          id: this.sectionDetail.id,\n          dataSet: this.sectionDetail.dataSet,\n          selections: this.editForm.selections,\n          involvedRecords: this.editFormInvolvedRecords,\n          filters: this.editForm.filters,\n          joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n          groupers: this.editForm.groupers.map(g => ({field: g})),\n          sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n          versionId: this.version\n        })\n          .then(() => {\n            this.$emit('update-visualisation', {\n              selections: this.editForm.selections,\n              involvedRecords: this.editFormInvolvedRecords,\n              filters: this.editForm.filters.map(f => Object.assign({}, f)),\n              joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n              groupers: this.editForm.groupers.map(g => ({field: g})),\n              sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n              result: this.sectionDetail.previewResult,\n              extraData: this.editForm.extraData\n            });\n          })\n      });\n    },\n\n    sendAnalysisRequest() {\n      this.$store.dispatch('sendAnalysisRequest', {id: this.sectionDetail.id, presentationId: this.presentationId, version: this.version})\n        .then(() => {\n          this.$emit('update-visualisation', {\n            presentationId: this.presentationId,\n            selections: this.sectionDetail.selections,\n            involvedRecords: this.sectionDetail.involvedRecords,\n            filters: this.sectionDetail.filters,\n            joiners: this.sectionDetail.joiners,\n            result: this.sectionDetail.result,\n            groupers: this.sectionDetail.groupers,\n            sorters: this.sectionDetail.sorters,\n            extraData: this.sectionDetail.extraData,\n            versionId: this.version\n          });\n        })\n    },\n  },\n}\n",{"version":3,"sources":["BasicSectionDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"BasicSectionDetail.vue","sourceRoot":"src/components/sectionDetail","sourcesContent":["<template>\n  <el-row v-loading=\"sectionDetail.status.isLoading\">\n    <el-form status-icon ref=\"editForm\" label-position=\"left\" :model=\"editForm\" label-width=\"170px\"\n             :rules=\"editFormRule\">\n      <div class=\"title\" v-if=\"!isEditing\">\n        {{ sectionDetail.title }}\n        <el-button type=\"primary\" @click=\"changeEditMode(true)\" v-if=\"isPresentationEditable\" icon=\"el-icon-edit\">\n          Edit\n        </el-button>\n        <el-button type=\"danger\" icon=\"el-icon-delete\"  @click=\"deleteSectionDetail\"\n                   v-if=\"isPresentationEditable\">\n          Delete\n        </el-button>\n      </div>\n      <div class=\"title\" v-else>\n        <el-input v-model=\"editForm.title\"></el-input>\n      </div>\n      <el-alert\n        v-if=\"sectionDetail.status.isApiError\"\n        :title=\"sectionDetail.status.apiErrorMsg\"\n        :description=\"sectionDetail.status.apiErrorMsgDetail\"\n        show-icon\n        type=\"error\"\n        class=\"errorMessage\">\n      </el-alert>\n      <el-alert\n        v-if=\"!this.hasData\"\n        title=\"No Data to display\"\n        type=\"info\"\n        class=\"noDataToDisplay\"\n      >\n      </el-alert>\n      <slot v-else></slot>\n      <div v-if=\"!isEditing\" class=\"description\">{{ editForm.description }}</div>\n      <div v-if=\"isEditing\">\n\n        <el-form-item label=\"Editing Mode\">\n          <el-switch\n            v-model=\"isInAdvancedMode\"\n            active-text=\"Advanced\"\n            inactive-text=\"Basic\">\n          </el-switch>\n        </el-form-item>\n\n        <el-form-item v-if=\"isInAdvancedMode\" v-for=\"(selection, index) in editForm.selections\"\n                      :label=\"'Selection ' + index\"\n                      :key=\"'s' + index\"\n                      :prop=\"'selections.' + index\" :rules=\"editFormSelectionsRule\">\n          <el-input v-model=\"selection.expression\" placeholder=\"Expression\" style=\"width: 300px\"></el-input>&nbsp;\n          <el-input v-model=\"selection.rename\" placeholder=\"Rename Field\" style=\"width: 200px\"></el-input>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeSelection(selection)\"></el-button>\n        </el-form-item>\n\n        <el-form-item label=\"Record Involved\" prop=\"involvedRecords\" v-if=\"isInAdvancedMode\" key=\"involvedRecords\">\n          <el-select v-model=\"editForm.involvedRecords\" multiple placeholder=\"Please select\" filterable allow-create>\n            <el-option\n              v-for=\"option in involvedRecordsOptions\"\n              :key=\"option.value\"\n              :label=\"option.label\"\n              :value=\"option.value\">\n            </el-option>\n          </el-select>\n        </el-form-item>\n\n        <el-form-item v-if=\"isInAdvancedMode\" v-for=\"(joiner, index) in editForm.joiners\" :label=\"'Joiner ' + index\"\n                      :key=\"'j' + index\"\n                      :prop=\"'joiners.' + index\" :rules=\"editFormJoinersRule\">\n          On\n          <el-select placeholder=\"Left\" v-model=\"joiner.left\">\n            <el-option-group\n              v-for=\"group in joinersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>\n          Equals\n          <el-select placeholder=\"Right\" v-model=\"joiner.right\">\n            <el-option-group\n              v-for=\"group in joinersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeJoiner(joiner)\"></el-button>\n        </el-form-item>\n\n        <el-form-item v-for=\"(filter, index) in editForm.filters\" :label=\"'Filter ' + index\"\n                      :key=\"'f' + index\"\n                      :prop=\"'filters.' + index\" :rules=\"editFormFiltersRule\">\n          <el-select placeholder=\"Field\" v-model=\"filter.field\" filterable allow-create>\n            <el-option-group\n              v-for=\"group in filtersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>&nbsp;\n          <el-select v-model=\"filter.comparator\" style=\"width: 80px\">\n            <el-option label=\">\" value=\">\"/>\n            <el-option label=\"=\" value=\"=\"/>\n            <el-option label=\"<\" value=\"<\"/>\n          </el-select>&nbsp;\n          <el-input v-model=\"filter.value\" placeholder=\"Value\" style=\"width: 200px\"></el-input>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeFilter(filter)\"></el-button>\n        </el-form-item>\n\n        <el-form-item label=\"Description for the section\">\n          <el-input\n            type=\"textarea\"\n            :autosize=\"{ minRows: 4 }\"\n            placeholder=\"Please enter description (Leave empty to hide the description part)\"\n            v-model=\"editForm.description\">\n          </el-input>\n        </el-form-item>\n\n        <el-form-item label=\"Group (Aggregation)\" prop=\"groupers\" v-if=\"isInAdvancedMode\" key=\"groupers\">\n          <el-select placeholder=\"Groupers\" v-model=\"editForm.groupers\"\n                     style=\"width: 100%\"\n                     multiple\n                     filterable\n                     allow-create>\n            <el-option-group\n              v-for=\"group in groupersFieldOptions\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>&nbsp;\n        </el-form-item>\n\n        <el-form-item v-if=\"isInAdvancedMode\" v-for=\"(sorter, index) in editForm.sorters\" :label=\"'Sorting ' + index\"\n                      :key=\"'sort' + index\"\n                      :prop=\"'sorters.' + index\" :rules=\"editFormSortersRule\">\n          <el-input v-model=\"sorter.field\" placeholder=\"Field to Sort\" style=\"width: 300px\"></el-input>&nbsp;\n          <el-select v-model=\"sorter.order\" style=\"width: 80px\" placeholder=\"Order\">\n            <el-option label=\"Big to Small\" value=\"DESC\"/>\n            <el-option label=\"Small to Big\" value=\"ASC\"/>\n          </el-select>&nbsp;\n          <el-button type=\"danger\" icon=\"el-icon-delete\" @click=\"removeSorter(sorter)\"></el-button>\n        </el-form-item>\n\n        <slot name=\"extraFormItems\" :editForm=\"editForm\" :extraData=\"editForm.extraData\"\n              :isInAdvancedMode=\"isInAdvancedMode\"></slot>\n        <el-form-item>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addSelection\" v-if=\"isInAdvancedMode\">Add selection</el-button>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addJoiner\" v-if=\"isInAdvancedMode\">Add joiner</el-button>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addFilter\">Add filter</el-button>\n          <el-button type=\"success\" icon=\"el-icon-plus\" plain @click=\"addSorter\" v-if=\"isInAdvancedMode\">Add sorting</el-button>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" icon=\"el-icon-view\" @click=\"previewAnalysisResult('editForm')\" plain>Preview</el-button>\n          <el-button type=\"success\" icon=\"el-icon-check\" @click=\"saveSectionDetail('editForm')\">Save</el-button>\n          <el-button icon=\"el-icon-close\" @click=\"cancelEditing\">Cancel</el-button>\n        </el-form-item>\n      </div>\n    </el-form>\n  </el-row>\n</template>\n\n<script>\n  import {deepCopy} from \"@/common/utility\"\n\n  export default {\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      },\n      hasData: {\n        type: Boolean,\n        required: true\n      },\n      extraFormItemsRules: {\n        type: Object,\n        required: false\n      },\n      editFormSelectionsRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormInvolvedRecordsRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormFiltersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormJoinersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormGroupersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n      editFormSortersRule: {\n        type: Array,\n        required: false,\n        default: () => ([])\n      },\n\n    },\n    watch: {\n      'version'() {\n        if (this.isEditing == true) {\n          this.previewAnalysisResult('editForm');\n        }\n        else {\n          this.sendAnalysisRequest();\n        }\n      }\n    },\n    created() {\n      this.syncDataWithProps();\n      this.sendAnalysisRequest();\n    },\n\n    data() {\n      return {\n        isInAdvancedMode: false,\n        isEditing: false,\n\n        editForm: {\n          title: '',\n          description: '',\n          dataSet: '',\n          selections: [],\n          involvedRecords: [],\n          filters: [],\n          joiners: [],\n          groupers: [],\n          sorters: [],\n          extraData: {}\n        },\n\n        editFormRule: {\n          involvedRecords: this.editFormInvolvedRecordsRule,\n          groupers: this.editFormGroupersRule,\n          extraData: this.extraFormItemsRules\n        },\n\n      }\n    },\n\n    computed: {\n      involvedRecordsOptions() {\n        return this.$store.state.dbMetaData.entities.map(entity => ({\n          label: entity.name,\n          value: entity.tableName\n        }))\n      },\n      editFormInvolvedRecords() {\n        return this.editForm.involvedRecords.map(r => ({\n          name: r,\n          customized: !this.$store.state.dbMetaData.entities.some(e => e.tableName === r)\n        }))\n      },\n      filtersFieldOptions() {\n        return this.$store.state.dbMetaData.entities\n          .filter(entity => this.editForm.involvedRecords.includes(entity.tableName))\n          .map(entity => ({\n            label: entity.name,\n            options: entity.fieldMetaDataList.map(field => ({\n              label: field.name,\n              value: field.fieldName\n            }))\n          }))\n      },\n      joinersFieldOptions() {\n        return this.filtersFieldOptions;\n      },\n      groupersFieldOptions() {\n        return this.filtersFieldOptions;\n      },\n      isPresentationEditable() {\n        return this.$store.state.presentation.isPresentationEditable;\n      }\n    },\n\n    methods: {\n      changeEditMode(isEditing) {\n        this.isEditing = isEditing;\n      },\n\n      cancelEditing() {\n        this.isEditing = false;\n        this.syncDataWithProps();\n        this.sendAnalysisRequest();\n      },\n\n      syncDataWithProps() {\n        this.editForm.title = this.sectionDetail.title;\n        this.editForm.description = this.sectionDetail.description;\n        this.editForm.dataSet = this.sectionDetail.dataSet;\n        this.editForm.selections = deepCopy(this.sectionDetail.selections); // deep copy\n        this.editForm.involvedRecords = this.sectionDetail.involvedRecords.map(r => r.name);\n        this.editForm.filters = this.sectionDetail.filters.map(f => Object.assign({}, f));\n        this.editForm.joiners = this.sectionDetail.joiners.map(f => Object.assign({}, f));\n        this.editForm.groupers = this.sectionDetail.groupers.map(r => r.field);\n        this.editForm.sorters = deepCopy(this.sectionDetail.sorters); // deep copy\n        this.editForm.extraData = deepCopy(this.sectionDetail.extraData) // deep copy\n      },\n\n      addSelection() {\n        this.editForm.selections.push({\n          expression: '',\n          rename: '',\n        })\n      },\n\n      removeSelection(selection) {\n        let index = this.editForm.selections.indexOf(selection);\n        this.editForm.selections.splice(index, 1)\n      },\n\n      addJoiner() {\n        this.editForm.joiners.push({\n          left: '',\n          right: '',\n        })\n      },\n\n      removeJoiner(joiner) {\n        let index = this.editForm.joiners.indexOf(joiner);\n        this.editForm.joiners.splice(index, 1)\n      },\n\n      addFilter() {\n        this.editForm.filters.push({\n          field: '',\n          comparator: '=',\n          value: '',\n        })\n      },\n\n      removeFilter(filter) {\n        let index = this.editForm.filters.indexOf(filter);\n        this.editForm.filters.splice(index, 1)\n      },\n\n      addSorter() {\n        this.editForm.sorters.push({\n          field: '',\n          order: '',\n        })\n      },\n\n      removeSorter(sorter) {\n        let index = this.editForm.sorters.indexOf(sorter);\n        this.editForm.sorters.splice(index, 1)\n      },\n\n      saveSectionDetail(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (valid) {\n            this.$store.dispatch('saveSectionDetail', {\n              id: this.sectionDetail.id,\n              presentationId: this.presentationId,\n              title: this.editForm.title,\n              description: this.editForm.description,\n              dataSet: this.sectionDetail.dataSet,\n              selections: this.editForm.selections,\n              involvedRecords: deepCopy(this.editFormInvolvedRecords),\n              filters: this.editForm.filters.map(f => Object.assign({}, f)),\n              joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n              groupers: this.editForm.groupers.map(g => ({field: g})),\n              sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n              extraData: this.editForm.extraData\n            })\n              .then(() => {\n                // only update when there is no error in saving\n                if (this.sectionDetail.status.isApiError) {\n                  return\n                }\n                this.isEditing = false;\n                this.sendAnalysisRequest();\n              });\n            return true;\n          } else {\n            return false;\n          }\n        });\n      },\n\n      deleteSectionDetail() {\n        this.$store.dispatch('deleteSectionDetail', {\n          presentationId: this.presentationId,\n          id: this.sectionDetail.id\n        });\n      },\n\n      previewAnalysisResult(formName) {\n        this.$refs[formName].validate((valid) => {\n          if (!valid) {\n            return false;\n          }\n\n          this.$store.dispatch('sendPreviewAnalysisRequest', {\n            presentationId: this.presentationId,\n            id: this.sectionDetail.id,\n            dataSet: this.sectionDetail.dataSet,\n            selections: this.editForm.selections,\n            involvedRecords: this.editFormInvolvedRecords,\n            filters: this.editForm.filters,\n            joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n            groupers: this.editForm.groupers.map(g => ({field: g})),\n            sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n            versionId: this.version\n          })\n            .then(() => {\n              this.$emit('update-visualisation', {\n                selections: this.editForm.selections,\n                involvedRecords: this.editFormInvolvedRecords,\n                filters: this.editForm.filters.map(f => Object.assign({}, f)),\n                joiners: this.editForm.joiners.map(j => Object.assign({}, j)),\n                groupers: this.editForm.groupers.map(g => ({field: g})),\n                sorters: this.editForm.sorters.map(s => Object.assign({}, s)),\n                result: this.sectionDetail.previewResult,\n                extraData: this.editForm.extraData\n              });\n            })\n        });\n      },\n\n      sendAnalysisRequest() {\n        this.$store.dispatch('sendAnalysisRequest', {id: this.sectionDetail.id, presentationId: this.presentationId, version: this.version})\n          .then(() => {\n            this.$emit('update-visualisation', {\n              presentationId: this.presentationId,\n              selections: this.sectionDetail.selections,\n              involvedRecords: this.sectionDetail.involvedRecords,\n              filters: this.sectionDetail.filters,\n              joiners: this.sectionDetail.joiners,\n              result: this.sectionDetail.result,\n              groupers: this.sectionDetail.groupers,\n              sorters: this.sectionDetail.sorters,\n              extraData: this.sectionDetail.extraData,\n              versionId: this.version\n            });\n          })\n      },\n    },\n  }\n</script>\n\n<style scoped>\n  .title {\n    font-size: 20px;\n    text-align: center;\n    margin-bottom: 10px;\n    margin-top: 10px;\n  }\n\n  .description {\n    margin-top: 20px;\n    padding-left: 50px;\n    padding-right: 50px;\n  }\n\n  .noDataToDisplay {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  .errorMessage {\n    margin-top: 10px;\n  }\n</style>"]}]}