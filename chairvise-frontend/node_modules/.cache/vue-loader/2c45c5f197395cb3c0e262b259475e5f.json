{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\PresentationSection.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\views\\PresentationSection.vue","mtime":1591979968000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ChartJsPluginDataLabels from 'chartjs-plugin-datalabels';\nimport AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\"\nimport {ID_NEW_PRESENTATION} from \"@/common/const\";\nimport SectionListPanel from \"@/components/SectionListPanel.vue\";\nimport PredefinedQueries from \"@/store/data/predefinedQueries\"\nimport PresentationBrief from \"@/components/PresentationBrief.vue\";\n\nexport default {\n    props: {\n        id: String,\n    },\n    data() {\n        return {\n            selectedNewSection: '',\n            presentationId: '',\n        }\n    },\n    computed: {\n        isLogin() {\n            return this.$store.state.userInfo.isLogin\n        },\n\n        isPresentationEditable() {\n            return this.$store.state.presentation.isPresentationEditable;\n        },\n\n        predefinedSections() {\n            let sectionOptionsGroup = {};\n            // grouping the predefined queries\n            for (let key in PredefinedQueries) {\n                if (!PredefinedQueries.hasOwnProperty(key)) {\n                    continue;\n                }\n                let groupName = PredefinedQueries[key].group;\n                if (sectionOptionsGroup[groupName] === undefined) {\n                    sectionOptionsGroup[groupName] = [];\n                }\n                sectionOptionsGroup[groupName].push({\n                    value: key,\n                    label: PredefinedQueries[key].name,\n                })\n            }\n\n            // generate to format that element ui requires\n            let sectionOptions = [];\n            for (let groupName in sectionOptionsGroup) {\n                if (!sectionOptionsGroup.hasOwnProperty(groupName)) {\n                    continue;\n                }\n                sectionOptions.push({\n                    label: groupName,\n                    options: sectionOptionsGroup[groupName]\n                })\n            }\n            return sectionOptions;\n        },\n\n        isNewPresentation() {\n            return this.presentationId === ID_NEW_PRESENTATION\n        },\n\n        sectionList() {\n            return this.$store.state.section.sectionList\n        },\n        isLoadingSectionList() {\n            return this.$store.state.section.sectionListStatus.isLoading\n        },\n        isSectionListApiError() {\n            return this.$store.state.section.sectionListStatus.isApiError\n        },\n        sectionListApiErrorMsg() {\n            return this.$store.state.section.sectionListStatus.apiErrorMsg\n        },\n        isLoadingDBMetaData() {\n            return this.$store.state.dbMetaData.entitiesStatus.isLoading\n        },\n    },\n    components: {\n        AbstractSectionDetail,\n        SectionListPanel,\n        PresentationBrief,\n        ChartJsPluginDataLabels\n    },\n    mounted() {\n        this.presentationId = this.$route.params.id;\n        this.fetchSectionList();\n        this.$store.dispatch('fetchDBMetaDataEntities');\n    },\n    methods: {\n        fetchSectionList() {\n            if (this.isNewPresentation) {\n                this.$store.commit('clearSectionList');\n            } else {\n                this.$store.dispatch('fetchSectionList', this.presentationId)\n            }\n        },\n    }\n}\n",{"version":3,"sources":["PresentationSection.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PresentationSection.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <el-main>\n        <el-container>\n            <el-main>\n                <presentation-brief :id=\"id\"/>\n                <section-list-panel :presentationId=\"id\"/>\n            </el-main>\n        </el-container>\n    </el-main>\n</template>\n\n<script>\n    import ChartJsPluginDataLabels from 'chartjs-plugin-datalabels';\n    import AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\"\n    import {ID_NEW_PRESENTATION} from \"@/common/const\";\n    import SectionListPanel from \"@/components/SectionListPanel.vue\";\n    import PredefinedQueries from \"@/store/data/predefinedQueries\"\n    import PresentationBrief from \"@/components/PresentationBrief.vue\";\n\n    export default {\n        props: {\n            id: String,\n        },\n        data() {\n            return {\n                selectedNewSection: '',\n                presentationId: '',\n            }\n        },\n        computed: {\n            isLogin() {\n                return this.$store.state.userInfo.isLogin\n            },\n\n            isPresentationEditable() {\n                return this.$store.state.presentation.isPresentationEditable;\n            },\n\n            predefinedSections() {\n                let sectionOptionsGroup = {};\n                // grouping the predefined queries\n                for (let key in PredefinedQueries) {\n                    if (!PredefinedQueries.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let groupName = PredefinedQueries[key].group;\n                    if (sectionOptionsGroup[groupName] === undefined) {\n                        sectionOptionsGroup[groupName] = [];\n                    }\n                    sectionOptionsGroup[groupName].push({\n                        value: key,\n                        label: PredefinedQueries[key].name,\n                    })\n                }\n\n                // generate to format that element ui requires\n                let sectionOptions = [];\n                for (let groupName in sectionOptionsGroup) {\n                    if (!sectionOptionsGroup.hasOwnProperty(groupName)) {\n                        continue;\n                    }\n                    sectionOptions.push({\n                        label: groupName,\n                        options: sectionOptionsGroup[groupName]\n                    })\n                }\n                return sectionOptions;\n            },\n\n            isNewPresentation() {\n                return this.presentationId === ID_NEW_PRESENTATION\n            },\n\n            sectionList() {\n                return this.$store.state.section.sectionList\n            },\n            isLoadingSectionList() {\n                return this.$store.state.section.sectionListStatus.isLoading\n            },\n            isSectionListApiError() {\n                return this.$store.state.section.sectionListStatus.isApiError\n            },\n            sectionListApiErrorMsg() {\n                return this.$store.state.section.sectionListStatus.apiErrorMsg\n            },\n            isLoadingDBMetaData() {\n                return this.$store.state.dbMetaData.entitiesStatus.isLoading\n            },\n        },\n        components: {\n            AbstractSectionDetail,\n            SectionListPanel,\n            PresentationBrief,\n            ChartJsPluginDataLabels\n        },\n        mounted() {\n            this.presentationId = this.$route.params.id;\n            this.fetchSectionList();\n            this.$store.dispatch('fetchDBMetaDataEntities');\n        },\n        methods: {\n            fetchSectionList() {\n                if (this.isNewPresentation) {\n                    this.$store.commit('clearSectionList');\n                } else {\n                    this.$store.dispatch('fetchSectionList', this.presentationId)\n                }\n            },\n        }\n    }\n</script>\n\n<style scoped>\n</style>"]}]}