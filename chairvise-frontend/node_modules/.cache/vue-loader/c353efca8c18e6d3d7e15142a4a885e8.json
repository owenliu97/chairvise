{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\SectionListPanel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\SectionListPanel.vue","mtime":1593237676000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\"\nimport {ID_NEW_PRESENTATION} from \"@/common/const\";\nimport PredefinedQueries from \"@/store/data/predefinedQueries\"\nimport EmptySection from \"@/components/emptyStates/EmptySection.vue\"\n\nexport default {\n  props: {\n    presentationId: String,\n  },\n  watch: {\n    presentationId: 'fetchSectionList',\n    'presentationFormVersion'() {\n      this.updateVersion();\n    }\n  },\n  data() {\n    return {\n      selectedNewSection: '',\n      presentationFormVersion: ''\n    }\n  },\n  computed: {\n    isLogin() {\n      return this.$store.state.userInfo.isLogin\n    },\n\n    isPresentationEditable() {\n      return this.$store.state.presentation.isPresentationEditable;\n    },\n\n    predefinedSections() {\n      let sectionOptionsGroup = {};\n      // grouping the predefined queries\n      for (let key in PredefinedQueries) {\n        if (!PredefinedQueries.hasOwnProperty(key)) {\n          continue;\n        }\n        let groupName = PredefinedQueries[key].group;\n        if (sectionOptionsGroup[groupName] === undefined) {\n          sectionOptionsGroup[groupName] = [];\n        }\n        sectionOptionsGroup[groupName].push({\n          value: key,\n          label: PredefinedQueries[key].name,\n        })\n      }\n\n      // generate to format that element ui requires\n      let sectionOptions = [];\n      for (let groupName in sectionOptionsGroup) {\n        if (!sectionOptionsGroup.hasOwnProperty(groupName)) {\n          continue;\n        }\n        sectionOptions.push({\n          label: groupName,\n          options: sectionOptionsGroup[groupName]\n        })\n      }\n      return sectionOptions;\n    },\n\n    isNewPresentation() {\n      return this.presentationId === ID_NEW_PRESENTATION\n    },\n\n    sectionList() {\n      return this.$store.state.section.sectionList\n    },\n    isSectionListEmpty() {\n      return this.$store.state.section.sectionList.length <= 0\n    },\n    isLoadingSectionList() {\n      return this.$store.state.section.sectionListStatus.isLoading\n    },\n    isSectionListApiError() {\n      return this.$store.state.section.sectionListStatus.isApiError\n    },\n    sectionListApiErrorMsg() {\n      return this.$store.state.section.sectionListStatus.apiErrorMsg\n    },\n    isLoadingDBMetaData() {\n      return this.$store.state.dbMetaData.entitiesStatus.isLoading\n    },\n    versions() {\n      let list = Array.from(new Set(this.$store.state.presentation.versionList.map(v => v.versionId)));\n      this.setDefaultValueForVersionList(list[0]);\n      return list;\n    },\n  },\n  components: {\n    AbstractSectionDetail,\n    EmptySection\n  },\n  mounted() {\n    this.fetchSectionList();\n    this.$store.dispatch('fetchDBMetaDataEntities');\n    this.$store.dispatch('getVersionList');\n  },\n  methods: {\n    updateVersion() {\n      var value = this.presentationFormVersion;\n      if (value === undefined) {\n          value = this.versions[0];\n      }\n      this.$store.commit('setPresentationFormField', {\n          field: 'version',\n          value\n      });\n    },\n\n    setDefaultValueForVersionList(value) {\n      this.presentationFormVersion = value;\n    },\n\n    fetchSectionList() {\n      if (this.isNewPresentation) {\n        this.$store.commit('clearSectionList');\n      } else {\n        this.$store.dispatch('fetchSectionList', this.presentationId)\n      }\n    },\n\n    addNewSection() {\n      if (this.selectedNewSection.length === 0) {\n\n        this.$notify.error({\n          title: 'Error',\n          message: 'Please select a section to add into presentation.'\n        });\n        return;\n      }\n      this.$store.dispatch('addSectionDetail', {\n        presentationId: this.presentationId,\n        selectedNewSection: this.selectedNewSection,\n        dataSet: this.$store.state.userInfo.userEmail,\n      }).then(() => {\n        this.selectedNewSection = ''\n      })\n    }\n  }\n}\n",{"version":3,"sources":["SectionListPanel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"SectionListPanel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div v-loading=\"isLoadingDBMetaData || isLoadingSectionList\" v-if=\"!isNewPresentation\">\n      <el-aside width=\"300px\" class=\"addRowRightAlign\" v-if=\"isLogin\">\n        <el-card v-if=\"!isSectionListEmpty\" >\n          <div slot=\"header\" class=\"clearfix\">\n            <span> Select version </span>\n          </div>\n          <el-select class= \"versionInput\" v-model=\"presentationFormVersion\" placeholder=\"Please select a version\" >\n            <el-option v-for=\"v in versions\" :key=\"v\" :label=\"v\" :value=\"v\">\n            </el-option>\n          </el-select>        \n        </el-card>\n        <el-card>  \n          <div slot=\"header\" class=\"clearfix\">\n            <span> Add section </span>\n          </div>\n          <el-select class= \"selectionInput\" v-model=\"selectedNewSection\" placeholder=\"Please select a section to add\"\n                    filterable>\n            <el-option-group\n              v-for=\"group in predefinedSections\"\n              :key=\"group.label\"\n              :label=\"group.label\">\n              <el-option\n                v-for=\"item in group.options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\">\n              </el-option>\n            </el-option-group>\n          </el-select>\n          <el-button class=\"selectionInputButton\" icon=\"el-icon-plus\" type=\"success\" @click=\"addNewSection\">Add New Section</el-button>\n        </el-card>\n      </el-aside>\n      <br/>\n      <el-alert\n        v-if=\"isSectionListApiError\"\n        :title=\"sectionListApiErrorMsg\"\n        type=\"error\" show-icon>\n      </el-alert>\n      <el-card shadow=\"hover\">\n        <abstract-section-detail class=\"presentation-section\" v-for=\"section in sectionList\" :sectionDetail=\"section\"\n                            :key=\"section.id\" :presentationId=\"presentationId\" :version=\"presentationFormVersion\"/>\n        <EmptySection v-if=\"isSectionListEmpty\" />\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\n  import AbstractSectionDetail from \"@/components/AbstractSectionDetail.vue\"\n  import {ID_NEW_PRESENTATION} from \"@/common/const\";\n  import PredefinedQueries from \"@/store/data/predefinedQueries\"\n  import EmptySection from \"@/components/emptyStates/EmptySection.vue\"\n\n  export default {\n    props: {\n      presentationId: String,\n    },\n    watch: {\n      presentationId: 'fetchSectionList',\n      'presentationFormVersion'() {\n        this.updateVersion();\n      }\n    },\n    data() {\n      return {\n        selectedNewSection: '',\n        presentationFormVersion: ''\n      }\n    },\n    computed: {\n      isLogin() {\n        return this.$store.state.userInfo.isLogin\n      },\n\n      isPresentationEditable() {\n        return this.$store.state.presentation.isPresentationEditable;\n      },\n\n      predefinedSections() {\n        let sectionOptionsGroup = {};\n        // grouping the predefined queries\n        for (let key in PredefinedQueries) {\n          if (!PredefinedQueries.hasOwnProperty(key)) {\n            continue;\n          }\n          let groupName = PredefinedQueries[key].group;\n          if (sectionOptionsGroup[groupName] === undefined) {\n            sectionOptionsGroup[groupName] = [];\n          }\n          sectionOptionsGroup[groupName].push({\n            value: key,\n            label: PredefinedQueries[key].name,\n          })\n        }\n\n        // generate to format that element ui requires\n        let sectionOptions = [];\n        for (let groupName in sectionOptionsGroup) {\n          if (!sectionOptionsGroup.hasOwnProperty(groupName)) {\n            continue;\n          }\n          sectionOptions.push({\n            label: groupName,\n            options: sectionOptionsGroup[groupName]\n          })\n        }\n        return sectionOptions;\n      },\n\n      isNewPresentation() {\n        return this.presentationId === ID_NEW_PRESENTATION\n      },\n\n      sectionList() {\n        return this.$store.state.section.sectionList\n      },\n      isSectionListEmpty() {\n        return this.$store.state.section.sectionList.length <= 0\n      },\n      isLoadingSectionList() {\n        return this.$store.state.section.sectionListStatus.isLoading\n      },\n      isSectionListApiError() {\n        return this.$store.state.section.sectionListStatus.isApiError\n      },\n      sectionListApiErrorMsg() {\n        return this.$store.state.section.sectionListStatus.apiErrorMsg\n      },\n      isLoadingDBMetaData() {\n        return this.$store.state.dbMetaData.entitiesStatus.isLoading\n      },\n      versions() {\n        let list = Array.from(new Set(this.$store.state.presentation.versionList.map(v => v.versionId)));\n        this.setDefaultValueForVersionList(list[0]);\n        return list;\n      },\n    },\n    components: {\n      AbstractSectionDetail,\n      EmptySection\n    },\n    mounted() {\n      this.fetchSectionList();\n      this.$store.dispatch('fetchDBMetaDataEntities');\n      this.$store.dispatch('getVersionList');\n    },\n    methods: {\n      updateVersion() {\n        var value = this.presentationFormVersion;\n        if (value === undefined) {\n            value = this.versions[0];\n        }\n        this.$store.commit('setPresentationFormField', {\n            field: 'version',\n            value\n        });\n      },\n\n      setDefaultValueForVersionList(value) {\n        this.presentationFormVersion = value;\n      },\n\n      fetchSectionList() {\n        if (this.isNewPresentation) {\n          this.$store.commit('clearSectionList');\n        } else {\n          this.$store.dispatch('fetchSectionList', this.presentationId)\n        }\n      },\n\n      addNewSection() {\n        if (this.selectedNewSection.length === 0) {\n\n          this.$notify.error({\n            title: 'Error',\n            message: 'Please select a section to add into presentation.'\n          });\n          return;\n        }\n        this.$store.dispatch('addSectionDetail', {\n          presentationId: this.presentationId,\n          selectedNewSection: this.selectedNewSection,\n          dataSet: this.$store.state.userInfo.userEmail,\n        }).then(() => {\n          this.selectedNewSection = ''\n        })\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .textBold {\n    font-weight: bold;\n  }\n  .versionInput {\n    display: inline-block;\n    width: 100%;\n  }\n  .selectionInput {\n    display: inline-block;\n    width: 100%;\n    margin-bottom: 16px;\n  }\n  .selectionInputButton {\n    display: inline-block;\n    width: 100%;\n  }\n  .addRowRightAlign {\n    float: right;\n    margin-top: 18px;\n    margin-left: 16px;\n  }\n  .addRowRightAlign .el-card{\n    margin-bottom: 16px;\n  }\n</style>"]}]}