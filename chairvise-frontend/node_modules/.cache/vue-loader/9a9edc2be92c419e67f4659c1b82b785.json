{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\WordCloudSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\WordCloudSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport WordCloud from '@/components/sectionDetail/chart/WordCloud.vue'\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n\nexport default {\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      editFormSelectionsRule: [{\n        validator: (rule, value, callback) => {\n          if (value.expression.length === 0 || value.expression.rename === 0) {\n            return callback(new Error('Please specify all fields'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormInvolvedRecordsRule: [{\n        validator: (rule, value, callback) => {\n          if (value.length >= 2 || value.length < 1) {\n            return callback(new Error('There must be only one record involved'))\n          }\n          return callback();\n        },\n        trigger: 'change',\n      }],\n      editFormFiltersRule: [{\n        validator: (rule, value, callback) => {\n          if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n            return callback(new Error('Please specify all fields'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n\n      extraFormItemsRules: {\n        delimiters: [\n          {\n            validator: (rule, value, callback) => {\n              if (value.length === 0) {\n                return callback(new Error('Please specify at least one delimiter'))\n              }\n              callback();\n            },\n            trigger: 'blur',\n          }\n        ],\n      },\n\n      // word cloud related field\n      words: [],\n    }\n  },\n\n  computed: {\n    hasData() {\n      return this.words.length !== 0;\n    }\n  },\n\n  methods: {\n    updateVisualisation({result, selections, extraData}) {\n      let fieldName = selections[0].rename;\n      let wordsCount = {};\n      let delimiterRegex = new RegExp(extraData.delimiters.join('|'), 'g');\n      // will only require at least one selection\n      // count the occurrence of word\n      result.forEach(r => {\n        r[fieldName].split(delimiterRegex)\n          .filter(w => !extraData.ignoreWords.includes(w.toLowerCase())) // filter ignoreWords\n          .forEach(w => {\n            // skip empty string\n            if (w.length === 0) {\n              return\n            }\n            // normalized word e.g. 'digital world' -> `Digital World`\n            let normalizedW = this.capitalizeFirstWord(w);\n            // put in the count map\n            if (wordsCount.hasOwnProperty(normalizedW)) {\n              wordsCount[normalizedW]++\n            } else {\n              wordsCount[normalizedW] = 1;\n            }\n          })\n      });\n      // generate format as VueWordCloud required\n      let words = [];\n      for (let word in wordsCount) {\n        if (wordsCount.hasOwnProperty(word)) {\n          words.push([word, wordsCount[word]])\n        }\n      }\n      // sort and keep the first twenty words\n      words.sort((a, b) => {\n        return b[1] - a[1]\n      });\n      words = words.slice(0, 20);\n      this.words = words;\n    },\n\n    capitalizeFirstWord(str) {\n      return str.replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n  },\n\n  components: {\n    WordCloud,\n    BasicSectionDetail\n  }\n}\n",{"version":3,"sources":["WordCloudSectionDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"WordCloudSectionDetail.vue","sourceRoot":"src/components/sectionDetail","sourcesContent":["<template>\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\n                        :version=\"version\"\n                        :edit-form-selections-rule=\"editFormSelectionsRule\"\n                        :edit-form-involved-records-rule=\"editFormInvolvedRecordsRule\"\n                        :edit-form-filters-rule=\"editFormFiltersRule\"\n                        :extraFormItemsRules=\"extraFormItemsRules\"\n                        @update-visualisation=\"updateVisualisation\">\n    <word-cloud\n      :data=\"words\">\n    </word-cloud>\n\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\n      <el-form-item label=\"Delimiter to Generate Word\" prop=\"extraData.delimiters\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select multiple v-model=\"slotProps.extraData.delimiters\">\n          <el-option label=\"\\r\" value=\"\\r\"/>\n          <el-option label=\"\\n\" value=\"\\n\"/>\n          <el-option label=\"Space\" value=\"\\s\"/>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Word to Ignore\" prop=\"extraData.ignoreWords\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select multiple v-model=\"slotProps.extraData.ignoreWords\" filterable allow-create>\n        </el-select>\n      </el-form-item>\n    </template>\n  </basic-section-detail>\n</template>\n\n<script>\n  import WordCloud from '@/components/sectionDetail/chart/WordCloud.vue'\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n\n  export default {\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      }\n    },\n\n    data() {\n      return {\n        editFormSelectionsRule: [{\n          validator: (rule, value, callback) => {\n            if (value.expression.length === 0 || value.expression.rename === 0) {\n              return callback(new Error('Please specify all fields'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormInvolvedRecordsRule: [{\n          validator: (rule, value, callback) => {\n            if (value.length >= 2 || value.length < 1) {\n              return callback(new Error('There must be only one record involved'))\n            }\n            return callback();\n          },\n          trigger: 'change',\n        }],\n        editFormFiltersRule: [{\n          validator: (rule, value, callback) => {\n            if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n              return callback(new Error('Please specify all fields'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n\n        extraFormItemsRules: {\n          delimiters: [\n            {\n              validator: (rule, value, callback) => {\n                if (value.length === 0) {\n                  return callback(new Error('Please specify at least one delimiter'))\n                }\n                callback();\n              },\n              trigger: 'blur',\n            }\n          ],\n        },\n\n        // word cloud related field\n        words: [],\n      }\n    },\n\n    computed: {\n      hasData() {\n        return this.words.length !== 0;\n      }\n    },\n\n    methods: {\n      updateVisualisation({result, selections, extraData}) {\n        let fieldName = selections[0].rename;\n        let wordsCount = {};\n        let delimiterRegex = new RegExp(extraData.delimiters.join('|'), 'g');\n        // will only require at least one selection\n        // count the occurrence of word\n        result.forEach(r => {\n          r[fieldName].split(delimiterRegex)\n            .filter(w => !extraData.ignoreWords.includes(w.toLowerCase())) // filter ignoreWords\n            .forEach(w => {\n              // skip empty string\n              if (w.length === 0) {\n                return\n              }\n              // normalized word e.g. 'digital world' -> `Digital World`\n              let normalizedW = this.capitalizeFirstWord(w);\n              // put in the count map\n              if (wordsCount.hasOwnProperty(normalizedW)) {\n                wordsCount[normalizedW]++\n              } else {\n                wordsCount[normalizedW] = 1;\n              }\n            })\n        });\n        // generate format as VueWordCloud required\n        let words = [];\n        for (let word in wordsCount) {\n          if (wordsCount.hasOwnProperty(word)) {\n            words.push([word, wordsCount[word]])\n          }\n        }\n        // sort and keep the first twenty words\n        words.sort((a, b) => {\n          return b[1] - a[1]\n        });\n        words = words.slice(0, 20);\n        this.words = words;\n      },\n\n      capitalizeFirstWord(str) {\n        return str.replace(/\\b\\w/g, l => l.toUpperCase());\n      }\n    },\n\n    components: {\n      WordCloud,\n      BasicSectionDetail\n    }\n  }\n</script>"]}]}