{"remainingRequest":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BarChartSectionDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\src\\components\\sectionDetail\\BarChartSectionDetail.vue","mtime":1573697856000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Liu Ruiping\\Documents\\course-profile-mcomp\\proj\\chairvise3-0-final\\src\\web\\app\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport BarChart from '@/components/sectionDetail/chart/BarChart.vue'\nimport BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\nimport {generateBorderColor, generateBackgroundColor} from '@/common/color'\n\nexport default {\n  name: \"BarChartSectionDetail\",\n\n  props: {\n    sectionDetail: {\n      type: Object,\n      required: true\n    },\n    presentationId: {\n      type: String,\n      required: true\n    },\n    version: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      editFormSelectionsRule: [{\n        validator: (rule, value, callback) => {\n          if (value.expression.length === 0 || value.expression.rename === 0) {\n            return callback(new Error('Please specify all field for the selection'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormInvolvedRecordsRule: [{\n        validator: (rule, value, callback) => {\n          if (value.length < 1) {\n            return callback(new Error('There must be one record involved'))\n          }\n          callback();\n        },\n        trigger: 'change',\n      }],\n      editFormFiltersRule: [{\n        validator: (rule, value, callback) => {\n          if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n            return callback(new Error('Please specify all fields'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormSortersRule: [{\n        validator: (rule, value, callback) => {\n          if (value.field.length === 0 || value.order.length === 0) {\n            return callback(new Error('Please specify all fields'))\n          }\n          callback();\n        },\n        trigger: 'blur',\n      }],\n      editFormGroupersRule: [],\n\n      extraFormItemsRules: {\n        xAxisFieldName: [{\n          required: true,\n          message: 'There should be one field to map x axis',\n          trigger: 'blur',\n        }],\n        yAxisFieldName: [{\n          required: true,\n          message: 'There should be one field to map y axis',\n          trigger: 'blur',\n        }],\n      },\n\n      labels: [],\n      dataset: {},\n      partialResult: [],\n      options: {},\n    }\n  },\n\n  computed: {\n    hasData() {\n      return this.labels.length !== 0;\n    },\n\n    chartData() {\n      return {\n        labels: this.labels,\n        datasets: [this.dataset]\n      }\n    }\n  },\n\n  methods: {\n    updateVisualisation({result, extraData}) {\n      this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\n      // process x axis\n      this.labels = this.partialResult.map(record => record[extraData.xAxisFieldName]);\n\n      // process y axis\n      this.dataset = {\n        borderWidth: 1,\n        label: extraData.dataSetLabel,\n        data: this.partialResult.map(record => record[extraData.yAxisFieldName]),\n        backgroundColor: generateBackgroundColor(this.partialResult.length),\n        borderColor: generateBorderColor(this.partialResult.length),\n      };\n\n      // generate color\n      if (extraData.isColorfulBar) {\n        this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length);\n        this.dataset.borderColor = generateBorderColor(this.partialResult.length);\n      } else {\n        // choose a color in random\n        this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n        this.dataset.borderColor = generateBorderColor(this.partialResult.length)[this.partialResult.length - 1];\n      }\n\n      // to display more data\n      let toolTipFooterCallback = (tooltipItems) => {\n        let currentIndex = tooltipItems[0].index;\n        return extraData.fieldsShownInToolTips.map(f => `${f.label}: ${this.partialResult[currentIndex][f.field]}`);\n      };\n\n      // process tooltip callback\n      this.options = {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            gridLines: {\n              display: true\n            }\n          }],\n          xAxes: [{\n            gridLines: {\n              display: false\n            },\n            ticks: {\n              autoSkip: false\n            }\n          }]\n        },\n        legend: {\n          display: true,\n          position: 'bottom'\n        },\n        layout: {\n          padding: {\n            top: 30,\n          }\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        tooltips: {\n          callbacks: {\n            footer: toolTipFooterCallback\n          }\n        },\n        plugins: {\n          datalabels: {\n            anchor: 'end',\n            align: 'end'\n          }\n        }\n      }\n    },\n\n    addTooltip(tooltips) {\n      tooltips.push({\n        label: '',\n        field: '',\n      })\n    },\n\n    removeTooltip(tooltips, tooltipToRemove) {\n      let index = tooltips.indexOf(tooltipToRemove);\n      tooltips.splice(index, 1)\n    },\n  },\n\n  components: {\n    BasicSectionDetail,\n    BarChart\n  }\n}\n",{"version":3,"sources":["BarChartSectionDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"BarChartSectionDetail.vue","sourceRoot":"src/components/sectionDetail","sourcesContent":["<template>\n  <basic-section-detail :section-detail=\"sectionDetail\" :presentation-id=\"presentationId\" :has-data=\"hasData\"\n                        :version=\"version\"\n                        :edit-form-selections-rule=\"editFormSelectionsRule\"\n                        :edit-form-involved-records-rule=\"editFormInvolvedRecordsRule\"\n                        :edit-form-filters-rule=\"editFormFiltersRule\"\n                        :edit-form-groupers-rule=\"editFormGroupersRule\"\n                        :edit-form-sorters-rule=\"editFormSortersRule\"\n                        :extraFormItemsRules=\"extraFormItemsRules\"\n                        @update-visualisation=\"updateVisualisation\">\n    <bar-chart :chart-data=\"chartData\" :options=\"options\"></bar-chart>\n\n    <template slot=\"extraFormItems\" slot-scope=\"slotProps\">\n      <el-form-item label=\"xAxis Field Name\" prop=\"extraData.xAxisFieldName\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"xAxisFieldName\" v-model=\"slotProps.extraData.xAxisFieldName\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"yAxis Field Name\" prop=\"extraData.yAxisFieldName\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-select placeholder=\"yAxisFieldName\" v-model=\"slotProps.extraData.yAxisFieldName\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Legend Label Name\" prop=\"extraData.dataSetLabel\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-input v-model=\"slotProps.extraData.dataSetLabel\" placeholder=\"Label Name\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"Colorful Bar\" prop=\"extraData.isColorfulBar\" v-if=\"slotProps.isInAdvancedMode\">\n        <el-switch\n          v-model=\"slotProps.extraData.isColorfulBar\"\n          active-text=\"Colorful Bar\"\n          inactive-text=\"Single Color Bar\">\n        </el-switch>\n      </el-form-item>\n      <el-form-item label=\"Num of result to display\" prop=\"extraData.numOfResultToDisplay\"\n                    v-if=\"slotProps.isInAdvancedMode\">\n        <el-slider v-model=\"slotProps.extraData.numOfResultToDisplay\" :min=\"5\" :max=\"30\"></el-slider>\n      </el-form-item>\n      <el-form-item v-if=\"slotProps.isInAdvancedMode\"\n                    v-for=\"(tooltip, index) in slotProps.extraData.fieldsShownInToolTips\" :label=\"'Tooltips ' + index\"\n                    :key=\"'tooltips' + index\">\n        <el-select placeholder=\"Field\" v-model=\"tooltip.field\">\n          <el-option\n            v-for=\"selection in slotProps.editForm.selections\"\n            :key=\"selection.rename\"\n            :label=\"selection.rename\"\n            :value=\"selection.rename\">\n          </el-option>\n        </el-select>&nbsp;\n        <el-input v-model=\"tooltip.label\" placeholder=\"Label Name\" style=\"width: 150px\"></el-input>&nbsp;\n        <el-button type=\"danger\" icon=\"el-icon-delete\" circle\n                   @click=\"removeTooltip(slotProps.extraData.fieldsShownInToolTips, tooltip)\"></el-button>\n      </el-form-item>\n      <el-form-item v-if=\"slotProps.isInAdvancedMode\">\n        <el-button type=\"success\" plain @click=\"addTooltip(slotProps.extraData.fieldsShownInToolTips)\">Add Tooltip\n        </el-button>\n      </el-form-item>\n    </template>\n  </basic-section-detail>\n</template>\n\n<script>\n  import BarChart from '@/components/sectionDetail/chart/BarChart.vue'\n  import BasicSectionDetail from '@/components/sectionDetail/BasicSectionDetail.vue'\n  import {generateBorderColor, generateBackgroundColor} from '@/common/color'\n\n  export default {\n    name: \"BarChartSectionDetail\",\n\n    props: {\n      sectionDetail: {\n        type: Object,\n        required: true\n      },\n      presentationId: {\n        type: String,\n        required: true\n      },\n      version: {\n        type: String,\n        required: true\n      }\n    },\n\n    data() {\n      return {\n        editFormSelectionsRule: [{\n          validator: (rule, value, callback) => {\n            if (value.expression.length === 0 || value.expression.rename === 0) {\n              return callback(new Error('Please specify all field for the selection'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormInvolvedRecordsRule: [{\n          validator: (rule, value, callback) => {\n            if (value.length < 1) {\n              return callback(new Error('There must be one record involved'))\n            }\n            callback();\n          },\n          trigger: 'change',\n        }],\n        editFormFiltersRule: [{\n          validator: (rule, value, callback) => {\n            if (value.field.length === 0 || value.comparator.length === 0 || value.value.length === 0) {\n              return callback(new Error('Please specify all fields'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormSortersRule: [{\n          validator: (rule, value, callback) => {\n            if (value.field.length === 0 || value.order.length === 0) {\n              return callback(new Error('Please specify all fields'))\n            }\n            callback();\n          },\n          trigger: 'blur',\n        }],\n        editFormGroupersRule: [],\n\n        extraFormItemsRules: {\n          xAxisFieldName: [{\n            required: true,\n            message: 'There should be one field to map x axis',\n            trigger: 'blur',\n          }],\n          yAxisFieldName: [{\n            required: true,\n            message: 'There should be one field to map y axis',\n            trigger: 'blur',\n          }],\n        },\n\n        labels: [],\n        dataset: {},\n        partialResult: [],\n        options: {},\n      }\n    },\n\n    computed: {\n      hasData() {\n        return this.labels.length !== 0;\n      },\n\n      chartData() {\n        return {\n          labels: this.labels,\n          datasets: [this.dataset]\n        }\n      }\n    },\n\n    methods: {\n      updateVisualisation({result, extraData}) {\n        this.partialResult = result.slice(0, extraData.numOfResultToDisplay);\n        // process x axis\n        this.labels = this.partialResult.map(record => record[extraData.xAxisFieldName]);\n\n        // process y axis\n        this.dataset = {\n          borderWidth: 1,\n          label: extraData.dataSetLabel,\n          data: this.partialResult.map(record => record[extraData.yAxisFieldName]),\n          backgroundColor: generateBackgroundColor(this.partialResult.length),\n          borderColor: generateBorderColor(this.partialResult.length),\n        };\n\n        // generate color\n        if (extraData.isColorfulBar) {\n          this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length);\n          this.dataset.borderColor = generateBorderColor(this.partialResult.length);\n        } else {\n          // choose a color in random\n          this.dataset.backgroundColor = generateBackgroundColor(this.partialResult.length)[this.partialResult.length - 1];\n          this.dataset.borderColor = generateBorderColor(this.partialResult.length)[this.partialResult.length - 1];\n        }\n\n        // to display more data\n        let toolTipFooterCallback = (tooltipItems) => {\n          let currentIndex = tooltipItems[0].index;\n          return extraData.fieldsShownInToolTips.map(f => `${f.label}: ${this.partialResult[currentIndex][f.field]}`);\n        };\n\n        // process tooltip callback\n        this.options = {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              },\n              gridLines: {\n                display: true\n              }\n            }],\n            xAxes: [{\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                autoSkip: false\n              }\n            }]\n          },\n          legend: {\n            display: true,\n            position: 'bottom'\n          },\n          layout: {\n            padding: {\n              top: 30,\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            callbacks: {\n              footer: toolTipFooterCallback\n            }\n          },\n          plugins: {\n            datalabels: {\n              anchor: 'end',\n              align: 'end'\n            }\n          }\n        }\n      },\n\n      addTooltip(tooltips) {\n        tooltips.push({\n          label: '',\n          field: '',\n        })\n      },\n\n      removeTooltip(tooltips, tooltipToRemove) {\n        let index = tooltips.indexOf(tooltipToRemove);\n        tooltips.splice(index, 1)\n      },\n    },\n\n    components: {\n      BasicSectionDetail,\n      BarChart\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"]}]}